import{d as l}from"./index.BCNxQF8k.js";const y=async(o="",i=!1)=>{let t=null;const e=await fetch(`${l}/api/models${i?"/base":""}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}}}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(t=a,console.log(a),null));if(t)throw t;return(e==null?void 0:e.data)??[]},j=async(o,i)=>{let t=null;const e=await fetch(`${l}/api/chat/completed`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}},body:JSON.stringify(i)}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?t=n.detail:t=n,null));if(t)throw t;return e},g=async(o,i,t)=>{let e=null;const n=await fetch(`${l}/api/chat/actions/${i}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}},body:JSON.stringify(t)}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(console.log(a),"detail"in a?e=a.detail:e=a,null));if(e)throw e;return n},m=async(o="")=>{let i=null;const t=await fetch(`${l}/api/task/config`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),i=e,null));if(i)throw i;return t},$=async(o,i)=>{let t=null;const e=await fetch(`${l}/api/task/config/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}},body:JSON.stringify(i)}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),"detail"in n?t=n.detail:t=n,null));if(t)throw t;return e},T=async(o="",i,t,e)=>{var s,r;let n=null;const a=await fetch(`${l}/api/task/title/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({model:i,messages:t,...e&&{chat_id:e}})}).then(async c=>{if(!c.ok)throw await c.json();return c.json()}).catch(c=>(console.log(c),"detail"in c&&(n=c.detail),null));if(n)throw n;return((r=(s=a==null?void 0:a.choices[0])==null?void 0:s.message)==null?void 0:r.content.replace(/["']/g,""))??"New Chat"},S=async(o="",i,t,e)=>{var s,r;let n=null;const a=await fetch(`${l}/api/task/tags/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({model:i,messages:t,...e&&{chat_id:e}})}).then(async c=>{if(!c.ok)throw await c.json();return c.json()}).catch(c=>(console.log(c),"detail"in c&&(n=c.detail),null));if(n)throw n;try{const h=(((r=(s=a==null?void 0:a.choices[0])==null?void 0:s.message)==null?void 0:r.content)??"").replace(/['‘’`]/g,'"'),p=h.indexOf("{"),d=h.lastIndexOf("}");if(p!==-1&&d!==-1){const f=h.substring(p,d+1),u=JSON.parse(f);return u&&u.tags?Array.isArray(u.tags)?u.tags:[]:[]}return[]}catch(c){return console.error("Failed to parse response: ",c),[]}},A=async(o="",i,t,e)=>{var r,c;let n=null;const a=await fetch(`${l}/api/task/emoji/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({model:i,prompt:t,...e&&{chat_id:e}})}).then(async h=>{if(!h.ok)throw await h.json();return h.json()}).catch(h=>(console.log(h),"detail"in h&&(n=h.detail),null));if(n)throw n;const s=((c=(r=a==null?void 0:a.choices[0])==null?void 0:r.message)==null?void 0:c.content.replace(/["']/g,""))??null;return s&&new RegExp("\\p{Extended_Pictographic}","u").test(s)?s.match(new RegExp("\\p{Extended_Pictographic}","gu"))[0]:null},C=async(o="",i,t,e,n="web_search")=>{var c,h;let a=null;const s=await fetch(`${l}/api/task/queries/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({model:i,messages:t,prompt:e,type:n})}).then(async p=>{if(!p.ok)throw await p.json();return p.json()}).catch(p=>(console.log(p),"detail"in p&&(a=p.detail),null));if(a)throw a;const r=((h=(c=s==null?void 0:s.choices[0])==null?void 0:c.message)==null?void 0:h.content)??"";try{const p=r.indexOf("{"),d=r.lastIndexOf("}");if(p!==-1&&d!==-1){const f=r.substring(p,d+1),u=JSON.parse(f);return u&&u.queries?Array.isArray(u.queries)?u.queries:[]:[]}return[r]}catch(p){return console.error("Failed to parse response: ",p),[r]}},O=async(o="",i,t,e)=>{const n=new AbortController;let a=null;const s=await fetch(`${l}/api/task/moa/completions`,{signal:n.signal,method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({model:i,prompt:t,responses:e,stream:!0})}).catch(r=>(console.log(r),a=r,null));if(a)throw a;return[s,n]},P=async(o="")=>{let i=null;const t=await fetch(`${l}/api/pipelines/list`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}}}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),i=n,null));if(i)throw i;return(t==null?void 0:t.data)??[]},k=async(o,i,t)=>{let e=null;const n=new FormData;n.append("file",i),n.append("urlIdx",t);const a=await fetch(`${l}/api/pipelines/upload`,{method:"POST",headers:{...o&&{authorization:`Bearer ${o}`}},body:n}).then(async s=>{if(!s.ok)throw await s.json();return s.json()}).catch(s=>(console.log(s),"detail"in s?e=s.detail:e=s,null));if(e)throw e;return a},b=async(o,i,t)=>{let e=null;const n=await fetch(`${l}/api/pipelines/add`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}},body:JSON.stringify({url:i,urlIdx:t})}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(console.log(a),"detail"in a?e=a.detail:e=a,null));if(e)throw e;return n},B=async(o,i,t)=>{let e=null;const n=await fetch(`${l}/api/pipelines/delete`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}},body:JSON.stringify({id:i,urlIdx:t})}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(console.log(a),"detail"in a?e=a.detail:e=a,null));if(e)throw e;return n},z=async(o,i)=>{let t=null;const e=new URLSearchParams;i!==void 0&&e.append("urlIdx",i);const n=await fetch(`${l}/api/pipelines?${e.toString()}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}}}).then(async s=>{if(!s.ok)throw await s.json();return s.json()}).catch(s=>(console.log(s),t=s,null));if(t)throw t;return(n==null?void 0:n.data)??[]},E=async(o,i,t)=>{let e=null;const n=new URLSearchParams;t!==void 0&&n.append("urlIdx",t);const a=await fetch(`${l}/api/pipelines/${i}/valves?${n.toString()}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}}}).then(async s=>{if(!s.ok)throw await s.json();return s.json()}).catch(s=>(console.log(s),e=s,null));if(e)throw e;return a},v=async(o,i,t)=>{let e=null;const n=new URLSearchParams;t!==void 0&&n.append("urlIdx",t);const a=await fetch(`${l}/api/pipelines/${i}/valves/spec?${n.toString()}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}}}).then(async s=>{if(!s.ok)throw await s.json();return s.json()}).catch(s=>(console.log(s),e=s,null));if(e)throw e;return a},N=async(o="",i,t,e)=>{let n=null;const a=new URLSearchParams;e!==void 0&&a.append("urlIdx",e);const s=await fetch(`${l}/api/pipelines/${i}/valves/update?${a.toString()}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...o&&{authorization:`Bearer ${o}`}},body:JSON.stringify(t)}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).catch(r=>(console.log(r),"detail"in r?n=r.detail:n=r,null));if(n)throw n;return s},J=async()=>{let o=null;const i=await fetch(`${l}/api/config`,{method:"GET",credentials:"include",headers:{"Content-Type":"application/json"}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),o=t,null));if(o)throw o;return i},x=async()=>{let o=null;const i=await fetch(`${l}/api/changelog`,{method:"GET",headers:{"Content-Type":"application/json"}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),o=t,null));if(o)throw o;return i},G=async()=>{let o=null;const i=await fetch(`${l}/api/version/updates`,{method:"GET",headers:{"Content-Type":"application/json"}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),o=t,null));if(o)throw o;return i},U=async o=>{let i=null;const t=await fetch(`${l}/api/webhook`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),i=e,null));if(i)throw i;return t.url},I=async(o,i)=>{let t=null;const e=await fetch(`${l}/api/webhook`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({url:i})}).then(async n=>{if(!n.ok)throw await n.json();return n.json()}).catch(n=>(console.log(n),t=n,null));if(t)throw t;return e.url};export{J as a,U as b,P as c,N as d,v as e,E as f,y as g,z as h,b as i,B as j,k,m as l,$ as m,G as n,x as o,A as p,T as q,S as r,C as s,j as t,I as u,g as v,O as w};
//# sourceMappingURL=index.CNN_9z_y.js.map
