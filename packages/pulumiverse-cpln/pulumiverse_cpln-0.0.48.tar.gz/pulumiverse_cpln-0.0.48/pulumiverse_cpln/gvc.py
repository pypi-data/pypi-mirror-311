# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GvcArgs', 'Gvc']

@pulumi.input_type
class GvcArgs:
    def __init__(__self__, *,
                 controlplane_tracing: Optional[pulumi.Input['GvcControlplaneTracingArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lightstep_tracing: Optional[pulumi.Input['GvcLightstepTracingArgs']] = None,
                 load_balancer: Optional[pulumi.Input['GvcLoadBalancerArgs']] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 otel_tracing: Optional[pulumi.Input['GvcOtelTracingArgs']] = None,
                 pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sidecar: Optional[pulumi.Input['GvcSidecarArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Gvc resource.
        :param pulumi.Input[str] description: Description of the GVC.
        :param pulumi.Input[str] domain: Custom domain name used by associated workloads.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: Key-value array of resource env variables.
        :param pulumi.Input['GvcLoadBalancerArgs'] load_balancer: Dedicated load balancer configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        :param pulumi.Input[str] name: Name of the GVC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pull_secrets: A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any
               private image repository referenced by Workloads within the GVC.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags.
        """
        GvcArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            controlplane_tracing=controlplane_tracing,
            description=description,
            domain=domain,
            env=env,
            lightstep_tracing=lightstep_tracing,
            load_balancer=load_balancer,
            locations=locations,
            name=name,
            otel_tracing=otel_tracing,
            pull_secrets=pull_secrets,
            sidecar=sidecar,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             controlplane_tracing: Optional[pulumi.Input['GvcControlplaneTracingArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             domain: Optional[pulumi.Input[str]] = None,
             env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             lightstep_tracing: Optional[pulumi.Input['GvcLightstepTracingArgs']] = None,
             load_balancer: Optional[pulumi.Input['GvcLoadBalancerArgs']] = None,
             locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             otel_tracing: Optional[pulumi.Input['GvcOtelTracingArgs']] = None,
             pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             sidecar: Optional[pulumi.Input['GvcSidecarArgs']] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'controlplaneTracing' in kwargs:
            controlplane_tracing = kwargs['controlplaneTracing']
        if 'lightstepTracing' in kwargs:
            lightstep_tracing = kwargs['lightstepTracing']
        if 'loadBalancer' in kwargs:
            load_balancer = kwargs['loadBalancer']
        if 'otelTracing' in kwargs:
            otel_tracing = kwargs['otelTracing']
        if 'pullSecrets' in kwargs:
            pull_secrets = kwargs['pullSecrets']

        if controlplane_tracing is not None:
            _setter("controlplane_tracing", controlplane_tracing)
        if description is not None:
            _setter("description", description)
        if domain is not None:
            warnings.warn("""Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""", DeprecationWarning)
            pulumi.log.warn("""domain is deprecated: Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""")
        if domain is not None:
            _setter("domain", domain)
        if env is not None:
            _setter("env", env)
        if lightstep_tracing is not None:
            _setter("lightstep_tracing", lightstep_tracing)
        if load_balancer is not None:
            _setter("load_balancer", load_balancer)
        if locations is not None:
            _setter("locations", locations)
        if name is not None:
            _setter("name", name)
        if otel_tracing is not None:
            _setter("otel_tracing", otel_tracing)
        if pull_secrets is not None:
            _setter("pull_secrets", pull_secrets)
        if sidecar is not None:
            _setter("sidecar", sidecar)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="controlplaneTracing")
    def controlplane_tracing(self) -> Optional[pulumi.Input['GvcControlplaneTracingArgs']]:
        return pulumi.get(self, "controlplane_tracing")

    @controlplane_tracing.setter
    def controlplane_tracing(self, value: Optional[pulumi.Input['GvcControlplaneTracingArgs']]):
        pulumi.set(self, "controlplane_tracing", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the GVC.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Custom domain name used by associated workloads.
        """
        warnings.warn("""Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""", DeprecationWarning)
        pulumi.log.warn("""domain is deprecated: Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""")

        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value array of resource env variables.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="lightstepTracing")
    def lightstep_tracing(self) -> Optional[pulumi.Input['GvcLightstepTracingArgs']]:
        return pulumi.get(self, "lightstep_tracing")

    @lightstep_tracing.setter
    def lightstep_tracing(self, value: Optional[pulumi.Input['GvcLightstepTracingArgs']]):
        pulumi.set(self, "lightstep_tracing", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['GvcLoadBalancerArgs']]:
        """
        Dedicated load balancer configuration.
        """
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['GvcLoadBalancerArgs']]):
        pulumi.set(self, "load_balancer", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the GVC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="otelTracing")
    def otel_tracing(self) -> Optional[pulumi.Input['GvcOtelTracingArgs']]:
        return pulumi.get(self, "otel_tracing")

    @otel_tracing.setter
    def otel_tracing(self, value: Optional[pulumi.Input['GvcOtelTracingArgs']]):
        pulumi.set(self, "otel_tracing", value)

    @property
    @pulumi.getter(name="pullSecrets")
    def pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any
        private image repository referenced by Workloads within the GVC.
        """
        return pulumi.get(self, "pull_secrets")

    @pull_secrets.setter
    def pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pull_secrets", value)

    @property
    @pulumi.getter
    def sidecar(self) -> Optional[pulumi.Input['GvcSidecarArgs']]:
        return pulumi.get(self, "sidecar")

    @sidecar.setter
    def sidecar(self, value: Optional[pulumi.Input['GvcSidecarArgs']]):
        pulumi.set(self, "sidecar", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _GvcState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 controlplane_tracing: Optional[pulumi.Input['GvcControlplaneTracingArgs']] = None,
                 cpln_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lightstep_tracing: Optional[pulumi.Input['GvcLightstepTracingArgs']] = None,
                 load_balancer: Optional[pulumi.Input['GvcLoadBalancerArgs']] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 otel_tracing: Optional[pulumi.Input['GvcOtelTracingArgs']] = None,
                 pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_link: Optional[pulumi.Input[str]] = None,
                 sidecar: Optional[pulumi.Input['GvcSidecarArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Gvc resources.
        :param pulumi.Input[str] alias: The alias name of the GVC.
        :param pulumi.Input[str] cpln_id: The ID, in GUID format, of the GVC.
        :param pulumi.Input[str] description: Description of the GVC.
        :param pulumi.Input[str] domain: Custom domain name used by associated workloads.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: Key-value array of resource env variables.
        :param pulumi.Input['GvcLoadBalancerArgs'] load_balancer: Dedicated load balancer configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        :param pulumi.Input[str] name: Name of the GVC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pull_secrets: A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any
               private image repository referenced by Workloads within the GVC.
        :param pulumi.Input[str] self_link: Full link to this resource. Can be referenced by other resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags.
        """
        _GvcState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alias=alias,
            controlplane_tracing=controlplane_tracing,
            cpln_id=cpln_id,
            description=description,
            domain=domain,
            env=env,
            lightstep_tracing=lightstep_tracing,
            load_balancer=load_balancer,
            locations=locations,
            name=name,
            otel_tracing=otel_tracing,
            pull_secrets=pull_secrets,
            self_link=self_link,
            sidecar=sidecar,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alias: Optional[pulumi.Input[str]] = None,
             controlplane_tracing: Optional[pulumi.Input['GvcControlplaneTracingArgs']] = None,
             cpln_id: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             domain: Optional[pulumi.Input[str]] = None,
             env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             lightstep_tracing: Optional[pulumi.Input['GvcLightstepTracingArgs']] = None,
             load_balancer: Optional[pulumi.Input['GvcLoadBalancerArgs']] = None,
             locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             otel_tracing: Optional[pulumi.Input['GvcOtelTracingArgs']] = None,
             pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             self_link: Optional[pulumi.Input[str]] = None,
             sidecar: Optional[pulumi.Input['GvcSidecarArgs']] = None,
             tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'controlplaneTracing' in kwargs:
            controlplane_tracing = kwargs['controlplaneTracing']
        if 'cplnId' in kwargs:
            cpln_id = kwargs['cplnId']
        if 'lightstepTracing' in kwargs:
            lightstep_tracing = kwargs['lightstepTracing']
        if 'loadBalancer' in kwargs:
            load_balancer = kwargs['loadBalancer']
        if 'otelTracing' in kwargs:
            otel_tracing = kwargs['otelTracing']
        if 'pullSecrets' in kwargs:
            pull_secrets = kwargs['pullSecrets']
        if 'selfLink' in kwargs:
            self_link = kwargs['selfLink']

        if alias is not None:
            _setter("alias", alias)
        if controlplane_tracing is not None:
            _setter("controlplane_tracing", controlplane_tracing)
        if cpln_id is not None:
            _setter("cpln_id", cpln_id)
        if description is not None:
            _setter("description", description)
        if domain is not None:
            warnings.warn("""Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""", DeprecationWarning)
            pulumi.log.warn("""domain is deprecated: Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""")
        if domain is not None:
            _setter("domain", domain)
        if env is not None:
            _setter("env", env)
        if lightstep_tracing is not None:
            _setter("lightstep_tracing", lightstep_tracing)
        if load_balancer is not None:
            _setter("load_balancer", load_balancer)
        if locations is not None:
            _setter("locations", locations)
        if name is not None:
            _setter("name", name)
        if otel_tracing is not None:
            _setter("otel_tracing", otel_tracing)
        if pull_secrets is not None:
            _setter("pull_secrets", pull_secrets)
        if self_link is not None:
            _setter("self_link", self_link)
        if sidecar is not None:
            _setter("sidecar", sidecar)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        The alias name of the GVC.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="controlplaneTracing")
    def controlplane_tracing(self) -> Optional[pulumi.Input['GvcControlplaneTracingArgs']]:
        return pulumi.get(self, "controlplane_tracing")

    @controlplane_tracing.setter
    def controlplane_tracing(self, value: Optional[pulumi.Input['GvcControlplaneTracingArgs']]):
        pulumi.set(self, "controlplane_tracing", value)

    @property
    @pulumi.getter(name="cplnId")
    def cpln_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID, in GUID format, of the GVC.
        """
        return pulumi.get(self, "cpln_id")

    @cpln_id.setter
    def cpln_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpln_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the GVC.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Custom domain name used by associated workloads.
        """
        warnings.warn("""Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""", DeprecationWarning)
        pulumi.log.warn("""domain is deprecated: Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""")

        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value array of resource env variables.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="lightstepTracing")
    def lightstep_tracing(self) -> Optional[pulumi.Input['GvcLightstepTracingArgs']]:
        return pulumi.get(self, "lightstep_tracing")

    @lightstep_tracing.setter
    def lightstep_tracing(self, value: Optional[pulumi.Input['GvcLightstepTracingArgs']]):
        pulumi.set(self, "lightstep_tracing", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['GvcLoadBalancerArgs']]:
        """
        Dedicated load balancer configuration.
        """
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['GvcLoadBalancerArgs']]):
        pulumi.set(self, "load_balancer", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the GVC.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="otelTracing")
    def otel_tracing(self) -> Optional[pulumi.Input['GvcOtelTracingArgs']]:
        return pulumi.get(self, "otel_tracing")

    @otel_tracing.setter
    def otel_tracing(self, value: Optional[pulumi.Input['GvcOtelTracingArgs']]):
        pulumi.set(self, "otel_tracing", value)

    @property
    @pulumi.getter(name="pullSecrets")
    def pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any
        private image repository referenced by Workloads within the GVC.
        """
        return pulumi.get(self, "pull_secrets")

    @pull_secrets.setter
    def pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pull_secrets", value)

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> Optional[pulumi.Input[str]]:
        """
        Full link to this resource. Can be referenced by other resources.
        """
        return pulumi.get(self, "self_link")

    @self_link.setter
    def self_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_link", value)

    @property
    @pulumi.getter
    def sidecar(self) -> Optional[pulumi.Input['GvcSidecarArgs']]:
        return pulumi.get(self, "sidecar")

    @sidecar.setter
    def sidecar(self, value: Optional[pulumi.Input['GvcSidecarArgs']]):
        pulumi.set(self, "sidecar", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


class Gvc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controlplane_tracing: Optional[pulumi.Input[pulumi.InputType['GvcControlplaneTracingArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lightstep_tracing: Optional[pulumi.Input[pulumi.InputType['GvcLightstepTracingArgs']]] = None,
                 load_balancer: Optional[pulumi.Input[pulumi.InputType['GvcLoadBalancerArgs']]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 otel_tracing: Optional[pulumi.Input[pulumi.InputType['GvcOtelTracingArgs']]] = None,
                 pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sidecar: Optional[pulumi.Input[pulumi.InputType['GvcSidecarArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a Gvc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the GVC.
        :param pulumi.Input[str] domain: Custom domain name used by associated workloads.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: Key-value array of resource env variables.
        :param pulumi.Input[pulumi.InputType['GvcLoadBalancerArgs']] load_balancer: Dedicated load balancer configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        :param pulumi.Input[str] name: Name of the GVC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pull_secrets: A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any
               private image repository referenced by Workloads within the GVC.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GvcArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Gvc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GvcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GvcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            GvcArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 controlplane_tracing: Optional[pulumi.Input[pulumi.InputType['GvcControlplaneTracingArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 lightstep_tracing: Optional[pulumi.Input[pulumi.InputType['GvcLightstepTracingArgs']]] = None,
                 load_balancer: Optional[pulumi.Input[pulumi.InputType['GvcLoadBalancerArgs']]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 otel_tracing: Optional[pulumi.Input[pulumi.InputType['GvcOtelTracingArgs']]] = None,
                 pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sidecar: Optional[pulumi.Input[pulumi.InputType['GvcSidecarArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GvcArgs.__new__(GvcArgs)

            if controlplane_tracing is not None and not isinstance(controlplane_tracing, GvcControlplaneTracingArgs):
                controlplane_tracing = controlplane_tracing or {}
                def _setter(key, value):
                    controlplane_tracing[key] = value
                GvcControlplaneTracingArgs._configure(_setter, **controlplane_tracing)
            __props__.__dict__["controlplane_tracing"] = controlplane_tracing
            __props__.__dict__["description"] = description
            __props__.__dict__["domain"] = domain
            __props__.__dict__["env"] = env
            if lightstep_tracing is not None and not isinstance(lightstep_tracing, GvcLightstepTracingArgs):
                lightstep_tracing = lightstep_tracing or {}
                def _setter(key, value):
                    lightstep_tracing[key] = value
                GvcLightstepTracingArgs._configure(_setter, **lightstep_tracing)
            __props__.__dict__["lightstep_tracing"] = lightstep_tracing
            if load_balancer is not None and not isinstance(load_balancer, GvcLoadBalancerArgs):
                load_balancer = load_balancer or {}
                def _setter(key, value):
                    load_balancer[key] = value
                GvcLoadBalancerArgs._configure(_setter, **load_balancer)
            __props__.__dict__["load_balancer"] = load_balancer
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            if otel_tracing is not None and not isinstance(otel_tracing, GvcOtelTracingArgs):
                otel_tracing = otel_tracing or {}
                def _setter(key, value):
                    otel_tracing[key] = value
                GvcOtelTracingArgs._configure(_setter, **otel_tracing)
            __props__.__dict__["otel_tracing"] = otel_tracing
            __props__.__dict__["pull_secrets"] = pull_secrets
            if sidecar is not None and not isinstance(sidecar, GvcSidecarArgs):
                sidecar = sidecar or {}
                def _setter(key, value):
                    sidecar[key] = value
                GvcSidecarArgs._configure(_setter, **sidecar)
            __props__.__dict__["sidecar"] = sidecar
            __props__.__dict__["tags"] = tags
            __props__.__dict__["alias"] = None
            __props__.__dict__["cpln_id"] = None
            __props__.__dict__["self_link"] = None
        super(Gvc, __self__).__init__(
            'cpln:index/gvc:Gvc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[str]] = None,
            controlplane_tracing: Optional[pulumi.Input[pulumi.InputType['GvcControlplaneTracingArgs']]] = None,
            cpln_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            lightstep_tracing: Optional[pulumi.Input[pulumi.InputType['GvcLightstepTracingArgs']]] = None,
            load_balancer: Optional[pulumi.Input[pulumi.InputType['GvcLoadBalancerArgs']]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            otel_tracing: Optional[pulumi.Input[pulumi.InputType['GvcOtelTracingArgs']]] = None,
            pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            self_link: Optional[pulumi.Input[str]] = None,
            sidecar: Optional[pulumi.Input[pulumi.InputType['GvcSidecarArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'Gvc':
        """
        Get an existing Gvc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias: The alias name of the GVC.
        :param pulumi.Input[str] cpln_id: The ID, in GUID format, of the GVC.
        :param pulumi.Input[str] description: Description of the GVC.
        :param pulumi.Input[str] domain: Custom domain name used by associated workloads.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: Key-value array of resource env variables.
        :param pulumi.Input[pulumi.InputType['GvcLoadBalancerArgs']] load_balancer: Dedicated load balancer configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        :param pulumi.Input[str] name: Name of the GVC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pull_secrets: A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any
               private image repository referenced by Workloads within the GVC.
        :param pulumi.Input[str] self_link: Full link to this resource. Can be referenced by other resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Key-value map of resource tags.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GvcState.__new__(_GvcState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["controlplane_tracing"] = controlplane_tracing
        __props__.__dict__["cpln_id"] = cpln_id
        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["env"] = env
        __props__.__dict__["lightstep_tracing"] = lightstep_tracing
        __props__.__dict__["load_balancer"] = load_balancer
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["otel_tracing"] = otel_tracing
        __props__.__dict__["pull_secrets"] = pull_secrets
        __props__.__dict__["self_link"] = self_link
        __props__.__dict__["sidecar"] = sidecar
        __props__.__dict__["tags"] = tags
        return Gvc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[str]:
        """
        The alias name of the GVC.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="controlplaneTracing")
    def controlplane_tracing(self) -> pulumi.Output[Optional['outputs.GvcControlplaneTracing']]:
        return pulumi.get(self, "controlplane_tracing")

    @property
    @pulumi.getter(name="cplnId")
    def cpln_id(self) -> pulumi.Output[str]:
        """
        The ID, in GUID format, of the GVC.
        """
        return pulumi.get(self, "cpln_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the GVC.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        Custom domain name used by associated workloads.
        """
        warnings.warn("""Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""", DeprecationWarning)
        pulumi.log.warn("""domain is deprecated: Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead.""")

        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def env(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key-value array of resource env variables.
        """
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="lightstepTracing")
    def lightstep_tracing(self) -> pulumi.Output[Optional['outputs.GvcLightstepTracing']]:
        return pulumi.get(self, "lightstep_tracing")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> pulumi.Output[Optional['outputs.GvcLoadBalancer']]:
        """
        Dedicated load balancer configuration.
        """
        return pulumi.get(self, "load_balancer")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the GVC.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="otelTracing")
    def otel_tracing(self) -> pulumi.Output[Optional['outputs.GvcOtelTracing']]:
        return pulumi.get(self, "otel_tracing")

    @property
    @pulumi.getter(name="pullSecrets")
    def pull_secrets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any
        private image repository referenced by Workloads within the GVC.
        """
        return pulumi.get(self, "pull_secrets")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> pulumi.Output[str]:
        """
        Full link to this resource. Can be referenced by other resources.
        """
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter
    def sidecar(self) -> pulumi.Output[Optional['outputs.GvcSidecar']]:
        return pulumi.get(self, "sidecar")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Key-value map of resource tags.
        """
        return pulumi.get(self, "tags")

