# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'CloudAccountAwsArgs',
    'CloudAccountAzureArgs',
    'CloudAccountGcpArgs',
    'CloudAccountNgsArgs',
    'DomainRouteHeadersArgs',
    'DomainRouteHeadersRequestArgs',
    'DomainSpecArgs',
    'DomainSpecPortArgs',
    'DomainSpecPortCorsArgs',
    'DomainSpecPortCorsAllowOriginArgs',
    'DomainSpecPortTlsArgs',
    'DomainSpecPortTlsClientCertificateArgs',
    'DomainSpecPortTlsServerCertificateArgs',
    'DomainStatusArgs',
    'DomainStatusDnsConfigArgs',
    'DomainStatusEndpointArgs',
    'DomainStatusLocationArgs',
    'GroupIdentityMatcherArgs',
    'GroupMemberQueryArgs',
    'GroupMemberQuerySpecArgs',
    'GroupMemberQuerySpecTermArgs',
    'GvcControlplaneTracingArgs',
    'GvcLightstepTracingArgs',
    'GvcLoadBalancerArgs',
    'GvcLoadBalancerRedirectArgs',
    'GvcLoadBalancerRedirectClassArgs',
    'GvcOtelTracingArgs',
    'GvcSidecarArgs',
    'IdentityAwsAccessPolicyArgs',
    'IdentityAzureAccessPolicyArgs',
    'IdentityAzureAccessPolicyRoleAssignmentArgs',
    'IdentityGcpAccessPolicyArgs',
    'IdentityGcpAccessPolicyBindingArgs',
    'IdentityNativeNetworkResourceArgs',
    'IdentityNativeNetworkResourceAwsPrivateLinkArgs',
    'IdentityNativeNetworkResourceGcpServiceConnectArgs',
    'IdentityNetworkResourceArgs',
    'IdentityNgsAccessPolicyArgs',
    'IdentityNgsAccessPolicyPubArgs',
    'IdentityNgsAccessPolicyRespArgs',
    'IdentityNgsAccessPolicySubArgs',
    'IpSetLocationArgs',
    'IpSetStatusArgs',
    'IpSetStatusIpAddressArgs',
    'LocationGeoArgs',
    'Mk8sAddOnsArgs',
    'Mk8sAddOnsAwsEcrArgs',
    'Mk8sAddOnsAwsEfsArgs',
    'Mk8sAddOnsAwsElbArgs',
    'Mk8sAddOnsAzureAcrArgs',
    'Mk8sAddOnsAzureWorkloadIdentityArgs',
    'Mk8sAddOnsLogsArgs',
    'Mk8sAddOnsMetricsArgs',
    'Mk8sAddOnsMetricsScrapeAnnotatedArgs',
    'Mk8sAddOnsNvidiaArgs',
    'Mk8sAwsProviderArgs',
    'Mk8sAwsProviderAutoscalerArgs',
    'Mk8sAwsProviderDeployRoleChainArgs',
    'Mk8sAwsProviderImageArgs',
    'Mk8sAwsProviderNetworkingArgs',
    'Mk8sAwsProviderNodePoolArgs',
    'Mk8sAwsProviderNodePoolOverrideImageArgs',
    'Mk8sAwsProviderNodePoolTaintArgs',
    'Mk8sDigitalOceanProviderArgs',
    'Mk8sDigitalOceanProviderAutoscalerArgs',
    'Mk8sDigitalOceanProviderNetworkingArgs',
    'Mk8sDigitalOceanProviderNodePoolArgs',
    'Mk8sDigitalOceanProviderNodePoolTaintArgs',
    'Mk8sEphemeralProviderArgs',
    'Mk8sEphemeralProviderNodePoolArgs',
    'Mk8sEphemeralProviderNodePoolTaintArgs',
    'Mk8sFirewallArgs',
    'Mk8sGenericProviderArgs',
    'Mk8sGenericProviderNetworkingArgs',
    'Mk8sGenericProviderNodePoolArgs',
    'Mk8sGenericProviderNodePoolTaintArgs',
    'Mk8sHetznerProviderArgs',
    'Mk8sHetznerProviderAutoscalerArgs',
    'Mk8sHetznerProviderDedicatedServerNodePoolArgs',
    'Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs',
    'Mk8sHetznerProviderNetworkingArgs',
    'Mk8sHetznerProviderNodePoolArgs',
    'Mk8sHetznerProviderNodePoolTaintArgs',
    'Mk8sLambdalabsProviderArgs',
    'Mk8sLambdalabsProviderAutoscalerArgs',
    'Mk8sLambdalabsProviderNodePoolArgs',
    'Mk8sLambdalabsProviderNodePoolTaintArgs',
    'Mk8sLambdalabsProviderUnmanagedNodePoolArgs',
    'Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs',
    'Mk8sLinodeProviderArgs',
    'Mk8sLinodeProviderAutoscalerArgs',
    'Mk8sLinodeProviderNetworkingArgs',
    'Mk8sLinodeProviderNodePoolArgs',
    'Mk8sLinodeProviderNodePoolTaintArgs',
    'Mk8sOblivusProviderArgs',
    'Mk8sOblivusProviderAutoscalerArgs',
    'Mk8sOblivusProviderNodePoolArgs',
    'Mk8sOblivusProviderNodePoolTaintArgs',
    'Mk8sOblivusProviderUnmanagedNodePoolArgs',
    'Mk8sOblivusProviderUnmanagedNodePoolTaintArgs',
    'Mk8sPaperspaceProviderArgs',
    'Mk8sPaperspaceProviderAutoscalerArgs',
    'Mk8sPaperspaceProviderNodePoolArgs',
    'Mk8sPaperspaceProviderNodePoolTaintArgs',
    'Mk8sPaperspaceProviderUnmanagedNodePoolArgs',
    'Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs',
    'Mk8sStatusArgs',
    'Mk8sStatusAddOnArgs',
    'Mk8sStatusAddOnAwsEcrArgs',
    'Mk8sStatusAddOnAwsEfArgs',
    'Mk8sStatusAddOnAwsElbArgs',
    'Mk8sStatusAddOnAwsWorkloadIdentityArgs',
    'Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs',
    'Mk8sStatusAddOnDashboardArgs',
    'Mk8sStatusAddOnLogArgs',
    'Mk8sStatusAddOnMetricArgs',
    'Mk8sTritonProviderArgs',
    'Mk8sTritonProviderAutoscalerArgs',
    'Mk8sTritonProviderConnectionArgs',
    'Mk8sTritonProviderNetworkingArgs',
    'Mk8sTritonProviderNodePoolArgs',
    'Mk8sTritonProviderNodePoolTaintArgs',
    'OrgAuthConfigArgs',
    'OrgLoggingCloudWatchLoggingArgs',
    'OrgLoggingCoralogixLoggingArgs',
    'OrgLoggingDatadogLoggingArgs',
    'OrgLoggingElasticLoggingArgs',
    'OrgLoggingElasticLoggingAwsArgs',
    'OrgLoggingElasticLoggingElasticCloudArgs',
    'OrgLoggingElasticLoggingGenericArgs',
    'OrgLoggingFluentdLoggingArgs',
    'OrgLoggingLogzioLoggingArgs',
    'OrgLoggingS3LoggingArgs',
    'OrgLoggingStackdriverLoggingArgs',
    'OrgLoggingSyslogLoggingArgs',
    'OrgObservabilityArgs',
    'OrgSecurityArgs',
    'OrgSecurityThreatDetectionArgs',
    'OrgSecurityThreatDetectionSyslogArgs',
    'OrgStatusArgs',
    'OrgTracingControlplaneTracingArgs',
    'OrgTracingLightstepTracingArgs',
    'OrgTracingOtelTracingArgs',
    'PolicyBindingArgs',
    'PolicyTargetQueryArgs',
    'PolicyTargetQuerySpecArgs',
    'PolicyTargetQuerySpecTermArgs',
    'SecretAwsArgs',
    'SecretAzureConnectorArgs',
    'SecretEcrArgs',
    'SecretKeypairArgs',
    'SecretNatsAccountArgs',
    'SecretOpaqueArgs',
    'SecretTlsArgs',
    'SecretUserpassArgs',
    'VolumeSetAutoscalingArgs',
    'VolumeSetSnapshotsArgs',
    'VolumeSetStatusArgs',
    'WorkloadContainerArgs',
    'WorkloadContainerGpuNvidiaArgs',
    'WorkloadContainerLifecycleArgs',
    'WorkloadContainerLifecyclePostStartArgs',
    'WorkloadContainerLifecyclePostStartExecArgs',
    'WorkloadContainerLifecyclePreStopArgs',
    'WorkloadContainerLifecyclePreStopExecArgs',
    'WorkloadContainerLivenessProbeArgs',
    'WorkloadContainerLivenessProbeExecArgs',
    'WorkloadContainerLivenessProbeGrpcArgs',
    'WorkloadContainerLivenessProbeHttpGetArgs',
    'WorkloadContainerLivenessProbeTcpSocketArgs',
    'WorkloadContainerMetricsArgs',
    'WorkloadContainerPortArgs',
    'WorkloadContainerReadinessProbeArgs',
    'WorkloadContainerReadinessProbeExecArgs',
    'WorkloadContainerReadinessProbeGrpcArgs',
    'WorkloadContainerReadinessProbeHttpGetArgs',
    'WorkloadContainerReadinessProbeTcpSocketArgs',
    'WorkloadContainerVolumeArgs',
    'WorkloadFirewallSpecArgs',
    'WorkloadFirewallSpecExternalArgs',
    'WorkloadFirewallSpecExternalOutboundAllowPortArgs',
    'WorkloadFirewallSpecInternalArgs',
    'WorkloadJobArgs',
    'WorkloadLoadBalancerArgs',
    'WorkloadLoadBalancerDirectArgs',
    'WorkloadLoadBalancerDirectPortArgs',
    'WorkloadLoadBalancerGeoLocationArgs',
    'WorkloadLoadBalancerGeoLocationHeadersArgs',
    'WorkloadLocalOptionArgs',
    'WorkloadLocalOptionAutoscalingArgs',
    'WorkloadLocalOptionAutoscalingMultiArgs',
    'WorkloadOptionsArgs',
    'WorkloadOptionsAutoscalingArgs',
    'WorkloadOptionsAutoscalingMultiArgs',
    'WorkloadRolloutOptionsArgs',
    'WorkloadSecurityOptionsArgs',
    'WorkloadSidecarArgs',
    'WorkloadStatusArgs',
    'WorkloadStatusHealthCheckArgs',
    'WorkloadStatusLoadBalancerArgs',
    'WorkloadStatusResolvedImageArgs',
    'WorkloadStatusResolvedImageImageArgs',
    'WorkloadStatusResolvedImageImageManifestArgs',
    'GetGvcControlplaneTracingArgs',
    'GetGvcLightstepTracingArgs',
    'GetGvcLoadBalancerArgs',
    'GetGvcLoadBalancerRedirectArgs',
    'GetGvcLoadBalancerRedirectClassArgs',
    'GetGvcOtelTracingArgs',
    'GetGvcSidecarArgs',
    'GetImagesQueryArgs',
    'GetImagesQuerySpecArgs',
    'GetImagesQuerySpecTermArgs',
    'GetSecretAwsArgs',
    'GetSecretAzureConnectorArgs',
    'GetSecretEcrArgs',
    'GetSecretKeypairArgs',
    'GetSecretNatsAccountArgs',
    'GetSecretOpaqueArgs',
    'GetSecretTlsArgs',
    'GetSecretUserpassArgs',
]

@pulumi.input_type
class CloudAccountAwsArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str]):
        CloudAccountAwsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class CloudAccountAzureArgs:
    def __init__(__self__, *,
                 secret_link: pulumi.Input[str]):
        CloudAccountAzureArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_link=secret_link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_link: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secretLink' in kwargs:
            secret_link = kwargs['secretLink']

        _setter("secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_link", value)


@pulumi.input_type
class CloudAccountGcpArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str]):
        CloudAccountGcpArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            project_id=project_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             project_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']

        _setter("project_id", project_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class CloudAccountNgsArgs:
    def __init__(__self__, *,
                 secret_link: pulumi.Input[str]):
        CloudAccountNgsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_link=secret_link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_link: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secretLink' in kwargs:
            secret_link = kwargs['secretLink']

        _setter("secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_link", value)


@pulumi.input_type
class DomainRouteHeadersArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 request: Optional[pulumi.Input['DomainRouteHeadersRequestArgs']] = None):
        DomainRouteHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            request=request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             request: Optional[pulumi.Input['DomainRouteHeadersRequestArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if request is not None:
            _setter("request", request)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DomainRouteHeadersRequestArgs']]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DomainRouteHeadersRequestArgs']]):
        pulumi.set(self, "request", value)


@pulumi.input_type
class DomainRouteHeadersRequestArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 set: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        DomainRouteHeadersRequestArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            set=set,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             set: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if set is not None:
            _setter("set", set)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def set(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "set", value)


@pulumi.input_type
class DomainSpecArgs:
    def __init__(__self__, *,
                 ports: pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]],
                 accept_all_hosts: Optional[pulumi.Input[bool]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 gvc_link: Optional[pulumi.Input[str]] = None):
        DomainSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ports=ports,
            accept_all_hosts=accept_all_hosts,
            dns_mode=dns_mode,
            gvc_link=gvc_link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ports: pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]],
             accept_all_hosts: Optional[pulumi.Input[bool]] = None,
             dns_mode: Optional[pulumi.Input[str]] = None,
             gvc_link: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'acceptAllHosts' in kwargs:
            accept_all_hosts = kwargs['acceptAllHosts']
        if 'dnsMode' in kwargs:
            dns_mode = kwargs['dnsMode']
        if 'gvcLink' in kwargs:
            gvc_link = kwargs['gvcLink']

        _setter("ports", ports)
        if accept_all_hosts is not None:
            _setter("accept_all_hosts", accept_all_hosts)
        if dns_mode is not None:
            _setter("dns_mode", dns_mode)
        if gvc_link is not None:
            _setter("gvc_link", gvc_link)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input['DomainSpecPortArgs']]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="acceptAllHosts")
    def accept_all_hosts(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accept_all_hosts")

    @accept_all_hosts.setter
    def accept_all_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_all_hosts", value)

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_mode")

    @dns_mode.setter
    def dns_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_mode", value)

    @property
    @pulumi.getter(name="gvcLink")
    def gvc_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gvc_link")

    @gvc_link.setter
    def gvc_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gvc_link", value)


@pulumi.input_type
class DomainSpecPortArgs:
    def __init__(__self__, *,
                 tls: pulumi.Input['DomainSpecPortTlsArgs'],
                 cors: Optional[pulumi.Input['DomainSpecPortCorsArgs']] = None,
                 number: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        DomainSpecPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tls=tls,
            cors=cors,
            number=number,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tls: pulumi.Input['DomainSpecPortTlsArgs'],
             cors: Optional[pulumi.Input['DomainSpecPortCorsArgs']] = None,
             number: Optional[pulumi.Input[int]] = None,
             protocol: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("tls", tls)
        if cors is not None:
            _setter("cors", cors)
        if number is not None:
            _setter("number", number)
        if protocol is not None:
            _setter("protocol", protocol)

    @property
    @pulumi.getter
    def tls(self) -> pulumi.Input['DomainSpecPortTlsArgs']:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: pulumi.Input['DomainSpecPortTlsArgs']):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['DomainSpecPortCorsArgs']]:
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['DomainSpecPortCorsArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class DomainSpecPortCorsArgs:
    def __init__(__self__, *,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allow_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_origins: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]]] = None,
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[str]] = None):
        DomainSpecPortCorsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_credentials=allow_credentials,
            allow_headers=allow_headers,
            allow_methods=allow_methods,
            allow_origins=allow_origins,
            expose_headers=expose_headers,
            max_age=max_age,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_credentials: Optional[pulumi.Input[bool]] = None,
             allow_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             allow_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             allow_origins: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]]] = None,
             expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             max_age: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowCredentials' in kwargs:
            allow_credentials = kwargs['allowCredentials']
        if 'allowHeaders' in kwargs:
            allow_headers = kwargs['allowHeaders']
        if 'allowMethods' in kwargs:
            allow_methods = kwargs['allowMethods']
        if 'allowOrigins' in kwargs:
            allow_origins = kwargs['allowOrigins']
        if 'exposeHeaders' in kwargs:
            expose_headers = kwargs['exposeHeaders']
        if 'maxAge' in kwargs:
            max_age = kwargs['maxAge']

        if allow_credentials is not None:
            _setter("allow_credentials", allow_credentials)
        if allow_headers is not None:
            _setter("allow_headers", allow_headers)
        if allow_methods is not None:
            _setter("allow_methods", allow_methods)
        if allow_origins is not None:
            _setter("allow_origins", allow_origins)
        if expose_headers is not None:
            _setter("expose_headers", expose_headers)
        if max_age is not None:
            _setter("max_age", max_age)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_credentials")

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_credentials", value)

    @property
    @pulumi.getter(name="allowHeaders")
    def allow_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow_headers")

    @allow_headers.setter
    def allow_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_headers", value)

    @property
    @pulumi.getter(name="allowMethods")
    def allow_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow_methods")

    @allow_methods.setter
    def allow_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_methods", value)

    @property
    @pulumi.getter(name="allowOrigins")
    def allow_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]]]:
        return pulumi.get(self, "allow_origins")

    @allow_origins.setter
    def allow_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainSpecPortCorsAllowOriginArgs']]]]):
        pulumi.set(self, "allow_origins", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_age", value)


@pulumi.input_type
class DomainSpecPortCorsAllowOriginArgs:
    def __init__(__self__, *,
                 exact: pulumi.Input[str]):
        DomainSpecPortCorsAllowOriginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("exact", exact)

    @property
    @pulumi.getter
    def exact(self) -> pulumi.Input[str]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: pulumi.Input[str]):
        pulumi.set(self, "exact", value)


@pulumi.input_type
class DomainSpecPortTlsArgs:
    def __init__(__self__, *,
                 cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input['DomainSpecPortTlsClientCertificateArgs']] = None,
                 min_protocol_version: Optional[pulumi.Input[str]] = None,
                 server_certificate: Optional[pulumi.Input['DomainSpecPortTlsServerCertificateArgs']] = None):
        DomainSpecPortTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cipher_suites=cipher_suites,
            client_certificate=client_certificate,
            min_protocol_version=min_protocol_version,
            server_certificate=server_certificate,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             client_certificate: Optional[pulumi.Input['DomainSpecPortTlsClientCertificateArgs']] = None,
             min_protocol_version: Optional[pulumi.Input[str]] = None,
             server_certificate: Optional[pulumi.Input['DomainSpecPortTlsServerCertificateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cipherSuites' in kwargs:
            cipher_suites = kwargs['cipherSuites']
        if 'clientCertificate' in kwargs:
            client_certificate = kwargs['clientCertificate']
        if 'minProtocolVersion' in kwargs:
            min_protocol_version = kwargs['minProtocolVersion']
        if 'serverCertificate' in kwargs:
            server_certificate = kwargs['serverCertificate']

        if cipher_suites is not None:
            _setter("cipher_suites", cipher_suites)
        if client_certificate is not None:
            _setter("client_certificate", client_certificate)
        if min_protocol_version is not None:
            _setter("min_protocol_version", min_protocol_version)
        if server_certificate is not None:
            _setter("server_certificate", server_certificate)

    @property
    @pulumi.getter(name="cipherSuites")
    def cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cipher_suites")

    @cipher_suites.setter
    def cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cipher_suites", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input['DomainSpecPortTlsClientCertificateArgs']]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input['DomainSpecPortTlsClientCertificateArgs']]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="minProtocolVersion")
    def min_protocol_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_protocol_version")

    @min_protocol_version.setter
    def min_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_protocol_version", value)

    @property
    @pulumi.getter(name="serverCertificate")
    def server_certificate(self) -> Optional[pulumi.Input['DomainSpecPortTlsServerCertificateArgs']]:
        return pulumi.get(self, "server_certificate")

    @server_certificate.setter
    def server_certificate(self, value: Optional[pulumi.Input['DomainSpecPortTlsServerCertificateArgs']]):
        pulumi.set(self, "server_certificate", value)


@pulumi.input_type
class DomainSpecPortTlsClientCertificateArgs:
    def __init__(__self__, *,
                 secret_link: Optional[pulumi.Input[str]] = None):
        DomainSpecPortTlsClientCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_link=secret_link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_link: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secretLink' in kwargs:
            secret_link = kwargs['secretLink']

        if secret_link is not None:
            _setter("secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_link", value)


@pulumi.input_type
class DomainSpecPortTlsServerCertificateArgs:
    def __init__(__self__, *,
                 secret_link: Optional[pulumi.Input[str]] = None):
        DomainSpecPortTlsServerCertificateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_link=secret_link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_link: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secretLink' in kwargs:
            secret_link = kwargs['secretLink']

        if secret_link is not None:
            _setter("secret_link", secret_link)

    @property
    @pulumi.getter(name="secretLink")
    def secret_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_link")

    @secret_link.setter
    def secret_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_link", value)


@pulumi.input_type
class DomainStatusArgs:
    def __init__(__self__, *,
                 dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 warning: Optional[pulumi.Input[str]] = None):
        DomainStatusArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_configs=dns_configs,
            endpoints=endpoints,
            fingerprint=fingerprint,
            locations=locations,
            status=status,
            warning=warning,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]]] = None,
             endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]]] = None,
             fingerprint: Optional[pulumi.Input[str]] = None,
             locations: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]]] = None,
             status: Optional[pulumi.Input[str]] = None,
             warning: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dnsConfigs' in kwargs:
            dns_configs = kwargs['dnsConfigs']

        if dns_configs is not None:
            _setter("dns_configs", dns_configs)
        if endpoints is not None:
            _setter("endpoints", endpoints)
        if fingerprint is not None:
            _setter("fingerprint", fingerprint)
        if locations is not None:
            _setter("locations", locations)
        if status is not None:
            _setter("status", status)
        if warning is not None:
            _setter("warning", warning)

    @property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]]]:
        return pulumi.get(self, "dns_configs")

    @dns_configs.setter
    def dns_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusDnsConfigArgs']]]]):
        pulumi.set(self, "dns_configs", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]]]:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusEndpointArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DomainStatusLocationArgs']]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning", value)


@pulumi.input_type
class DomainStatusDnsConfigArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        DomainStatusDnsConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            ttl=ttl,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: Optional[pulumi.Input[str]] = None,
             ttl: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if host is not None:
            _setter("host", host)
        if ttl is not None:
            _setter("ttl", ttl)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DomainStatusEndpointArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None,
                 workload_link: Optional[pulumi.Input[str]] = None):
        DomainStatusEndpointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            workload_link=workload_link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: Optional[pulumi.Input[str]] = None,
             workload_link: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'workloadLink' in kwargs:
            workload_link = kwargs['workloadLink']

        if url is not None:
            _setter("url", url)
        if workload_link is not None:
            _setter("workload_link", workload_link)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="workloadLink")
    def workload_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workload_link")

    @workload_link.setter
    def workload_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_link", value)


@pulumi.input_type
class DomainStatusLocationArgs:
    def __init__(__self__, *,
                 certificate_status: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        DomainStatusLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_status=certificate_status,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_status: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'certificateStatus' in kwargs:
            certificate_status = kwargs['certificateStatus']

        if certificate_status is not None:
            _setter("certificate_status", certificate_status)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="certificateStatus")
    def certificate_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_status")

    @certificate_status.setter
    def certificate_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_status", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GroupIdentityMatcherArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 language: Optional[pulumi.Input[str]] = None):
        GroupIdentityMatcherArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            language=language,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             language: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("expression", expression)
        if language is not None:
            _setter("language", language)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)


@pulumi.input_type
class GroupMemberQueryArgs:
    def __init__(__self__, *,
                 fetch: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input['GroupMemberQuerySpecArgs']] = None):
        GroupMemberQueryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch=fetch,
            spec=spec,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch: Optional[pulumi.Input[str]] = None,
             spec: Optional[pulumi.Input['GroupMemberQuerySpecArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if fetch is not None:
            _setter("fetch", fetch)
        if spec is not None:
            _setter("spec", spec)

    @property
    @pulumi.getter
    def fetch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fetch")

    @fetch.setter
    def fetch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fetch", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['GroupMemberQuerySpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['GroupMemberQuerySpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class GroupMemberQuerySpecArgs:
    def __init__(__self__, *,
                 match: Optional[pulumi.Input[str]] = None,
                 terms: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]]] = None):
        GroupMemberQuerySpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match=match,
            terms=terms,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match: Optional[pulumi.Input[str]] = None,
             terms: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if match is not None:
            _setter("match", match)
        if terms is not None:
            _setter("terms", terms)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]]]:
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberQuerySpecTermArgs']]]]):
        pulumi.set(self, "terms", value)


@pulumi.input_type
class GroupMemberQuerySpecTermArgs:
    def __init__(__self__, *,
                 op: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None,
                 rel: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        GroupMemberQuerySpecTermArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            op=op,
            property=property,
            rel=rel,
            tag=tag,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             op: Optional[pulumi.Input[str]] = None,
             property: Optional[pulumi.Input[str]] = None,
             rel: Optional[pulumi.Input[str]] = None,
             tag: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if op is not None:
            _setter("op", op)
        if property is not None:
            _setter("property", property)
        if rel is not None:
            _setter("rel", rel)
        if tag is not None:
            _setter("tag", tag)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def rel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class GvcControlplaneTracingArgs:
    def __init__(__self__, *,
                 sampling: pulumi.Input[float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        GvcControlplaneTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sampling=sampling,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sampling: pulumi.Input[float],
             custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("sampling", sampling)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class GvcLightstepTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 sampling: pulumi.Input[float],
                 credentials: Optional[pulumi.Input[str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        GvcLightstepTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            sampling=sampling,
            credentials=credentials,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: pulumi.Input[str],
             sampling: pulumi.Input[float],
             credentials: Optional[pulumi.Input[str]] = None,
             custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("endpoint", endpoint)
        _setter("sampling", sampling)
        if credentials is not None:
            _setter("credentials", credentials)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class GvcLoadBalancerArgs:
    def __init__(__self__, *,
                 dedicated: Optional[pulumi.Input[bool]] = None,
                 redirect: Optional[pulumi.Input['GvcLoadBalancerRedirectArgs']] = None,
                 trusted_proxies: Optional[pulumi.Input[int]] = None):
        GvcLoadBalancerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dedicated=dedicated,
            redirect=redirect,
            trusted_proxies=trusted_proxies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dedicated: Optional[pulumi.Input[bool]] = None,
             redirect: Optional[pulumi.Input['GvcLoadBalancerRedirectArgs']] = None,
             trusted_proxies: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'trustedProxies' in kwargs:
            trusted_proxies = kwargs['trustedProxies']

        if dedicated is not None:
            _setter("dedicated", dedicated)
        if redirect is not None:
            _setter("redirect", redirect)
        if trusted_proxies is not None:
            _setter("trusted_proxies", trusted_proxies)

    @property
    @pulumi.getter
    def dedicated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dedicated", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional[pulumi.Input['GvcLoadBalancerRedirectArgs']]:
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional[pulumi.Input['GvcLoadBalancerRedirectArgs']]):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="trustedProxies")
    def trusted_proxies(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "trusted_proxies")

    @trusted_proxies.setter
    def trusted_proxies(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trusted_proxies", value)


@pulumi.input_type
class GvcLoadBalancerRedirectArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 class_: Optional[pulumi.Input['GvcLoadBalancerRedirectClassArgs']] = None):
        GvcLoadBalancerRedirectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            class_=class_,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             class_: Optional[pulumi.Input['GvcLoadBalancerRedirectClassArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'class' in kwargs:
            class_ = kwargs['class']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if class_ is not None:
            _setter("class_", class_)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input['GvcLoadBalancerRedirectClassArgs']]:
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input['GvcLoadBalancerRedirectClassArgs']]):
        pulumi.set(self, "class_", value)


@pulumi.input_type
class GvcLoadBalancerRedirectClassArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 status5xx: Optional[pulumi.Input[str]] = None):
        GvcLoadBalancerRedirectClassArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            status5xx=status5xx,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             status5xx: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if status5xx is not None:
            _setter("status5xx", status5xx)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def status5xx(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status5xx")

    @status5xx.setter
    def status5xx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status5xx", value)


@pulumi.input_type
class GvcOtelTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 sampling: pulumi.Input[float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        GvcOtelTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            sampling=sampling,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: pulumi.Input[str],
             sampling: pulumi.Input[float],
             custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("endpoint", endpoint)
        _setter("sampling", sampling)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class GvcSidecarArgs:
    def __init__(__self__, *,
                 envoy: pulumi.Input[str]):
        GvcSidecarArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            envoy=envoy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             envoy: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("envoy", envoy)

    @property
    @pulumi.getter
    def envoy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "envoy")

    @envoy.setter
    def envoy(self, value: pulumi.Input[str]):
        pulumi.set(self, "envoy", value)


@pulumi.input_type
class IdentityAwsAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[str],
                 policy_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        IdentityAwsAccessPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_account_link=cloud_account_link,
            policy_refs=policy_refs,
            role_name=role_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_account_link: pulumi.Input[str],
             policy_refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             role_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudAccountLink' in kwargs:
            cloud_account_link = kwargs['cloudAccountLink']
        if 'policyRefs' in kwargs:
            policy_refs = kwargs['policyRefs']
        if 'roleName' in kwargs:
            role_name = kwargs['roleName']

        _setter("cloud_account_link", cloud_account_link)
        if policy_refs is not None:
            _setter("policy_refs", policy_refs)
        if role_name is not None:
            _setter("role_name", role_name)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter(name="policyRefs")
    def policy_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_refs")

    @policy_refs.setter
    def policy_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_refs", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


@pulumi.input_type
class IdentityAzureAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[str],
                 role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]]] = None):
        IdentityAzureAccessPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_account_link=cloud_account_link,
            role_assignments=role_assignments,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_account_link: pulumi.Input[str],
             role_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudAccountLink' in kwargs:
            cloud_account_link = kwargs['cloudAccountLink']
        if 'roleAssignments' in kwargs:
            role_assignments = kwargs['roleAssignments']

        _setter("cloud_account_link", cloud_account_link)
        if role_assignments is not None:
            _setter("role_assignments", role_assignments)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter(name="roleAssignments")
    def role_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]]]:
        return pulumi.get(self, "role_assignments")

    @role_assignments.setter
    def role_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityAzureAccessPolicyRoleAssignmentArgs']]]]):
        pulumi.set(self, "role_assignments", value)


@pulumi.input_type
class IdentityAzureAccessPolicyRoleAssignmentArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        IdentityAzureAccessPolicyRoleAssignmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            roles=roles,
            scope=scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             scope: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if roles is not None:
            _setter("roles", roles)
        if scope is not None:
            _setter("scope", scope)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class IdentityGcpAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[str],
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]]] = None,
                 scopes: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None):
        IdentityGcpAccessPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_account_link=cloud_account_link,
            bindings=bindings,
            scopes=scopes,
            service_account=service_account,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_account_link: pulumi.Input[str],
             bindings: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]]] = None,
             scopes: Optional[pulumi.Input[str]] = None,
             service_account: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudAccountLink' in kwargs:
            cloud_account_link = kwargs['cloudAccountLink']
        if 'serviceAccount' in kwargs:
            service_account = kwargs['serviceAccount']

        _setter("cloud_account_link", cloud_account_link)
        if bindings is not None:
            _setter("bindings", bindings)
        if scopes is not None:
            _setter("scopes", scopes)
        if service_account is not None:
            _setter("service_account", service_account)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]]]:
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdentityGcpAccessPolicyBindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)


@pulumi.input_type
class IdentityGcpAccessPolicyBindingArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        IdentityGcpAccessPolicyBindingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            resource=resource,
            roles=roles,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             resource: Optional[pulumi.Input[str]] = None,
             roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if resource is not None:
            _setter("resource", resource)
        if roles is not None:
            _setter("roles", roles)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class IdentityNativeNetworkResourceArgs:
    def __init__(__self__, *,
                 fqdn: pulumi.Input[str],
                 name: pulumi.Input[str],
                 ports: pulumi.Input[Sequence[pulumi.Input[int]]],
                 aws_private_link: Optional[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs']] = None,
                 gcp_service_connect: Optional[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs']] = None):
        IdentityNativeNetworkResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fqdn=fqdn,
            name=name,
            ports=ports,
            aws_private_link=aws_private_link,
            gcp_service_connect=gcp_service_connect,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fqdn: pulumi.Input[str],
             name: pulumi.Input[str],
             ports: pulumi.Input[Sequence[pulumi.Input[int]]],
             aws_private_link: Optional[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs']] = None,
             gcp_service_connect: Optional[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsPrivateLink' in kwargs:
            aws_private_link = kwargs['awsPrivateLink']
        if 'gcpServiceConnect' in kwargs:
            gcp_service_connect = kwargs['gcpServiceConnect']

        _setter("fqdn", fqdn)
        _setter("name", name)
        _setter("ports", ports)
        if aws_private_link is not None:
            _setter("aws_private_link", aws_private_link)
        if gcp_service_connect is not None:
            _setter("gcp_service_connect", gcp_service_connect)

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: pulumi.Input[str]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="awsPrivateLink")
    def aws_private_link(self) -> Optional[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs']]:
        return pulumi.get(self, "aws_private_link")

    @aws_private_link.setter
    def aws_private_link(self, value: Optional[pulumi.Input['IdentityNativeNetworkResourceAwsPrivateLinkArgs']]):
        pulumi.set(self, "aws_private_link", value)

    @property
    @pulumi.getter(name="gcpServiceConnect")
    def gcp_service_connect(self) -> Optional[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs']]:
        return pulumi.get(self, "gcp_service_connect")

    @gcp_service_connect.setter
    def gcp_service_connect(self, value: Optional[pulumi.Input['IdentityNativeNetworkResourceGcpServiceConnectArgs']]):
        pulumi.set(self, "gcp_service_connect", value)


@pulumi.input_type
class IdentityNativeNetworkResourceAwsPrivateLinkArgs:
    def __init__(__self__, *,
                 endpoint_service_name: pulumi.Input[str]):
        IdentityNativeNetworkResourceAwsPrivateLinkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint_service_name=endpoint_service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint_service_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'endpointServiceName' in kwargs:
            endpoint_service_name = kwargs['endpointServiceName']

        _setter("endpoint_service_name", endpoint_service_name)

    @property
    @pulumi.getter(name="endpointServiceName")
    def endpoint_service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint_service_name")

    @endpoint_service_name.setter
    def endpoint_service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint_service_name", value)


@pulumi.input_type
class IdentityNativeNetworkResourceGcpServiceConnectArgs:
    def __init__(__self__, *,
                 target_service: pulumi.Input[str]):
        IdentityNativeNetworkResourceGcpServiceConnectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_service=target_service,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_service: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'targetService' in kwargs:
            target_service = kwargs['targetService']

        _setter("target_service", target_service)

    @property
    @pulumi.getter(name="targetService")
    def target_service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_service")

    @target_service.setter
    def target_service(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_service", value)


@pulumi.input_type
class IdentityNetworkResourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 ports: pulumi.Input[Sequence[pulumi.Input[int]]],
                 agent_link: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resolver_ip: Optional[pulumi.Input[str]] = None):
        IdentityNetworkResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            ports=ports,
            agent_link=agent_link,
            fqdn=fqdn,
            ips=ips,
            resolver_ip=resolver_ip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             ports: pulumi.Input[Sequence[pulumi.Input[int]]],
             agent_link: Optional[pulumi.Input[str]] = None,
             fqdn: Optional[pulumi.Input[str]] = None,
             ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resolver_ip: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'agentLink' in kwargs:
            agent_link = kwargs['agentLink']
        if 'resolverIp' in kwargs:
            resolver_ip = kwargs['resolverIp']

        _setter("name", name)
        _setter("ports", ports)
        if agent_link is not None:
            _setter("agent_link", agent_link)
        if fqdn is not None:
            _setter("fqdn", fqdn)
        if ips is not None:
            _setter("ips", ips)
        if resolver_ip is not None:
            _setter("resolver_ip", resolver_ip)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="agentLink")
    def agent_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_link")

    @agent_link.setter
    def agent_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_link", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="resolverIp")
    def resolver_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolver_ip")

    @resolver_ip.setter
    def resolver_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolver_ip", value)


@pulumi.input_type
class IdentityNgsAccessPolicyArgs:
    def __init__(__self__, *,
                 cloud_account_link: pulumi.Input[str],
                 data: Optional[pulumi.Input[int]] = None,
                 payload: Optional[pulumi.Input[int]] = None,
                 pub: Optional[pulumi.Input['IdentityNgsAccessPolicyPubArgs']] = None,
                 resp: Optional[pulumi.Input['IdentityNgsAccessPolicyRespArgs']] = None,
                 sub: Optional[pulumi.Input['IdentityNgsAccessPolicySubArgs']] = None,
                 subs: Optional[pulumi.Input[int]] = None):
        IdentityNgsAccessPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_account_link=cloud_account_link,
            data=data,
            payload=payload,
            pub=pub,
            resp=resp,
            sub=sub,
            subs=subs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_account_link: pulumi.Input[str],
             data: Optional[pulumi.Input[int]] = None,
             payload: Optional[pulumi.Input[int]] = None,
             pub: Optional[pulumi.Input['IdentityNgsAccessPolicyPubArgs']] = None,
             resp: Optional[pulumi.Input['IdentityNgsAccessPolicyRespArgs']] = None,
             sub: Optional[pulumi.Input['IdentityNgsAccessPolicySubArgs']] = None,
             subs: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudAccountLink' in kwargs:
            cloud_account_link = kwargs['cloudAccountLink']

        _setter("cloud_account_link", cloud_account_link)
        if data is not None:
            _setter("data", data)
        if payload is not None:
            _setter("payload", payload)
        if pub is not None:
            _setter("pub", pub)
        if resp is not None:
            _setter("resp", resp)
        if sub is not None:
            _setter("sub", sub)
        if subs is not None:
            _setter("subs", subs)

    @property
    @pulumi.getter(name="cloudAccountLink")
    def cloud_account_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloud_account_link")

    @cloud_account_link.setter
    def cloud_account_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_account_link", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def pub(self) -> Optional[pulumi.Input['IdentityNgsAccessPolicyPubArgs']]:
        return pulumi.get(self, "pub")

    @pub.setter
    def pub(self, value: Optional[pulumi.Input['IdentityNgsAccessPolicyPubArgs']]):
        pulumi.set(self, "pub", value)

    @property
    @pulumi.getter
    def resp(self) -> Optional[pulumi.Input['IdentityNgsAccessPolicyRespArgs']]:
        return pulumi.get(self, "resp")

    @resp.setter
    def resp(self, value: Optional[pulumi.Input['IdentityNgsAccessPolicyRespArgs']]):
        pulumi.set(self, "resp", value)

    @property
    @pulumi.getter
    def sub(self) -> Optional[pulumi.Input['IdentityNgsAccessPolicySubArgs']]:
        return pulumi.get(self, "sub")

    @sub.setter
    def sub(self, value: Optional[pulumi.Input['IdentityNgsAccessPolicySubArgs']]):
        pulumi.set(self, "sub", value)

    @property
    @pulumi.getter
    def subs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "subs")

    @subs.setter
    def subs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subs", value)


@pulumi.input_type
class IdentityNgsAccessPolicyPubArgs:
    def __init__(__self__, *,
                 allows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 denies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        IdentityNgsAccessPolicyPubArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allows=allows,
            denies=denies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             denies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if allows is not None:
            _setter("allows", allows)
        if denies is not None:
            _setter("denies", denies)

    @property
    @pulumi.getter
    def allows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allows")

    @allows.setter
    def allows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allows", value)

    @property
    @pulumi.getter
    def denies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "denies")

    @denies.setter
    def denies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "denies", value)


@pulumi.input_type
class IdentityNgsAccessPolicyRespArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[int]] = None,
                 ttl: Optional[pulumi.Input[str]] = None):
        IdentityNgsAccessPolicyRespArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            ttl=ttl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: Optional[pulumi.Input[int]] = None,
             ttl: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if max is not None:
            _setter("max", max)
        if ttl is not None:
            _setter("ttl", ttl)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class IdentityNgsAccessPolicySubArgs:
    def __init__(__self__, *,
                 allows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 denies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        IdentityNgsAccessPolicySubArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allows=allows,
            denies=denies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             denies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if allows is not None:
            _setter("allows", allows)
        if denies is not None:
            _setter("denies", denies)

    @property
    @pulumi.getter
    def allows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allows")

    @allows.setter
    def allows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allows", value)

    @property
    @pulumi.getter
    def denies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "denies")

    @denies.setter
    def denies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "denies", value)


@pulumi.input_type
class IpSetLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 retention_policy: pulumi.Input[str]):
        IpSetLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            retention_policy=retention_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             retention_policy: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'retentionPolicy' in kwargs:
            retention_policy = kwargs['retentionPolicy']

        _setter("name", name)
        _setter("retention_policy", retention_policy)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retentionPolicy")
    def retention_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "retention_policy")

    @retention_policy.setter
    def retention_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention_policy", value)


@pulumi.input_type
class IpSetStatusArgs:
    def __init__(__self__, *,
                 error: Optional[pulumi.Input[str]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgs']]]] = None):
        IpSetStatusArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error=error,
            ip_addresses=ip_addresses,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error: Optional[pulumi.Input[str]] = None,
             ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ipAddresses' in kwargs:
            ip_addresses = kwargs['ipAddresses']

        if error is not None:
            _setter("error", error)
        if ip_addresses is not None:
            _setter("ip_addresses", ip_addresses)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgs']]]]:
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpSetStatusIpAddressArgs']]]]):
        pulumi.set(self, "ip_addresses", value)


@pulumi.input_type
class IpSetStatusIpAddressArgs:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        IpSetStatusIpAddressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            id=id,
            ip=ip,
            name=name,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             ip: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             state: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if created is not None:
            _setter("created", created)
        if id is not None:
            _setter("id", id)
        if ip is not None:
            _setter("ip", ip)
        if name is not None:
            _setter("name", name)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class LocationGeoArgs:
    def __init__(__self__, *,
                 city: Optional[pulumi.Input[str]] = None,
                 continent: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 lat: Optional[pulumi.Input[float]] = None,
                 lon: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        LocationGeoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            city=city,
            continent=continent,
            country=country,
            lat=lat,
            lon=lon,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             city: Optional[pulumi.Input[str]] = None,
             continent: Optional[pulumi.Input[str]] = None,
             country: Optional[pulumi.Input[str]] = None,
             lat: Optional[pulumi.Input[float]] = None,
             lon: Optional[pulumi.Input[float]] = None,
             state: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if city is not None:
            _setter("city", city)
        if continent is not None:
            _setter("continent", continent)
        if country is not None:
            _setter("country", country)
        if lat is not None:
            _setter("lat", lat)
        if lon is not None:
            _setter("lon", lon)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def continent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "continent", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def lat(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lat")

    @lat.setter
    def lat(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lat", value)

    @property
    @pulumi.getter
    def lon(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lon")

    @lon.setter
    def lon(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lon", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class Mk8sAddOnsArgs:
    def __init__(__self__, *,
                 aws_ecr: Optional[pulumi.Input['Mk8sAddOnsAwsEcrArgs']] = None,
                 aws_efs: Optional[pulumi.Input['Mk8sAddOnsAwsEfsArgs']] = None,
                 aws_elb: Optional[pulumi.Input['Mk8sAddOnsAwsElbArgs']] = None,
                 aws_workload_identity: Optional[pulumi.Input[bool]] = None,
                 azure_acr: Optional[pulumi.Input['Mk8sAddOnsAzureAcrArgs']] = None,
                 azure_workload_identity: Optional[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgs']] = None,
                 dashboard: Optional[pulumi.Input[bool]] = None,
                 local_path_storage: Optional[pulumi.Input[bool]] = None,
                 logs: Optional[pulumi.Input['Mk8sAddOnsLogsArgs']] = None,
                 metrics: Optional[pulumi.Input['Mk8sAddOnsMetricsArgs']] = None,
                 nvidia: Optional[pulumi.Input['Mk8sAddOnsNvidiaArgs']] = None,
                 sysbox: Optional[pulumi.Input[bool]] = None):
        Mk8sAddOnsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_ecr=aws_ecr,
            aws_efs=aws_efs,
            aws_elb=aws_elb,
            aws_workload_identity=aws_workload_identity,
            azure_acr=azure_acr,
            azure_workload_identity=azure_workload_identity,
            dashboard=dashboard,
            local_path_storage=local_path_storage,
            logs=logs,
            metrics=metrics,
            nvidia=nvidia,
            sysbox=sysbox,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_ecr: Optional[pulumi.Input['Mk8sAddOnsAwsEcrArgs']] = None,
             aws_efs: Optional[pulumi.Input['Mk8sAddOnsAwsEfsArgs']] = None,
             aws_elb: Optional[pulumi.Input['Mk8sAddOnsAwsElbArgs']] = None,
             aws_workload_identity: Optional[pulumi.Input[bool]] = None,
             azure_acr: Optional[pulumi.Input['Mk8sAddOnsAzureAcrArgs']] = None,
             azure_workload_identity: Optional[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgs']] = None,
             dashboard: Optional[pulumi.Input[bool]] = None,
             local_path_storage: Optional[pulumi.Input[bool]] = None,
             logs: Optional[pulumi.Input['Mk8sAddOnsLogsArgs']] = None,
             metrics: Optional[pulumi.Input['Mk8sAddOnsMetricsArgs']] = None,
             nvidia: Optional[pulumi.Input['Mk8sAddOnsNvidiaArgs']] = None,
             sysbox: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsEcr' in kwargs:
            aws_ecr = kwargs['awsEcr']
        if 'awsEfs' in kwargs:
            aws_efs = kwargs['awsEfs']
        if 'awsElb' in kwargs:
            aws_elb = kwargs['awsElb']
        if 'awsWorkloadIdentity' in kwargs:
            aws_workload_identity = kwargs['awsWorkloadIdentity']
        if 'azureAcr' in kwargs:
            azure_acr = kwargs['azureAcr']
        if 'azureWorkloadIdentity' in kwargs:
            azure_workload_identity = kwargs['azureWorkloadIdentity']
        if 'localPathStorage' in kwargs:
            local_path_storage = kwargs['localPathStorage']

        if aws_ecr is not None:
            _setter("aws_ecr", aws_ecr)
        if aws_efs is not None:
            _setter("aws_efs", aws_efs)
        if aws_elb is not None:
            _setter("aws_elb", aws_elb)
        if aws_workload_identity is not None:
            _setter("aws_workload_identity", aws_workload_identity)
        if azure_acr is not None:
            _setter("azure_acr", azure_acr)
        if azure_workload_identity is not None:
            _setter("azure_workload_identity", azure_workload_identity)
        if dashboard is not None:
            _setter("dashboard", dashboard)
        if local_path_storage is not None:
            _setter("local_path_storage", local_path_storage)
        if logs is not None:
            _setter("logs", logs)
        if metrics is not None:
            _setter("metrics", metrics)
        if nvidia is not None:
            _setter("nvidia", nvidia)
        if sysbox is not None:
            _setter("sysbox", sysbox)

    @property
    @pulumi.getter(name="awsEcr")
    def aws_ecr(self) -> Optional[pulumi.Input['Mk8sAddOnsAwsEcrArgs']]:
        return pulumi.get(self, "aws_ecr")

    @aws_ecr.setter
    def aws_ecr(self, value: Optional[pulumi.Input['Mk8sAddOnsAwsEcrArgs']]):
        pulumi.set(self, "aws_ecr", value)

    @property
    @pulumi.getter(name="awsEfs")
    def aws_efs(self) -> Optional[pulumi.Input['Mk8sAddOnsAwsEfsArgs']]:
        return pulumi.get(self, "aws_efs")

    @aws_efs.setter
    def aws_efs(self, value: Optional[pulumi.Input['Mk8sAddOnsAwsEfsArgs']]):
        pulumi.set(self, "aws_efs", value)

    @property
    @pulumi.getter(name="awsElb")
    def aws_elb(self) -> Optional[pulumi.Input['Mk8sAddOnsAwsElbArgs']]:
        return pulumi.get(self, "aws_elb")

    @aws_elb.setter
    def aws_elb(self, value: Optional[pulumi.Input['Mk8sAddOnsAwsElbArgs']]):
        pulumi.set(self, "aws_elb", value)

    @property
    @pulumi.getter(name="awsWorkloadIdentity")
    def aws_workload_identity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aws_workload_identity")

    @aws_workload_identity.setter
    def aws_workload_identity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aws_workload_identity", value)

    @property
    @pulumi.getter(name="azureAcr")
    def azure_acr(self) -> Optional[pulumi.Input['Mk8sAddOnsAzureAcrArgs']]:
        return pulumi.get(self, "azure_acr")

    @azure_acr.setter
    def azure_acr(self, value: Optional[pulumi.Input['Mk8sAddOnsAzureAcrArgs']]):
        pulumi.set(self, "azure_acr", value)

    @property
    @pulumi.getter(name="azureWorkloadIdentity")
    def azure_workload_identity(self) -> Optional[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgs']]:
        return pulumi.get(self, "azure_workload_identity")

    @azure_workload_identity.setter
    def azure_workload_identity(self, value: Optional[pulumi.Input['Mk8sAddOnsAzureWorkloadIdentityArgs']]):
        pulumi.set(self, "azure_workload_identity", value)

    @property
    @pulumi.getter
    def dashboard(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dashboard")

    @dashboard.setter
    def dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dashboard", value)

    @property
    @pulumi.getter(name="localPathStorage")
    def local_path_storage(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "local_path_storage")

    @local_path_storage.setter
    def local_path_storage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_path_storage", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input['Mk8sAddOnsLogsArgs']]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input['Mk8sAddOnsLogsArgs']]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['Mk8sAddOnsMetricsArgs']]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['Mk8sAddOnsMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def nvidia(self) -> Optional[pulumi.Input['Mk8sAddOnsNvidiaArgs']]:
        return pulumi.get(self, "nvidia")

    @nvidia.setter
    def nvidia(self, value: Optional[pulumi.Input['Mk8sAddOnsNvidiaArgs']]):
        pulumi.set(self, "nvidia", value)

    @property
    @pulumi.getter
    def sysbox(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sysbox")

    @sysbox.setter
    def sysbox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sysbox", value)


@pulumi.input_type
class Mk8sAddOnsAwsEcrArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        Mk8sAddOnsAwsEcrArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class Mk8sAddOnsAwsEfsArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        Mk8sAddOnsAwsEfsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class Mk8sAddOnsAwsElbArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        Mk8sAddOnsAwsElbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class Mk8sAddOnsAzureAcrArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str]):
        Mk8sAddOnsAzureAcrArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']

        _setter("client_id", client_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)


@pulumi.input_type
class Mk8sAddOnsAzureWorkloadIdentityArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        Mk8sAddOnsAzureWorkloadIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class Mk8sAddOnsLogsArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 audit_enabled: Optional[pulumi.Input[bool]] = None,
                 exclude_namespaces: Optional[pulumi.Input[str]] = None,
                 include_namespaces: Optional[pulumi.Input[str]] = None):
        Mk8sAddOnsLogsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            audit_enabled=audit_enabled,
            exclude_namespaces=exclude_namespaces,
            include_namespaces=include_namespaces,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             audit_enabled: Optional[pulumi.Input[bool]] = None,
             exclude_namespaces: Optional[pulumi.Input[str]] = None,
             include_namespaces: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'auditEnabled' in kwargs:
            audit_enabled = kwargs['auditEnabled']
        if 'excludeNamespaces' in kwargs:
            exclude_namespaces = kwargs['excludeNamespaces']
        if 'includeNamespaces' in kwargs:
            include_namespaces = kwargs['includeNamespaces']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if audit_enabled is not None:
            _setter("audit_enabled", audit_enabled)
        if exclude_namespaces is not None:
            _setter("exclude_namespaces", exclude_namespaces)
        if include_namespaces is not None:
            _setter("include_namespaces", include_namespaces)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="auditEnabled")
    def audit_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "audit_enabled")

    @audit_enabled.setter
    def audit_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "audit_enabled", value)

    @property
    @pulumi.getter(name="excludeNamespaces")
    def exclude_namespaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_namespaces")

    @exclude_namespaces.setter
    def exclude_namespaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_namespaces", value)

    @property
    @pulumi.getter(name="includeNamespaces")
    def include_namespaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_namespaces")

    @include_namespaces.setter
    def include_namespaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_namespaces", value)


@pulumi.input_type
class Mk8sAddOnsMetricsArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 api_server: Optional[pulumi.Input[bool]] = None,
                 cadvisor: Optional[pulumi.Input[bool]] = None,
                 core_dns: Optional[pulumi.Input[bool]] = None,
                 kube_state: Optional[pulumi.Input[bool]] = None,
                 kubelet: Optional[pulumi.Input[bool]] = None,
                 node_exporter: Optional[pulumi.Input[bool]] = None,
                 scrape_annotated: Optional[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgs']] = None):
        Mk8sAddOnsMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            api_server=api_server,
            cadvisor=cadvisor,
            core_dns=core_dns,
            kube_state=kube_state,
            kubelet=kubelet,
            node_exporter=node_exporter,
            scrape_annotated=scrape_annotated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             api_server: Optional[pulumi.Input[bool]] = None,
             cadvisor: Optional[pulumi.Input[bool]] = None,
             core_dns: Optional[pulumi.Input[bool]] = None,
             kube_state: Optional[pulumi.Input[bool]] = None,
             kubelet: Optional[pulumi.Input[bool]] = None,
             node_exporter: Optional[pulumi.Input[bool]] = None,
             scrape_annotated: Optional[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiServer' in kwargs:
            api_server = kwargs['apiServer']
        if 'coreDns' in kwargs:
            core_dns = kwargs['coreDns']
        if 'kubeState' in kwargs:
            kube_state = kwargs['kubeState']
        if 'nodeExporter' in kwargs:
            node_exporter = kwargs['nodeExporter']
        if 'scrapeAnnotated' in kwargs:
            scrape_annotated = kwargs['scrapeAnnotated']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if api_server is not None:
            _setter("api_server", api_server)
        if cadvisor is not None:
            _setter("cadvisor", cadvisor)
        if core_dns is not None:
            _setter("core_dns", core_dns)
        if kube_state is not None:
            _setter("kube_state", kube_state)
        if kubelet is not None:
            _setter("kubelet", kubelet)
        if node_exporter is not None:
            _setter("node_exporter", node_exporter)
        if scrape_annotated is not None:
            _setter("scrape_annotated", scrape_annotated)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="apiServer")
    def api_server(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "api_server")

    @api_server.setter
    def api_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_server", value)

    @property
    @pulumi.getter
    def cadvisor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cadvisor")

    @cadvisor.setter
    def cadvisor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cadvisor", value)

    @property
    @pulumi.getter(name="coreDns")
    def core_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "core_dns")

    @core_dns.setter
    def core_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "core_dns", value)

    @property
    @pulumi.getter(name="kubeState")
    def kube_state(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kube_state")

    @kube_state.setter
    def kube_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kube_state", value)

    @property
    @pulumi.getter
    def kubelet(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kubelet")

    @kubelet.setter
    def kubelet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubelet", value)

    @property
    @pulumi.getter(name="nodeExporter")
    def node_exporter(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "node_exporter")

    @node_exporter.setter
    def node_exporter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "node_exporter", value)

    @property
    @pulumi.getter(name="scrapeAnnotated")
    def scrape_annotated(self) -> Optional[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgs']]:
        return pulumi.get(self, "scrape_annotated")

    @scrape_annotated.setter
    def scrape_annotated(self, value: Optional[pulumi.Input['Mk8sAddOnsMetricsScrapeAnnotatedArgs']]):
        pulumi.set(self, "scrape_annotated", value)


@pulumi.input_type
class Mk8sAddOnsMetricsScrapeAnnotatedArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 exclude_namespaces: Optional[pulumi.Input[str]] = None,
                 include_namespaces: Optional[pulumi.Input[str]] = None,
                 interval_seconds: Optional[pulumi.Input[int]] = None,
                 retain_labels: Optional[pulumi.Input[str]] = None):
        Mk8sAddOnsMetricsScrapeAnnotatedArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            exclude_namespaces=exclude_namespaces,
            include_namespaces=include_namespaces,
            interval_seconds=interval_seconds,
            retain_labels=retain_labels,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             exclude_namespaces: Optional[pulumi.Input[str]] = None,
             include_namespaces: Optional[pulumi.Input[str]] = None,
             interval_seconds: Optional[pulumi.Input[int]] = None,
             retain_labels: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'excludeNamespaces' in kwargs:
            exclude_namespaces = kwargs['excludeNamespaces']
        if 'includeNamespaces' in kwargs:
            include_namespaces = kwargs['includeNamespaces']
        if 'intervalSeconds' in kwargs:
            interval_seconds = kwargs['intervalSeconds']
        if 'retainLabels' in kwargs:
            retain_labels = kwargs['retainLabels']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if exclude_namespaces is not None:
            _setter("exclude_namespaces", exclude_namespaces)
        if include_namespaces is not None:
            _setter("include_namespaces", include_namespaces)
        if interval_seconds is not None:
            _setter("interval_seconds", interval_seconds)
        if retain_labels is not None:
            _setter("retain_labels", retain_labels)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="excludeNamespaces")
    def exclude_namespaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_namespaces")

    @exclude_namespaces.setter
    def exclude_namespaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_namespaces", value)

    @property
    @pulumi.getter(name="includeNamespaces")
    def include_namespaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_namespaces")

    @include_namespaces.setter
    def include_namespaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_namespaces", value)

    @property
    @pulumi.getter(name="intervalSeconds")
    def interval_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval_seconds")

    @interval_seconds.setter
    def interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_seconds", value)

    @property
    @pulumi.getter(name="retainLabels")
    def retain_labels(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retain_labels")

    @retain_labels.setter
    def retain_labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retain_labels", value)


@pulumi.input_type
class Mk8sAddOnsNvidiaArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 taint_gpu_nodes: Optional[pulumi.Input[bool]] = None):
        Mk8sAddOnsNvidiaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            taint_gpu_nodes=taint_gpu_nodes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             taint_gpu_nodes: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'taintGpuNodes' in kwargs:
            taint_gpu_nodes = kwargs['taintGpuNodes']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if taint_gpu_nodes is not None:
            _setter("taint_gpu_nodes", taint_gpu_nodes)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="taintGpuNodes")
    def taint_gpu_nodes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "taint_gpu_nodes")

    @taint_gpu_nodes.setter
    def taint_gpu_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "taint_gpu_nodes", value)


@pulumi.input_type
class Mk8sAwsProviderArgs:
    def __init__(__self__, *,
                 deploy_role_arn: pulumi.Input[str],
                 image: pulumi.Input['Mk8sAwsProviderImageArgs'],
                 networking: pulumi.Input['Mk8sAwsProviderNetworkingArgs'],
                 region: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 autoscaler: Optional[pulumi.Input['Mk8sAwsProviderAutoscalerArgs']] = None,
                 aws_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 deploy_role_chains: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgs']]]] = None,
                 disk_encryption_key_arn: Optional[pulumi.Input[str]] = None,
                 extra_node_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_pair: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 skip_create_roles: Optional[pulumi.Input[bool]] = None):
        Mk8sAwsProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deploy_role_arn=deploy_role_arn,
            image=image,
            networking=networking,
            region=region,
            vpc_id=vpc_id,
            autoscaler=autoscaler,
            aws_tags=aws_tags,
            deploy_role_chains=deploy_role_chains,
            disk_encryption_key_arn=disk_encryption_key_arn,
            extra_node_policies=extra_node_policies,
            key_pair=key_pair,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
            security_group_ids=security_group_ids,
            skip_create_roles=skip_create_roles,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deploy_role_arn: pulumi.Input[str],
             image: pulumi.Input['Mk8sAwsProviderImageArgs'],
             networking: pulumi.Input['Mk8sAwsProviderNetworkingArgs'],
             region: pulumi.Input[str],
             vpc_id: pulumi.Input[str],
             autoscaler: Optional[pulumi.Input['Mk8sAwsProviderAutoscalerArgs']] = None,
             aws_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             deploy_role_chains: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgs']]]] = None,
             disk_encryption_key_arn: Optional[pulumi.Input[str]] = None,
             extra_node_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             key_pair: Optional[pulumi.Input[str]] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             skip_create_roles: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deployRoleArn' in kwargs:
            deploy_role_arn = kwargs['deployRoleArn']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'awsTags' in kwargs:
            aws_tags = kwargs['awsTags']
        if 'deployRoleChains' in kwargs:
            deploy_role_chains = kwargs['deployRoleChains']
        if 'diskEncryptionKeyArn' in kwargs:
            disk_encryption_key_arn = kwargs['diskEncryptionKeyArn']
        if 'extraNodePolicies' in kwargs:
            extra_node_policies = kwargs['extraNodePolicies']
        if 'keyPair' in kwargs:
            key_pair = kwargs['keyPair']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']
        if 'securityGroupIds' in kwargs:
            security_group_ids = kwargs['securityGroupIds']
        if 'skipCreateRoles' in kwargs:
            skip_create_roles = kwargs['skipCreateRoles']

        _setter("deploy_role_arn", deploy_role_arn)
        _setter("image", image)
        _setter("networking", networking)
        _setter("region", region)
        _setter("vpc_id", vpc_id)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if aws_tags is not None:
            _setter("aws_tags", aws_tags)
        if deploy_role_chains is not None:
            _setter("deploy_role_chains", deploy_role_chains)
        if disk_encryption_key_arn is not None:
            _setter("disk_encryption_key_arn", disk_encryption_key_arn)
        if extra_node_policies is not None:
            _setter("extra_node_policies", extra_node_policies)
        if key_pair is not None:
            _setter("key_pair", key_pair)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)
        if security_group_ids is not None:
            _setter("security_group_ids", security_group_ids)
        if skip_create_roles is not None:
            _setter("skip_create_roles", skip_create_roles)

    @property
    @pulumi.getter(name="deployRoleArn")
    def deploy_role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deploy_role_arn")

    @deploy_role_arn.setter
    def deploy_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_role_arn", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input['Mk8sAwsProviderImageArgs']:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input['Mk8sAwsProviderImageArgs']):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Input['Mk8sAwsProviderNetworkingArgs']:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: pulumi.Input['Mk8sAwsProviderNetworkingArgs']):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sAwsProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sAwsProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="awsTags")
    def aws_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "aws_tags")

    @aws_tags.setter
    def aws_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "aws_tags", value)

    @property
    @pulumi.getter(name="deployRoleChains")
    def deploy_role_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgs']]]]:
        return pulumi.get(self, "deploy_role_chains")

    @deploy_role_chains.setter
    def deploy_role_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderDeployRoleChainArgs']]]]):
        pulumi.set(self, "deploy_role_chains", value)

    @property
    @pulumi.getter(name="diskEncryptionKeyArn")
    def disk_encryption_key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_encryption_key_arn")

    @disk_encryption_key_arn.setter
    def disk_encryption_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_encryption_key_arn", value)

    @property
    @pulumi.getter(name="extraNodePolicies")
    def extra_node_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_node_policies")

    @extra_node_policies.setter
    def extra_node_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_node_policies", value)

    @property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_pair")

    @key_pair.setter
    def key_pair(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="skipCreateRoles")
    def skip_create_roles(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "skip_create_roles")

    @skip_create_roles.setter
    def skip_create_roles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_create_roles", value)


@pulumi.input_type
class Mk8sAwsProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sAwsProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sAwsProviderDeployRoleChainArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None,
                 session_name_prefix: Optional[pulumi.Input[str]] = None):
        Mk8sAwsProviderDeployRoleChainArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            external_id=external_id,
            session_name_prefix=session_name_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: pulumi.Input[str],
             external_id: Optional[pulumi.Input[str]] = None,
             session_name_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if 'sessionNamePrefix' in kwargs:
            session_name_prefix = kwargs['sessionNamePrefix']

        _setter("role_arn", role_arn)
        if external_id is not None:
            _setter("external_id", external_id)
        if session_name_prefix is not None:
            _setter("session_name_prefix", session_name_prefix)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="sessionNamePrefix")
    def session_name_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_name_prefix")

    @session_name_prefix.setter
    def session_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_name_prefix", value)


@pulumi.input_type
class Mk8sAwsProviderImageArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 recommended: Optional[pulumi.Input[str]] = None):
        Mk8sAwsProviderImageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            recommended=recommended,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             recommended: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if exact is not None:
            _setter("exact", exact)
        if recommended is not None:
            _setter("recommended", recommended)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def recommended(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recommended")

    @recommended.setter
    def recommended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recommended", value)


@pulumi.input_type
class Mk8sAwsProviderNetworkingArgs:
    def __init__(__self__, *,
                 pod_network: Optional[pulumi.Input[str]] = None,
                 service_network: Optional[pulumi.Input[str]] = None):
        Mk8sAwsProviderNetworkingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pod_network=pod_network,
            service_network=service_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pod_network: Optional[pulumi.Input[str]] = None,
             service_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'podNetwork' in kwargs:
            pod_network = kwargs['podNetwork']
        if 'serviceNetwork' in kwargs:
            service_network = kwargs['serviceNetwork']

        if pod_network is not None:
            _setter("pod_network", pod_network)
        if service_network is not None:
            _setter("service_network", service_network)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network", value)


@pulumi.input_type
class Mk8sAwsProviderNodePoolArgs:
    def __init__(__self__, *,
                 instance_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 override_image: pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs'],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 boot_disk_size: Optional[pulumi.Input[int]] = None,
                 extra_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 on_demand_base_capacity: Optional[pulumi.Input[int]] = None,
                 on_demand_percentage_above_base_capacity: Optional[pulumi.Input[int]] = None,
                 spot_allocation_strategy: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]]] = None):
        Mk8sAwsProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_types=instance_types,
            name=name,
            override_image=override_image,
            subnet_ids=subnet_ids,
            boot_disk_size=boot_disk_size,
            extra_security_group_ids=extra_security_group_ids,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            on_demand_base_capacity=on_demand_base_capacity,
            on_demand_percentage_above_base_capacity=on_demand_percentage_above_base_capacity,
            spot_allocation_strategy=spot_allocation_strategy,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_types: pulumi.Input[Sequence[pulumi.Input[str]]],
             name: pulumi.Input[str],
             override_image: pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs'],
             subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
             boot_disk_size: Optional[pulumi.Input[int]] = None,
             extra_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             on_demand_base_capacity: Optional[pulumi.Input[int]] = None,
             on_demand_percentage_above_base_capacity: Optional[pulumi.Input[int]] = None,
             spot_allocation_strategy: Optional[pulumi.Input[str]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'instanceTypes' in kwargs:
            instance_types = kwargs['instanceTypes']
        if 'overrideImage' in kwargs:
            override_image = kwargs['overrideImage']
        if 'subnetIds' in kwargs:
            subnet_ids = kwargs['subnetIds']
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'extraSecurityGroupIds' in kwargs:
            extra_security_group_ids = kwargs['extraSecurityGroupIds']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']
        if 'onDemandBaseCapacity' in kwargs:
            on_demand_base_capacity = kwargs['onDemandBaseCapacity']
        if 'onDemandPercentageAboveBaseCapacity' in kwargs:
            on_demand_percentage_above_base_capacity = kwargs['onDemandPercentageAboveBaseCapacity']
        if 'spotAllocationStrategy' in kwargs:
            spot_allocation_strategy = kwargs['spotAllocationStrategy']

        _setter("instance_types", instance_types)
        _setter("name", name)
        _setter("override_image", override_image)
        _setter("subnet_ids", subnet_ids)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if extra_security_group_ids is not None:
            _setter("extra_security_group_ids", extra_security_group_ids)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if on_demand_base_capacity is not None:
            _setter("on_demand_base_capacity", on_demand_base_capacity)
        if on_demand_percentage_above_base_capacity is not None:
            _setter("on_demand_percentage_above_base_capacity", on_demand_percentage_above_base_capacity)
        if spot_allocation_strategy is not None:
            _setter("spot_allocation_strategy", spot_allocation_strategy)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "instance_types")

    @instance_types.setter
    def instance_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_types", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs']:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: pulumi.Input['Mk8sAwsProviderNodePoolOverrideImageArgs']):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "boot_disk_size")

    @boot_disk_size.setter
    def boot_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "boot_disk_size", value)

    @property
    @pulumi.getter(name="extraSecurityGroupIds")
    def extra_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_security_group_ids")

    @extra_security_group_ids.setter
    def extra_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_security_group_ids", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="onDemandBaseCapacity")
    def on_demand_base_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "on_demand_base_capacity")

    @on_demand_base_capacity.setter
    def on_demand_base_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_demand_base_capacity", value)

    @property
    @pulumi.getter(name="onDemandPercentageAboveBaseCapacity")
    def on_demand_percentage_above_base_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "on_demand_percentage_above_base_capacity")

    @on_demand_percentage_above_base_capacity.setter
    def on_demand_percentage_above_base_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_demand_percentage_above_base_capacity", value)

    @property
    @pulumi.getter(name="spotAllocationStrategy")
    def spot_allocation_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spot_allocation_strategy")

    @spot_allocation_strategy.setter
    def spot_allocation_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_allocation_strategy", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sAwsProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sAwsProviderNodePoolOverrideImageArgs:
    def __init__(__self__, *,
                 exact: Optional[pulumi.Input[str]] = None,
                 recommended: Optional[pulumi.Input[str]] = None):
        Mk8sAwsProviderNodePoolOverrideImageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            recommended=recommended,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[pulumi.Input[str]] = None,
             recommended: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if exact is not None:
            _setter("exact", exact)
        if recommended is not None:
            _setter("recommended", recommended)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter
    def recommended(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recommended")

    @recommended.setter
    def recommended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recommended", value)


@pulumi.input_type
class Mk8sAwsProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sAwsProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sDigitalOceanProviderArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 networking: pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgs'],
                 region: pulumi.Input[str],
                 ssh_keys: pulumi.Input[Sequence[pulumi.Input[str]]],
                 token_secret_link: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 autoscaler: Optional[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgs']] = None,
                 digital_ocean_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None,
                 reserved_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        Mk8sDigitalOceanProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image=image,
            networking=networking,
            region=region,
            ssh_keys=ssh_keys,
            token_secret_link=token_secret_link,
            vpc_id=vpc_id,
            autoscaler=autoscaler,
            digital_ocean_tags=digital_ocean_tags,
            extra_ssh_keys=extra_ssh_keys,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
            reserved_ips=reserved_ips,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image: pulumi.Input[str],
             networking: pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgs'],
             region: pulumi.Input[str],
             ssh_keys: pulumi.Input[Sequence[pulumi.Input[str]]],
             token_secret_link: pulumi.Input[str],
             vpc_id: pulumi.Input[str],
             autoscaler: Optional[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgs']] = None,
             digital_ocean_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             reserved_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sshKeys' in kwargs:
            ssh_keys = kwargs['sshKeys']
        if 'tokenSecretLink' in kwargs:
            token_secret_link = kwargs['tokenSecretLink']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'digitalOceanTags' in kwargs:
            digital_ocean_tags = kwargs['digitalOceanTags']
        if 'extraSshKeys' in kwargs:
            extra_ssh_keys = kwargs['extraSshKeys']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']
        if 'reservedIps' in kwargs:
            reserved_ips = kwargs['reservedIps']

        _setter("image", image)
        _setter("networking", networking)
        _setter("region", region)
        _setter("ssh_keys", ssh_keys)
        _setter("token_secret_link", token_secret_link)
        _setter("vpc_id", vpc_id)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if digital_ocean_tags is not None:
            _setter("digital_ocean_tags", digital_ocean_tags)
        if extra_ssh_keys is not None:
            _setter("extra_ssh_keys", extra_ssh_keys)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)
        if reserved_ips is not None:
            _setter("reserved_ips", reserved_ips)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgs']:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: pulumi.Input['Mk8sDigitalOceanProviderNetworkingArgs']):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sDigitalOceanProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="digitalOceanTags")
    def digital_ocean_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "digital_ocean_tags")

    @digital_ocean_tags.setter
    def digital_ocean_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "digital_ocean_tags", value)

    @property
    @pulumi.getter(name="extraSshKeys")
    def extra_ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_ssh_keys")

    @extra_ssh_keys.setter
    def extra_ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_ssh_keys", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="reservedIps")
    def reserved_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reserved_ips")

    @reserved_ips.setter
    def reserved_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reserved_ips", value)


@pulumi.input_type
class Mk8sDigitalOceanProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sDigitalOceanProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sDigitalOceanProviderNetworkingArgs:
    def __init__(__self__, *,
                 pod_network: Optional[pulumi.Input[str]] = None,
                 service_network: Optional[pulumi.Input[str]] = None):
        Mk8sDigitalOceanProviderNetworkingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pod_network=pod_network,
            service_network=service_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pod_network: Optional[pulumi.Input[str]] = None,
             service_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'podNetwork' in kwargs:
            pod_network = kwargs['podNetwork']
        if 'serviceNetwork' in kwargs:
            service_network = kwargs['serviceNetwork']

        if pod_network is not None:
            _setter("pod_network", pod_network)
        if service_network is not None:
            _setter("service_network", service_network)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network", value)


@pulumi.input_type
class Mk8sDigitalOceanProviderNodePoolArgs:
    def __init__(__self__, *,
                 droplet_size: pulumi.Input[str],
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 override_image: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]]] = None):
        Mk8sDigitalOceanProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            droplet_size=droplet_size,
            name=name,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            override_image=override_image,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             droplet_size: pulumi.Input[str],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             override_image: Optional[pulumi.Input[str]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dropletSize' in kwargs:
            droplet_size = kwargs['dropletSize']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']
        if 'overrideImage' in kwargs:
            override_image = kwargs['overrideImage']

        _setter("droplet_size", droplet_size)
        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if override_image is not None:
            _setter("override_image", override_image)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter(name="dropletSize")
    def droplet_size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "droplet_size")

    @droplet_size.setter
    def droplet_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "droplet_size", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sDigitalOceanProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sDigitalOceanProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sDigitalOceanProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sEphemeralProviderArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]]] = None):
        Mk8sEphemeralProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
            node_pools=node_pools,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: pulumi.Input[str],
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']

        _setter("location", location)
        if node_pools is not None:
            _setter("node_pools", node_pools)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)


@pulumi.input_type
class Mk8sEphemeralProviderNodePoolArgs:
    def __init__(__self__, *,
                 arch: pulumi.Input[str],
                 count: pulumi.Input[int],
                 cpu: pulumi.Input[str],
                 flavor: pulumi.Input[str],
                 memory: pulumi.Input[str],
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]]] = None):
        Mk8sEphemeralProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arch=arch,
            count=count,
            cpu=cpu,
            flavor=flavor,
            memory=memory,
            name=name,
            labels=labels,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arch: pulumi.Input[str],
             count: pulumi.Input[int],
             cpu: pulumi.Input[str],
             flavor: pulumi.Input[str],
             memory: pulumi.Input[str],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("arch", arch)
        _setter("count", count)
        _setter("cpu", cpu)
        _setter("flavor", flavor)
        _setter("memory", memory)
        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def arch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: pulumi.Input[str]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[str]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[str]):
        pulumi.set(self, "flavor", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[str]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[str]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sEphemeralProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sEphemeralProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sEphemeralProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sFirewallArgs:
    def __init__(__self__, *,
                 source_cidr: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        Mk8sFirewallArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_cidr=source_cidr,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_cidr: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sourceCidr' in kwargs:
            source_cidr = kwargs['sourceCidr']

        _setter("source_cidr", source_cidr)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter(name="sourceCidr")
    def source_cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_cidr")

    @source_cidr.setter
    def source_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_cidr", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class Mk8sGenericProviderArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 networking: pulumi.Input['Mk8sGenericProviderNetworkingArgs'],
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]]] = None):
        Mk8sGenericProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
            networking=networking,
            node_pools=node_pools,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: pulumi.Input[str],
             networking: pulumi.Input['Mk8sGenericProviderNetworkingArgs'],
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']

        _setter("location", location)
        _setter("networking", networking)
        if node_pools is not None:
            _setter("node_pools", node_pools)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Input['Mk8sGenericProviderNetworkingArgs']:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: pulumi.Input['Mk8sGenericProviderNetworkingArgs']):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)


@pulumi.input_type
class Mk8sGenericProviderNetworkingArgs:
    def __init__(__self__, *,
                 pod_network: Optional[pulumi.Input[str]] = None,
                 service_network: Optional[pulumi.Input[str]] = None):
        Mk8sGenericProviderNetworkingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pod_network=pod_network,
            service_network=service_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pod_network: Optional[pulumi.Input[str]] = None,
             service_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'podNetwork' in kwargs:
            pod_network = kwargs['podNetwork']
        if 'serviceNetwork' in kwargs:
            service_network = kwargs['serviceNetwork']

        if pod_network is not None:
            _setter("pod_network", pod_network)
        if service_network is not None:
            _setter("service_network", service_network)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network", value)


@pulumi.input_type
class Mk8sGenericProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]]] = None):
        Mk8sGenericProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            labels=labels,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sGenericProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sGenericProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sGenericProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sHetznerProviderArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[str],
                 networking: pulumi.Input['Mk8sHetznerProviderNetworkingArgs'],
                 region: pulumi.Input[str],
                 token_secret_link: pulumi.Input[str],
                 autoscaler: Optional[pulumi.Input['Mk8sHetznerProviderAutoscalerArgs']] = None,
                 dedicated_server_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]]] = None,
                 firewall_id: Optional[pulumi.Input[str]] = None,
                 floating_ip_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 hetzner_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None,
                 ssh_key: Optional[pulumi.Input[str]] = None):
        Mk8sHetznerProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_id=network_id,
            networking=networking,
            region=region,
            token_secret_link=token_secret_link,
            autoscaler=autoscaler,
            dedicated_server_node_pools=dedicated_server_node_pools,
            firewall_id=firewall_id,
            floating_ip_selector=floating_ip_selector,
            hetzner_labels=hetzner_labels,
            image=image,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
            ssh_key=ssh_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_id: pulumi.Input[str],
             networking: pulumi.Input['Mk8sHetznerProviderNetworkingArgs'],
             region: pulumi.Input[str],
             token_secret_link: pulumi.Input[str],
             autoscaler: Optional[pulumi.Input['Mk8sHetznerProviderAutoscalerArgs']] = None,
             dedicated_server_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]]] = None,
             firewall_id: Optional[pulumi.Input[str]] = None,
             floating_ip_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             hetzner_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             ssh_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'networkId' in kwargs:
            network_id = kwargs['networkId']
        if 'tokenSecretLink' in kwargs:
            token_secret_link = kwargs['tokenSecretLink']
        if 'dedicatedServerNodePools' in kwargs:
            dedicated_server_node_pools = kwargs['dedicatedServerNodePools']
        if 'firewallId' in kwargs:
            firewall_id = kwargs['firewallId']
        if 'floatingIpSelector' in kwargs:
            floating_ip_selector = kwargs['floatingIpSelector']
        if 'hetznerLabels' in kwargs:
            hetzner_labels = kwargs['hetznerLabels']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']
        if 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']

        _setter("network_id", network_id)
        _setter("networking", networking)
        _setter("region", region)
        _setter("token_secret_link", token_secret_link)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if dedicated_server_node_pools is not None:
            _setter("dedicated_server_node_pools", dedicated_server_node_pools)
        if firewall_id is not None:
            _setter("firewall_id", firewall_id)
        if floating_ip_selector is not None:
            _setter("floating_ip_selector", floating_ip_selector)
        if hetzner_labels is not None:
            _setter("hetzner_labels", hetzner_labels)
        if image is not None:
            _setter("image", image)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)
        if ssh_key is not None:
            _setter("ssh_key", ssh_key)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Input['Mk8sHetznerProviderNetworkingArgs']:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: pulumi.Input['Mk8sHetznerProviderNetworkingArgs']):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sHetznerProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sHetznerProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="dedicatedServerNodePools")
    def dedicated_server_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]]]:
        return pulumi.get(self, "dedicated_server_node_pools")

    @dedicated_server_node_pools.setter
    def dedicated_server_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolArgs']]]]):
        pulumi.set(self, "dedicated_server_node_pools", value)

    @property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_id")

    @firewall_id.setter
    def firewall_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_id", value)

    @property
    @pulumi.getter(name="floatingIpSelector")
    def floating_ip_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "floating_ip_selector")

    @floating_ip_selector.setter
    def floating_ip_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "floating_ip_selector", value)

    @property
    @pulumi.getter(name="hetznerLabels")
    def hetzner_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "hetzner_labels")

    @hetzner_labels.setter
    def hetzner_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "hetzner_labels", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key", value)


@pulumi.input_type
class Mk8sHetznerProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sHetznerProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sHetznerProviderDedicatedServerNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]]] = None):
        Mk8sHetznerProviderDedicatedServerNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            labels=labels,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sHetznerProviderDedicatedServerNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sHetznerProviderNetworkingArgs:
    def __init__(__self__, *,
                 pod_network: Optional[pulumi.Input[str]] = None,
                 service_network: Optional[pulumi.Input[str]] = None):
        Mk8sHetznerProviderNetworkingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pod_network=pod_network,
            service_network=service_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pod_network: Optional[pulumi.Input[str]] = None,
             service_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'podNetwork' in kwargs:
            pod_network = kwargs['podNetwork']
        if 'serviceNetwork' in kwargs:
            service_network = kwargs['serviceNetwork']

        if pod_network is not None:
            _setter("pod_network", pod_network)
        if service_network is not None:
            _setter("service_network", service_network)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network", value)


@pulumi.input_type
class Mk8sHetznerProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 server_type: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 override_image: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]]] = None):
        Mk8sHetznerProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            server_type=server_type,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            override_image=override_image,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             server_type: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             override_image: Optional[pulumi.Input[str]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverType' in kwargs:
            server_type = kwargs['serverType']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']
        if 'overrideImage' in kwargs:
            override_image = kwargs['overrideImage']

        _setter("name", name)
        _setter("server_type", server_type)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if override_image is not None:
            _setter("override_image", override_image)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sHetznerProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sHetznerProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sHetznerProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sLambdalabsProviderArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 ssh_key: pulumi.Input[str],
                 token_secret_link: pulumi.Input[str],
                 autoscaler: Optional[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None,
                 unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgs']]]] = None):
        Mk8sLambdalabsProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region=region,
            ssh_key=ssh_key,
            token_secret_link=token_secret_link,
            autoscaler=autoscaler,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
            unmanaged_node_pools=unmanaged_node_pools,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region: pulumi.Input[str],
             ssh_key: pulumi.Input[str],
             token_secret_link: pulumi.Input[str],
             autoscaler: Optional[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgs']] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']
        if 'tokenSecretLink' in kwargs:
            token_secret_link = kwargs['tokenSecretLink']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']
        if 'unmanagedNodePools' in kwargs:
            unmanaged_node_pools = kwargs['unmanagedNodePools']

        _setter("region", region)
        _setter("ssh_key", ssh_key)
        _setter("token_secret_link", token_secret_link)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)
        if unmanaged_node_pools is not None:
            _setter("unmanaged_node_pools", unmanaged_node_pools)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sLambdalabsProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgs']]]]:
        return pulumi.get(self, "unmanaged_node_pools")

    @unmanaged_node_pools.setter
    def unmanaged_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolArgs']]]]):
        pulumi.set(self, "unmanaged_node_pools", value)


@pulumi.input_type
class Mk8sLambdalabsProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sLambdalabsProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sLambdalabsProviderNodePoolArgs:
    def __init__(__self__, *,
                 instance_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]]] = None):
        Mk8sLambdalabsProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_type=instance_type,
            name=name,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_type: pulumi.Input[str],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']

        _setter("instance_type", instance_type)
        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sLambdalabsProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sLambdalabsProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sLambdalabsProviderUnmanagedNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]]] = None):
        Mk8sLambdalabsProviderUnmanagedNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            labels=labels,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sLambdalabsProviderUnmanagedNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sLinodeProviderArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 networking: pulumi.Input['Mk8sLinodeProviderNetworkingArgs'],
                 region: pulumi.Input[str],
                 token_secret_link: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 authorized_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorized_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 autoscaler: Optional[pulumi.Input['Mk8sLinodeProviderAutoscalerArgs']] = None,
                 firewall_id: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None):
        Mk8sLinodeProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image=image,
            networking=networking,
            region=region,
            token_secret_link=token_secret_link,
            vpc_id=vpc_id,
            authorized_keys=authorized_keys,
            authorized_users=authorized_users,
            autoscaler=autoscaler,
            firewall_id=firewall_id,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image: pulumi.Input[str],
             networking: pulumi.Input['Mk8sLinodeProviderNetworkingArgs'],
             region: pulumi.Input[str],
             token_secret_link: pulumi.Input[str],
             vpc_id: pulumi.Input[str],
             authorized_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             authorized_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             autoscaler: Optional[pulumi.Input['Mk8sLinodeProviderAutoscalerArgs']] = None,
             firewall_id: Optional[pulumi.Input[str]] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'tokenSecretLink' in kwargs:
            token_secret_link = kwargs['tokenSecretLink']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'authorizedKeys' in kwargs:
            authorized_keys = kwargs['authorizedKeys']
        if 'authorizedUsers' in kwargs:
            authorized_users = kwargs['authorizedUsers']
        if 'firewallId' in kwargs:
            firewall_id = kwargs['firewallId']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']

        _setter("image", image)
        _setter("networking", networking)
        _setter("region", region)
        _setter("token_secret_link", token_secret_link)
        _setter("vpc_id", vpc_id)
        if authorized_keys is not None:
            _setter("authorized_keys", authorized_keys)
        if authorized_users is not None:
            _setter("authorized_users", authorized_users)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if firewall_id is not None:
            _setter("firewall_id", firewall_id)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Input['Mk8sLinodeProviderNetworkingArgs']:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: pulumi.Input['Mk8sLinodeProviderNetworkingArgs']):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="authorizedKeys")
    def authorized_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "authorized_keys")

    @authorized_keys.setter
    def authorized_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorized_keys", value)

    @property
    @pulumi.getter(name="authorizedUsers")
    def authorized_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "authorized_users")

    @authorized_users.setter
    def authorized_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorized_users", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sLinodeProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sLinodeProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="firewallId")
    def firewall_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "firewall_id")

    @firewall_id.setter
    def firewall_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_id", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)


@pulumi.input_type
class Mk8sLinodeProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sLinodeProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sLinodeProviderNetworkingArgs:
    def __init__(__self__, *,
                 pod_network: Optional[pulumi.Input[str]] = None,
                 service_network: Optional[pulumi.Input[str]] = None):
        Mk8sLinodeProviderNetworkingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pod_network=pod_network,
            service_network=service_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pod_network: Optional[pulumi.Input[str]] = None,
             service_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'podNetwork' in kwargs:
            pod_network = kwargs['podNetwork']
        if 'serviceNetwork' in kwargs:
            service_network = kwargs['serviceNetwork']

        if pod_network is not None:
            _setter("pod_network", pod_network)
        if service_network is not None:
            _setter("service_network", service_network)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network", value)


@pulumi.input_type
class Mk8sLinodeProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 server_type: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 override_image: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]]] = None):
        Mk8sLinodeProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            server_type=server_type,
            subnet_id=subnet_id,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            override_image=override_image,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             server_type: pulumi.Input[str],
             subnet_id: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             override_image: Optional[pulumi.Input[str]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serverType' in kwargs:
            server_type = kwargs['serverType']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']
        if 'overrideImage' in kwargs:
            override_image = kwargs['overrideImage']

        _setter("name", name)
        _setter("server_type", server_type)
        _setter("subnet_id", subnet_id)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if override_image is not None:
            _setter("override_image", override_image)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImage")
    def override_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_image")

    @override_image.setter
    def override_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_image", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sLinodeProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sLinodeProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sLinodeProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sOblivusProviderArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[str],
                 token_secret_link: pulumi.Input[str],
                 autoscaler: Optional[pulumi.Input['Mk8sOblivusProviderAutoscalerArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgs']]]] = None):
        Mk8sOblivusProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter=datacenter,
            token_secret_link=token_secret_link,
            autoscaler=autoscaler,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
            ssh_keys=ssh_keys,
            unmanaged_node_pools=unmanaged_node_pools,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter: pulumi.Input[str],
             token_secret_link: pulumi.Input[str],
             autoscaler: Optional[pulumi.Input['Mk8sOblivusProviderAutoscalerArgs']] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'tokenSecretLink' in kwargs:
            token_secret_link = kwargs['tokenSecretLink']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']
        if 'sshKeys' in kwargs:
            ssh_keys = kwargs['sshKeys']
        if 'unmanagedNodePools' in kwargs:
            unmanaged_node_pools = kwargs['unmanagedNodePools']

        _setter("datacenter", datacenter)
        _setter("token_secret_link", token_secret_link)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)
        if ssh_keys is not None:
            _setter("ssh_keys", ssh_keys)
        if unmanaged_node_pools is not None:
            _setter("unmanaged_node_pools", unmanaged_node_pools)

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sOblivusProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sOblivusProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgs']]]]:
        return pulumi.get(self, "unmanaged_node_pools")

    @unmanaged_node_pools.setter
    def unmanaged_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolArgs']]]]):
        pulumi.set(self, "unmanaged_node_pools", value)


@pulumi.input_type
class Mk8sOblivusProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sOblivusProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sOblivusProviderNodePoolArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[str],
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]]] = None):
        Mk8sOblivusProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            flavor=flavor,
            name=name,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             flavor: pulumi.Input[str],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']

        _setter("flavor", flavor)
        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[str]):
        pulumi.set(self, "flavor", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sOblivusProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sOblivusProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sOblivusProviderUnmanagedNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]]] = None):
        Mk8sOblivusProviderUnmanagedNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            labels=labels,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sOblivusProviderUnmanagedNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sOblivusProviderUnmanagedNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sOblivusProviderUnmanagedNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sPaperspaceProviderArgs:
    def __init__(__self__, *,
                 network_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 token_secret_link: pulumi.Input[str],
                 autoscaler: Optional[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgs']] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None,
                 shared_drives: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgs']]]] = None,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        Mk8sPaperspaceProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            network_id=network_id,
            region=region,
            token_secret_link=token_secret_link,
            autoscaler=autoscaler,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
            shared_drives=shared_drives,
            unmanaged_node_pools=unmanaged_node_pools,
            user_ids=user_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             network_id: pulumi.Input[str],
             region: pulumi.Input[str],
             token_secret_link: pulumi.Input[str],
             autoscaler: Optional[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgs']] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             shared_drives: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             unmanaged_node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgs']]]] = None,
             user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'networkId' in kwargs:
            network_id = kwargs['networkId']
        if 'tokenSecretLink' in kwargs:
            token_secret_link = kwargs['tokenSecretLink']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']
        if 'sharedDrives' in kwargs:
            shared_drives = kwargs['sharedDrives']
        if 'unmanagedNodePools' in kwargs:
            unmanaged_node_pools = kwargs['unmanagedNodePools']
        if 'userIds' in kwargs:
            user_ids = kwargs['userIds']

        _setter("network_id", network_id)
        _setter("region", region)
        _setter("token_secret_link", token_secret_link)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)
        if shared_drives is not None:
            _setter("shared_drives", shared_drives)
        if unmanaged_node_pools is not None:
            _setter("unmanaged_node_pools", unmanaged_node_pools)
        if user_ids is not None:
            _setter("user_ids", user_ids)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tokenSecretLink")
    def token_secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_secret_link")

    @token_secret_link.setter
    def token_secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_secret_link", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sPaperspaceProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sharedDrives")
    def shared_drives(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "shared_drives")

    @shared_drives.setter
    def shared_drives(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "shared_drives", value)

    @property
    @pulumi.getter(name="unmanagedNodePools")
    def unmanaged_node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgs']]]]:
        return pulumi.get(self, "unmanaged_node_pools")

    @unmanaged_node_pools.setter
    def unmanaged_node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolArgs']]]]):
        pulumi.set(self, "unmanaged_node_pools", value)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_ids", value)


@pulumi.input_type
class Mk8sPaperspaceProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sPaperspaceProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sPaperspaceProviderNodePoolArgs:
    def __init__(__self__, *,
                 machine_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 public_ip_type: pulumi.Input[str],
                 boot_disk_size: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]]] = None):
        Mk8sPaperspaceProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            machine_type=machine_type,
            name=name,
            public_ip_type=public_ip_type,
            boot_disk_size=boot_disk_size,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             machine_type: pulumi.Input[str],
             name: pulumi.Input[str],
             public_ip_type: pulumi.Input[str],
             boot_disk_size: Optional[pulumi.Input[int]] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'machineType' in kwargs:
            machine_type = kwargs['machineType']
        if 'publicIpType' in kwargs:
            public_ip_type = kwargs['publicIpType']
        if 'bootDiskSize' in kwargs:
            boot_disk_size = kwargs['bootDiskSize']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']

        _setter("machine_type", machine_type)
        _setter("name", name)
        _setter("public_ip_type", public_ip_type)
        if boot_disk_size is not None:
            _setter("boot_disk_size", boot_disk_size)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIpType")
    def public_ip_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip_type")

    @public_ip_type.setter
    def public_ip_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip_type", value)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "boot_disk_size")

    @boot_disk_size.setter
    def boot_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "boot_disk_size", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sPaperspaceProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sPaperspaceProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sPaperspaceProviderUnmanagedNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]]] = None):
        Mk8sPaperspaceProviderUnmanagedNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            labels=labels,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if labels is not None:
            _setter("labels", labels)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sPaperspaceProviderUnmanagedNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class Mk8sStatusArgs:
    def __init__(__self__, *,
                 add_ons: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgs']]]] = None,
                 home_location: Optional[pulumi.Input[str]] = None,
                 oidc_provider_url: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None):
        Mk8sStatusArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_ons=add_ons,
            home_location=home_location,
            oidc_provider_url=oidc_provider_url,
            server_url=server_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_ons: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgs']]]] = None,
             home_location: Optional[pulumi.Input[str]] = None,
             oidc_provider_url: Optional[pulumi.Input[str]] = None,
             server_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addOns' in kwargs:
            add_ons = kwargs['addOns']
        if 'homeLocation' in kwargs:
            home_location = kwargs['homeLocation']
        if 'oidcProviderUrl' in kwargs:
            oidc_provider_url = kwargs['oidcProviderUrl']
        if 'serverUrl' in kwargs:
            server_url = kwargs['serverUrl']

        if add_ons is not None:
            _setter("add_ons", add_ons)
        if home_location is not None:
            _setter("home_location", home_location)
        if oidc_provider_url is not None:
            _setter("oidc_provider_url", oidc_provider_url)
        if server_url is not None:
            _setter("server_url", server_url)

    @property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgs']]]]:
        return pulumi.get(self, "add_ons")

    @add_ons.setter
    def add_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnArgs']]]]):
        pulumi.set(self, "add_ons", value)

    @property
    @pulumi.getter(name="homeLocation")
    def home_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "home_location")

    @home_location.setter
    def home_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_location", value)

    @property
    @pulumi.getter(name="oidcProviderUrl")
    def oidc_provider_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_provider_url")

    @oidc_provider_url.setter
    def oidc_provider_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_provider_url", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)


@pulumi.input_type
class Mk8sStatusAddOnArgs:
    def __init__(__self__, *,
                 aws_ecrs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgs']]]] = None,
                 aws_efs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgs']]]] = None,
                 aws_elbs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgs']]]] = None,
                 aws_workload_identities: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgs']]]] = None,
                 dashboards: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgs']]]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgs']]]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgs']]]] = None):
        Mk8sStatusAddOnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_ecrs=aws_ecrs,
            aws_efs=aws_efs,
            aws_elbs=aws_elbs,
            aws_workload_identities=aws_workload_identities,
            dashboards=dashboards,
            logs=logs,
            metrics=metrics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_ecrs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgs']]]] = None,
             aws_efs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgs']]]] = None,
             aws_elbs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgs']]]] = None,
             aws_workload_identities: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgs']]]] = None,
             dashboards: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgs']]]] = None,
             logs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgs']]]] = None,
             metrics: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsEcrs' in kwargs:
            aws_ecrs = kwargs['awsEcrs']
        if 'awsEfs' in kwargs:
            aws_efs = kwargs['awsEfs']
        if 'awsElbs' in kwargs:
            aws_elbs = kwargs['awsElbs']
        if 'awsWorkloadIdentities' in kwargs:
            aws_workload_identities = kwargs['awsWorkloadIdentities']

        if aws_ecrs is not None:
            _setter("aws_ecrs", aws_ecrs)
        if aws_efs is not None:
            _setter("aws_efs", aws_efs)
        if aws_elbs is not None:
            _setter("aws_elbs", aws_elbs)
        if aws_workload_identities is not None:
            _setter("aws_workload_identities", aws_workload_identities)
        if dashboards is not None:
            _setter("dashboards", dashboards)
        if logs is not None:
            _setter("logs", logs)
        if metrics is not None:
            _setter("metrics", metrics)

    @property
    @pulumi.getter(name="awsEcrs")
    def aws_ecrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgs']]]]:
        return pulumi.get(self, "aws_ecrs")

    @aws_ecrs.setter
    def aws_ecrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEcrArgs']]]]):
        pulumi.set(self, "aws_ecrs", value)

    @property
    @pulumi.getter(name="awsEfs")
    def aws_efs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgs']]]]:
        return pulumi.get(self, "aws_efs")

    @aws_efs.setter
    def aws_efs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsEfArgs']]]]):
        pulumi.set(self, "aws_efs", value)

    @property
    @pulumi.getter(name="awsElbs")
    def aws_elbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgs']]]]:
        return pulumi.get(self, "aws_elbs")

    @aws_elbs.setter
    def aws_elbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsElbArgs']]]]):
        pulumi.set(self, "aws_elbs", value)

    @property
    @pulumi.getter(name="awsWorkloadIdentities")
    def aws_workload_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgs']]]]:
        return pulumi.get(self, "aws_workload_identities")

    @aws_workload_identities.setter
    def aws_workload_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityArgs']]]]):
        pulumi.set(self, "aws_workload_identities", value)

    @property
    @pulumi.getter
    def dashboards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgs']]]]:
        return pulumi.get(self, "dashboards")

    @dashboards.setter
    def dashboards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnDashboardArgs']]]]):
        pulumi.set(self, "dashboards", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgs']]]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnLogArgs']]]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgs']]]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnMetricArgs']]]]):
        pulumi.set(self, "metrics", value)


@pulumi.input_type
class Mk8sStatusAddOnAwsEcrArgs:
    def __init__(__self__, *,
                 trust_policy: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnAwsEcrArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trust_policy=trust_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trust_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'trustPolicy' in kwargs:
            trust_policy = kwargs['trustPolicy']

        if trust_policy is not None:
            _setter("trust_policy", trust_policy)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_policy", value)


@pulumi.input_type
class Mk8sStatusAddOnAwsEfArgs:
    def __init__(__self__, *,
                 trust_policy: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnAwsEfArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trust_policy=trust_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trust_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'trustPolicy' in kwargs:
            trust_policy = kwargs['trustPolicy']

        if trust_policy is not None:
            _setter("trust_policy", trust_policy)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_policy", value)


@pulumi.input_type
class Mk8sStatusAddOnAwsElbArgs:
    def __init__(__self__, *,
                 trust_policy: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnAwsElbArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trust_policy=trust_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trust_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'trustPolicy' in kwargs:
            trust_policy = kwargs['trustPolicy']

        if trust_policy is not None:
            _setter("trust_policy", trust_policy)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_policy", value)


@pulumi.input_type
class Mk8sStatusAddOnAwsWorkloadIdentityArgs:
    def __init__(__self__, *,
                 oidc_provider_configs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs']]]] = None,
                 trust_policy: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnAwsWorkloadIdentityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            oidc_provider_configs=oidc_provider_configs,
            trust_policy=trust_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             oidc_provider_configs: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs']]]] = None,
             trust_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'oidcProviderConfigs' in kwargs:
            oidc_provider_configs = kwargs['oidcProviderConfigs']
        if 'trustPolicy' in kwargs:
            trust_policy = kwargs['trustPolicy']

        if oidc_provider_configs is not None:
            _setter("oidc_provider_configs", oidc_provider_configs)
        if trust_policy is not None:
            _setter("trust_policy", trust_policy)

    @property
    @pulumi.getter(name="oidcProviderConfigs")
    def oidc_provider_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs']]]]:
        return pulumi.get(self, "oidc_provider_configs")

    @oidc_provider_configs.setter
    def oidc_provider_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs']]]]):
        pulumi.set(self, "oidc_provider_configs", value)

    @property
    @pulumi.getter(name="trustPolicy")
    def trust_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_policy")

    @trust_policy.setter
    def trust_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_policy", value)


@pulumi.input_type
class Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs:
    def __init__(__self__, *,
                 audience: Optional[pulumi.Input[str]] = None,
                 provider_url: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audience=audience,
            provider_url=provider_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audience: Optional[pulumi.Input[str]] = None,
             provider_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'providerUrl' in kwargs:
            provider_url = kwargs['providerUrl']

        if audience is not None:
            _setter("audience", audience)
        if provider_url is not None:
            _setter("provider_url", provider_url)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="providerUrl")
    def provider_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider_url")

    @provider_url.setter
    def provider_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_url", value)


@pulumi.input_type
class Mk8sStatusAddOnDashboardArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnDashboardArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class Mk8sStatusAddOnLogArgs:
    def __init__(__self__, *,
                 loki_address: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            loki_address=loki_address,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             loki_address: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lokiAddress' in kwargs:
            loki_address = kwargs['lokiAddress']

        if loki_address is not None:
            _setter("loki_address", loki_address)

    @property
    @pulumi.getter(name="lokiAddress")
    def loki_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "loki_address")

    @loki_address.setter
    def loki_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loki_address", value)


@pulumi.input_type
class Mk8sStatusAddOnMetricArgs:
    def __init__(__self__, *,
                 prometheus_endpoint: Optional[pulumi.Input[str]] = None,
                 remote_write_config: Optional[pulumi.Input[str]] = None):
        Mk8sStatusAddOnMetricArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prometheus_endpoint=prometheus_endpoint,
            remote_write_config=remote_write_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prometheus_endpoint: Optional[pulumi.Input[str]] = None,
             remote_write_config: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'prometheusEndpoint' in kwargs:
            prometheus_endpoint = kwargs['prometheusEndpoint']
        if 'remoteWriteConfig' in kwargs:
            remote_write_config = kwargs['remoteWriteConfig']

        if prometheus_endpoint is not None:
            _setter("prometheus_endpoint", prometheus_endpoint)
        if remote_write_config is not None:
            _setter("remote_write_config", remote_write_config)

    @property
    @pulumi.getter(name="prometheusEndpoint")
    def prometheus_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prometheus_endpoint")

    @prometheus_endpoint.setter
    def prometheus_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prometheus_endpoint", value)

    @property
    @pulumi.getter(name="remoteWriteConfig")
    def remote_write_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_write_config")

    @remote_write_config.setter
    def remote_write_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_write_config", value)


@pulumi.input_type
class Mk8sTritonProviderArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['Mk8sTritonProviderConnectionArgs'],
                 image_id: pulumi.Input[str],
                 location: pulumi.Input[str],
                 networking: pulumi.Input['Mk8sTritonProviderNetworkingArgs'],
                 private_network_id: pulumi.Input[str],
                 autoscaler: Optional[pulumi.Input['Mk8sTritonProviderAutoscalerArgs']] = None,
                 firewall_enabled: Optional[pulumi.Input[bool]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]]] = None,
                 pre_install_script: Optional[pulumi.Input[str]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        Mk8sTritonProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connection=connection,
            image_id=image_id,
            location=location,
            networking=networking,
            private_network_id=private_network_id,
            autoscaler=autoscaler,
            firewall_enabled=firewall_enabled,
            node_pools=node_pools,
            pre_install_script=pre_install_script,
            ssh_keys=ssh_keys,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connection: pulumi.Input['Mk8sTritonProviderConnectionArgs'],
             image_id: pulumi.Input[str],
             location: pulumi.Input[str],
             networking: pulumi.Input['Mk8sTritonProviderNetworkingArgs'],
             private_network_id: pulumi.Input[str],
             autoscaler: Optional[pulumi.Input['Mk8sTritonProviderAutoscalerArgs']] = None,
             firewall_enabled: Optional[pulumi.Input[bool]] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]]] = None,
             pre_install_script: Optional[pulumi.Input[str]] = None,
             ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'imageId' in kwargs:
            image_id = kwargs['imageId']
        if 'privateNetworkId' in kwargs:
            private_network_id = kwargs['privateNetworkId']
        if 'firewallEnabled' in kwargs:
            firewall_enabled = kwargs['firewallEnabled']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'preInstallScript' in kwargs:
            pre_install_script = kwargs['preInstallScript']
        if 'sshKeys' in kwargs:
            ssh_keys = kwargs['sshKeys']

        _setter("connection", connection)
        _setter("image_id", image_id)
        _setter("location", location)
        _setter("networking", networking)
        _setter("private_network_id", private_network_id)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if firewall_enabled is not None:
            _setter("firewall_enabled", firewall_enabled)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if pre_install_script is not None:
            _setter("pre_install_script", pre_install_script)
        if ssh_keys is not None:
            _setter("ssh_keys", ssh_keys)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['Mk8sTritonProviderConnectionArgs']:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['Mk8sTritonProviderConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Input['Mk8sTritonProviderNetworkingArgs']:
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: pulumi.Input['Mk8sTritonProviderNetworkingArgs']):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter(name="privateNetworkId")
    def private_network_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_network_id")

    @private_network_id.setter
    def private_network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_network_id", value)

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional[pulumi.Input['Mk8sTritonProviderAutoscalerArgs']]:
        return pulumi.get(self, "autoscaler")

    @autoscaler.setter
    def autoscaler(self, value: Optional[pulumi.Input['Mk8sTritonProviderAutoscalerArgs']]):
        pulumi.set(self, "autoscaler", value)

    @property
    @pulumi.getter(name="firewallEnabled")
    def firewall_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "firewall_enabled")

    @firewall_enabled.setter
    def firewall_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "firewall_enabled", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]]]:
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="preInstallScript")
    def pre_install_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_install_script")

    @pre_install_script.setter
    def pre_install_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_install_script", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)


@pulumi.input_type
class Mk8sTritonProviderAutoscalerArgs:
    def __init__(__self__, *,
                 expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 unneeded_time: Optional[pulumi.Input[str]] = None,
                 unready_time: Optional[pulumi.Input[str]] = None,
                 utilization_threshold: Optional[pulumi.Input[float]] = None):
        Mk8sTritonProviderAutoscalerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expanders=expanders,
            unneeded_time=unneeded_time,
            unready_time=unready_time,
            utilization_threshold=utilization_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expanders: pulumi.Input[Sequence[pulumi.Input[str]]],
             unneeded_time: Optional[pulumi.Input[str]] = None,
             unready_time: Optional[pulumi.Input[str]] = None,
             utilization_threshold: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'unneededTime' in kwargs:
            unneeded_time = kwargs['unneededTime']
        if 'unreadyTime' in kwargs:
            unready_time = kwargs['unreadyTime']
        if 'utilizationThreshold' in kwargs:
            utilization_threshold = kwargs['utilizationThreshold']

        _setter("expanders", expanders)
        if unneeded_time is not None:
            _setter("unneeded_time", unneeded_time)
        if unready_time is not None:
            _setter("unready_time", unready_time)
        if utilization_threshold is not None:
            _setter("utilization_threshold", utilization_threshold)

    @property
    @pulumi.getter
    def expanders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "expanders")

    @expanders.setter
    def expanders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expanders", value)

    @property
    @pulumi.getter(name="unneededTime")
    def unneeded_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unneeded_time")

    @unneeded_time.setter
    def unneeded_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unneeded_time", value)

    @property
    @pulumi.getter(name="unreadyTime")
    def unready_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unready_time")

    @unready_time.setter
    def unready_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unready_time", value)

    @property
    @pulumi.getter(name="utilizationThreshold")
    def utilization_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "utilization_threshold")

    @utilization_threshold.setter
    def utilization_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "utilization_threshold", value)


@pulumi.input_type
class Mk8sTritonProviderConnectionArgs:
    def __init__(__self__, *,
                 account: pulumi.Input[str],
                 private_key_secret_link: pulumi.Input[str],
                 url: pulumi.Input[str],
                 user: Optional[pulumi.Input[str]] = None):
        Mk8sTritonProviderConnectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account=account,
            private_key_secret_link=private_key_secret_link,
            url=url,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account: pulumi.Input[str],
             private_key_secret_link: pulumi.Input[str],
             url: pulumi.Input[str],
             user: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'privateKeySecretLink' in kwargs:
            private_key_secret_link = kwargs['privateKeySecretLink']

        _setter("account", account)
        _setter("private_key_secret_link", private_key_secret_link)
        _setter("url", url)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[str]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="privateKeySecretLink")
    def private_key_secret_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key_secret_link")

    @private_key_secret_link.setter
    def private_key_secret_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key_secret_link", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class Mk8sTritonProviderNetworkingArgs:
    def __init__(__self__, *,
                 pod_network: Optional[pulumi.Input[str]] = None,
                 service_network: Optional[pulumi.Input[str]] = None):
        Mk8sTritonProviderNetworkingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pod_network=pod_network,
            service_network=service_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pod_network: Optional[pulumi.Input[str]] = None,
             service_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'podNetwork' in kwargs:
            pod_network = kwargs['podNetwork']
        if 'serviceNetwork' in kwargs:
            service_network = kwargs['serviceNetwork']

        if pod_network is not None:
            _setter("pod_network", pod_network)
        if service_network is not None:
            _setter("service_network", service_network)

    @property
    @pulumi.getter(name="podNetwork")
    def pod_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_network")

    @pod_network.setter
    def pod_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_network", value)

    @property
    @pulumi.getter(name="serviceNetwork")
    def service_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_network")

    @service_network.setter
    def service_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_network", value)


@pulumi.input_type
class Mk8sTritonProviderNodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 package_id: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 override_image_id: Optional[pulumi.Input[str]] = None,
                 private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_network_id: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]]] = None,
                 triton_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        Mk8sTritonProviderNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            package_id=package_id,
            labels=labels,
            max_size=max_size,
            min_size=min_size,
            override_image_id=override_image_id,
            private_network_ids=private_network_ids,
            public_network_id=public_network_id,
            taints=taints,
            triton_tags=triton_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             package_id: pulumi.Input[str],
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             override_image_id: Optional[pulumi.Input[str]] = None,
             private_network_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             public_network_id: Optional[pulumi.Input[str]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]]] = None,
             triton_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'packageId' in kwargs:
            package_id = kwargs['packageId']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']
        if 'overrideImageId' in kwargs:
            override_image_id = kwargs['overrideImageId']
        if 'privateNetworkIds' in kwargs:
            private_network_ids = kwargs['privateNetworkIds']
        if 'publicNetworkId' in kwargs:
            public_network_id = kwargs['publicNetworkId']
        if 'tritonTags' in kwargs:
            triton_tags = kwargs['tritonTags']

        _setter("name", name)
        _setter("package_id", package_id)
        if labels is not None:
            _setter("labels", labels)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if override_image_id is not None:
            _setter("override_image_id", override_image_id)
        if private_network_ids is not None:
            _setter("private_network_ids", private_network_ids)
        if public_network_id is not None:
            _setter("public_network_id", public_network_id)
        if taints is not None:
            _setter("taints", taints)
        if triton_tags is not None:
            _setter("triton_tags", triton_tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "package_id")

    @package_id.setter
    def package_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="overrideImageId")
    def override_image_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_image_id")

    @override_image_id.setter
    def override_image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_image_id", value)

    @property
    @pulumi.getter(name="privateNetworkIds")
    def private_network_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_network_ids")

    @private_network_ids.setter
    def private_network_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_network_ids", value)

    @property
    @pulumi.getter(name="publicNetworkId")
    def public_network_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_network_id")

    @public_network_id.setter
    def public_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_network_id", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]]]:
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Mk8sTritonProviderNodePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="tritonTags")
    def triton_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "triton_tags")

    @triton_tags.setter
    def triton_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "triton_tags", value)


@pulumi.input_type
class Mk8sTritonProviderNodePoolTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        Mk8sTritonProviderNodePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if effect is not None:
            _setter("effect", effect)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OrgAuthConfigArgs:
    def __init__(__self__, *,
                 domain_auto_members: pulumi.Input[Sequence[pulumi.Input[str]]],
                 saml_only: Optional[pulumi.Input[bool]] = None):
        OrgAuthConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain_auto_members=domain_auto_members,
            saml_only=saml_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain_auto_members: pulumi.Input[Sequence[pulumi.Input[str]]],
             saml_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'domainAutoMembers' in kwargs:
            domain_auto_members = kwargs['domainAutoMembers']
        if 'samlOnly' in kwargs:
            saml_only = kwargs['samlOnly']

        _setter("domain_auto_members", domain_auto_members)
        if saml_only is not None:
            _setter("saml_only", saml_only)

    @property
    @pulumi.getter(name="domainAutoMembers")
    def domain_auto_members(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "domain_auto_members")

    @domain_auto_members.setter
    def domain_auto_members(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "domain_auto_members", value)

    @property
    @pulumi.getter(name="samlOnly")
    def saml_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "saml_only")

    @saml_only.setter
    def saml_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_only", value)


@pulumi.input_type
class OrgLoggingCloudWatchLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 group_name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 stream_name: pulumi.Input[str],
                 extract_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 retention_days: Optional[pulumi.Input[int]] = None):
        OrgLoggingCloudWatchLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credentials=credentials,
            group_name=group_name,
            region=region,
            stream_name=stream_name,
            extract_fields=extract_fields,
            retention_days=retention_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credentials: pulumi.Input[str],
             group_name: pulumi.Input[str],
             region: pulumi.Input[str],
             stream_name: pulumi.Input[str],
             extract_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             retention_days: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'streamName' in kwargs:
            stream_name = kwargs['streamName']
        if 'extractFields' in kwargs:
            extract_fields = kwargs['extractFields']
        if 'retentionDays' in kwargs:
            retention_days = kwargs['retentionDays']

        _setter("credentials", credentials)
        _setter("group_name", group_name)
        _setter("region", region)
        _setter("stream_name", stream_name)
        if extract_fields is not None:
            _setter("extract_fields", extract_fields)
        if retention_days is not None:
            _setter("retention_days", retention_days)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="extractFields")
    def extract_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extract_fields")

    @extract_fields.setter
    def extract_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extract_fields", value)

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retention_days")

    @retention_days.setter
    def retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_days", value)


@pulumi.input_type
class OrgLoggingCoralogixLoggingArgs:
    def __init__(__self__, *,
                 app: pulumi.Input[str],
                 cluster: pulumi.Input[str],
                 credentials: pulumi.Input[str],
                 subsystem: pulumi.Input[str]):
        OrgLoggingCoralogixLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            cluster=cluster,
            credentials=credentials,
            subsystem=subsystem,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: pulumi.Input[str],
             cluster: pulumi.Input[str],
             credentials: pulumi.Input[str],
             subsystem: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("app", app)
        _setter("cluster", cluster)
        _setter("credentials", credentials)
        _setter("subsystem", subsystem)

    @property
    @pulumi.getter
    def app(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: pulumi.Input[str]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def subsystem(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subsystem")

    @subsystem.setter
    def subsystem(self, value: pulumi.Input[str]):
        pulumi.set(self, "subsystem", value)


@pulumi.input_type
class OrgLoggingDatadogLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 host: pulumi.Input[str]):
        OrgLoggingDatadogLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credentials=credentials,
            host=host,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credentials: pulumi.Input[str],
             host: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("credentials", credentials)
        _setter("host", host)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class OrgLoggingElasticLoggingArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 aws: Optional[pulumi.Input['OrgLoggingElasticLoggingAwsArgs']] = None,
                 elastic_cloud: Optional[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs']] = None,
                 generic: Optional[pulumi.Input['OrgLoggingElasticLoggingGenericArgs']] = None):
        OrgLoggingElasticLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            aws=aws,
            elastic_cloud=elastic_cloud,
            generic=generic,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             aws: Optional[pulumi.Input['OrgLoggingElasticLoggingAwsArgs']] = None,
             elastic_cloud: Optional[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs']] = None,
             generic: Optional[pulumi.Input['OrgLoggingElasticLoggingGenericArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'elasticCloud' in kwargs:
            elastic_cloud = kwargs['elasticCloud']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if aws is not None:
            _setter("aws", aws)
        if elastic_cloud is not None:
            _setter("elastic_cloud", elastic_cloud)
        if generic is not None:
            _setter("generic", generic)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['OrgLoggingElasticLoggingAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['OrgLoggingElasticLoggingAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="elasticCloud")
    def elastic_cloud(self) -> Optional[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs']]:
        return pulumi.get(self, "elastic_cloud")

    @elastic_cloud.setter
    def elastic_cloud(self, value: Optional[pulumi.Input['OrgLoggingElasticLoggingElasticCloudArgs']]):
        pulumi.set(self, "elastic_cloud", value)

    @property
    @pulumi.getter
    def generic(self) -> Optional[pulumi.Input['OrgLoggingElasticLoggingGenericArgs']]:
        return pulumi.get(self, "generic")

    @generic.setter
    def generic(self, value: Optional[pulumi.Input['OrgLoggingElasticLoggingGenericArgs']]):
        pulumi.set(self, "generic", value)


@pulumi.input_type
class OrgLoggingElasticLoggingAwsArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 host: pulumi.Input[str],
                 index: pulumi.Input[str],
                 port: pulumi.Input[int],
                 region: pulumi.Input[str],
                 type: pulumi.Input[str]):
        OrgLoggingElasticLoggingAwsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credentials=credentials,
            host=host,
            index=index,
            port=port,
            region=region,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credentials: pulumi.Input[str],
             host: pulumi.Input[str],
             index: pulumi.Input[str],
             port: pulumi.Input[int],
             region: pulumi.Input[str],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("credentials", credentials)
        _setter("host", host)
        _setter("index", index)
        _setter("port", port)
        _setter("region", region)
        _setter("type", type)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class OrgLoggingElasticLoggingElasticCloudArgs:
    def __init__(__self__, *,
                 cloud_id: pulumi.Input[str],
                 credentials: pulumi.Input[str],
                 index: pulumi.Input[str],
                 type: pulumi.Input[str]):
        OrgLoggingElasticLoggingElasticCloudArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_id=cloud_id,
            credentials=credentials,
            index=index,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_id: pulumi.Input[str],
             credentials: pulumi.Input[str],
             index: pulumi.Input[str],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudId' in kwargs:
            cloud_id = kwargs['cloudId']

        _setter("cloud_id", cloud_id)
        _setter("credentials", credentials)
        _setter("index", index)
        _setter("type", type)

    @property
    @pulumi.getter(name="cloudId")
    def cloud_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cloud_id")

    @cloud_id.setter
    def cloud_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_id", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class OrgLoggingElasticLoggingGenericArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 host: pulumi.Input[str],
                 index: pulumi.Input[str],
                 path: pulumi.Input[str],
                 port: pulumi.Input[int],
                 type: pulumi.Input[str]):
        OrgLoggingElasticLoggingGenericArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credentials=credentials,
            host=host,
            index=index,
            path=path,
            port=port,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credentials: pulumi.Input[str],
             host: pulumi.Input[str],
             index: pulumi.Input[str],
             path: pulumi.Input[str],
             port: pulumi.Input[int],
             type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("credentials", credentials)
        _setter("host", host)
        _setter("index", index)
        _setter("path", path)
        _setter("port", port)
        _setter("type", type)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class OrgLoggingFluentdLoggingArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: Optional[pulumi.Input[int]] = None):
        OrgLoggingFluentdLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: pulumi.Input[str],
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("host", host)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class OrgLoggingLogzioLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 listener_host: pulumi.Input[str]):
        OrgLoggingLogzioLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credentials=credentials,
            listener_host=listener_host,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credentials: pulumi.Input[str],
             listener_host: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'listenerHost' in kwargs:
            listener_host = kwargs['listenerHost']

        _setter("credentials", credentials)
        _setter("listener_host", listener_host)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="listenerHost")
    def listener_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "listener_host")

    @listener_host.setter
    def listener_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_host", value)


@pulumi.input_type
class OrgLoggingS3LoggingArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 credentials: pulumi.Input[str],
                 region: pulumi.Input[str],
                 prefix: Optional[pulumi.Input[str]] = None):
        OrgLoggingS3LoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            credentials=credentials,
            region=region,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             credentials: pulumi.Input[str],
             region: pulumi.Input[str],
             prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("bucket", bucket)
        _setter("credentials", credentials)
        _setter("region", region)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class OrgLoggingStackdriverLoggingArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 location: pulumi.Input[str]):
        OrgLoggingStackdriverLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            credentials=credentials,
            location=location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             credentials: pulumi.Input[str],
             location: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("credentials", credentials)
        _setter("location", location)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)


@pulumi.input_type
class OrgLoggingSyslogLoggingArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 format: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[int]] = None):
        OrgLoggingSyslogLoggingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            port=port,
            format=format,
            mode=mode,
            severity=severity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: pulumi.Input[str],
             port: pulumi.Input[int],
             format: Optional[pulumi.Input[str]] = None,
             mode: Optional[pulumi.Input[str]] = None,
             severity: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("host", host)
        _setter("port", port)
        if format is not None:
            _setter("format", format)
        if mode is not None:
            _setter("mode", mode)
        if severity is not None:
            _setter("severity", severity)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class OrgObservabilityArgs:
    def __init__(__self__, *,
                 logs_retention_days: Optional[pulumi.Input[int]] = None,
                 metrics_retention_days: Optional[pulumi.Input[int]] = None,
                 traces_retention_days: Optional[pulumi.Input[int]] = None):
        OrgObservabilityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            logs_retention_days=logs_retention_days,
            metrics_retention_days=metrics_retention_days,
            traces_retention_days=traces_retention_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             logs_retention_days: Optional[pulumi.Input[int]] = None,
             metrics_retention_days: Optional[pulumi.Input[int]] = None,
             traces_retention_days: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'logsRetentionDays' in kwargs:
            logs_retention_days = kwargs['logsRetentionDays']
        if 'metricsRetentionDays' in kwargs:
            metrics_retention_days = kwargs['metricsRetentionDays']
        if 'tracesRetentionDays' in kwargs:
            traces_retention_days = kwargs['tracesRetentionDays']

        if logs_retention_days is not None:
            _setter("logs_retention_days", logs_retention_days)
        if metrics_retention_days is not None:
            _setter("metrics_retention_days", metrics_retention_days)
        if traces_retention_days is not None:
            _setter("traces_retention_days", traces_retention_days)

    @property
    @pulumi.getter(name="logsRetentionDays")
    def logs_retention_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logs_retention_days")

    @logs_retention_days.setter
    def logs_retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logs_retention_days", value)

    @property
    @pulumi.getter(name="metricsRetentionDays")
    def metrics_retention_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metrics_retention_days")

    @metrics_retention_days.setter
    def metrics_retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metrics_retention_days", value)

    @property
    @pulumi.getter(name="tracesRetentionDays")
    def traces_retention_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "traces_retention_days")

    @traces_retention_days.setter
    def traces_retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "traces_retention_days", value)


@pulumi.input_type
class OrgSecurityArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 threat_detection: Optional[pulumi.Input['OrgSecurityThreatDetectionArgs']] = None):
        OrgSecurityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            threat_detection=threat_detection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             threat_detection: Optional[pulumi.Input['OrgSecurityThreatDetectionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'threatDetection' in kwargs:
            threat_detection = kwargs['threatDetection']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if threat_detection is not None:
            _setter("threat_detection", threat_detection)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="threatDetection")
    def threat_detection(self) -> Optional[pulumi.Input['OrgSecurityThreatDetectionArgs']]:
        return pulumi.get(self, "threat_detection")

    @threat_detection.setter
    def threat_detection(self, value: Optional[pulumi.Input['OrgSecurityThreatDetectionArgs']]):
        pulumi.set(self, "threat_detection", value)


@pulumi.input_type
class OrgSecurityThreatDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 minimum_severity: Optional[pulumi.Input[str]] = None,
                 syslog: Optional[pulumi.Input['OrgSecurityThreatDetectionSyslogArgs']] = None):
        OrgSecurityThreatDetectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            minimum_severity=minimum_severity,
            syslog=syslog,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             minimum_severity: Optional[pulumi.Input[str]] = None,
             syslog: Optional[pulumi.Input['OrgSecurityThreatDetectionSyslogArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'minimumSeverity' in kwargs:
            minimum_severity = kwargs['minimumSeverity']

        _setter("enabled", enabled)
        if minimum_severity is not None:
            _setter("minimum_severity", minimum_severity)
        if syslog is not None:
            _setter("syslog", syslog)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="minimumSeverity")
    def minimum_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "minimum_severity")

    @minimum_severity.setter
    def minimum_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum_severity", value)

    @property
    @pulumi.getter
    def syslog(self) -> Optional[pulumi.Input['OrgSecurityThreatDetectionSyslogArgs']]:
        return pulumi.get(self, "syslog")

    @syslog.setter
    def syslog(self, value: Optional[pulumi.Input['OrgSecurityThreatDetectionSyslogArgs']]):
        pulumi.set(self, "syslog", value)


@pulumi.input_type
class OrgSecurityThreatDetectionSyslogArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 transport: Optional[pulumi.Input[str]] = None):
        OrgSecurityThreatDetectionSyslogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            port=port,
            transport=transport,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: pulumi.Input[str],
             port: pulumi.Input[int],
             transport: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("host", host)
        _setter("port", port)
        if transport is not None:
            _setter("transport", transport)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)


@pulumi.input_type
class OrgStatusArgs:
    def __init__(__self__, *,
                 account_link: Optional[pulumi.Input[str]] = None,
                 active: Optional[pulumi.Input[bool]] = None):
        OrgStatusArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_link=account_link,
            active=active,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_link: Optional[pulumi.Input[str]] = None,
             active: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accountLink' in kwargs:
            account_link = kwargs['accountLink']

        if account_link is not None:
            _setter("account_link", account_link)
        if active is not None:
            _setter("active", active)

    @property
    @pulumi.getter(name="accountLink")
    def account_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_link")

    @account_link.setter
    def account_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_link", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)


@pulumi.input_type
class OrgTracingControlplaneTracingArgs:
    def __init__(__self__, *,
                 sampling: pulumi.Input[float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        OrgTracingControlplaneTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sampling=sampling,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sampling: pulumi.Input[float],
             custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("sampling", sampling)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class OrgTracingLightstepTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 sampling: pulumi.Input[float],
                 credentials: Optional[pulumi.Input[str]] = None,
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        OrgTracingLightstepTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            sampling=sampling,
            credentials=credentials,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: pulumi.Input[str],
             sampling: pulumi.Input[float],
             credentials: Optional[pulumi.Input[str]] = None,
             custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("endpoint", endpoint)
        _setter("sampling", sampling)
        if credentials is not None:
            _setter("credentials", credentials)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class OrgTracingOtelTracingArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 sampling: pulumi.Input[float],
                 custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        OrgTracingOtelTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            sampling=sampling,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: pulumi.Input[str],
             sampling: pulumi.Input[float],
             custom_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("endpoint", endpoint)
        _setter("sampling", sampling)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Input[float]:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: pulumi.Input[float]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class PolicyBindingArgs:
    def __init__(__self__, *,
                 permissions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal_links: pulumi.Input[Sequence[pulumi.Input[str]]]):
        PolicyBindingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            permissions=permissions,
            principal_links=principal_links,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             permissions: pulumi.Input[Sequence[pulumi.Input[str]]],
             principal_links: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'principalLinks' in kwargs:
            principal_links = kwargs['principalLinks']

        _setter("permissions", permissions)
        _setter("principal_links", principal_links)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="principalLinks")
    def principal_links(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "principal_links")

    @principal_links.setter
    def principal_links(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "principal_links", value)


@pulumi.input_type
class PolicyTargetQueryArgs:
    def __init__(__self__, *,
                 fetch: Optional[pulumi.Input[str]] = None,
                 spec: Optional[pulumi.Input['PolicyTargetQuerySpecArgs']] = None):
        PolicyTargetQueryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch=fetch,
            spec=spec,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch: Optional[pulumi.Input[str]] = None,
             spec: Optional[pulumi.Input['PolicyTargetQuerySpecArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if fetch is not None:
            _setter("fetch", fetch)
        if spec is not None:
            _setter("spec", spec)

    @property
    @pulumi.getter
    def fetch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fetch")

    @fetch.setter
    def fetch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fetch", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['PolicyTargetQuerySpecArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['PolicyTargetQuerySpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class PolicyTargetQuerySpecArgs:
    def __init__(__self__, *,
                 match: Optional[pulumi.Input[str]] = None,
                 terms: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]]] = None):
        PolicyTargetQuerySpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match=match,
            terms=terms,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match: Optional[pulumi.Input[str]] = None,
             terms: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if match is not None:
            _setter("match", match)
        if terms is not None:
            _setter("terms", terms)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]]]:
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyTargetQuerySpecTermArgs']]]]):
        pulumi.set(self, "terms", value)


@pulumi.input_type
class PolicyTargetQuerySpecTermArgs:
    def __init__(__self__, *,
                 op: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None,
                 rel: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        PolicyTargetQuerySpecTermArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            op=op,
            property=property,
            rel=rel,
            tag=tag,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             op: Optional[pulumi.Input[str]] = None,
             property: Optional[pulumi.Input[str]] = None,
             rel: Optional[pulumi.Input[str]] = None,
             tag: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if op is not None:
            _setter("op", op)
        if property is not None:
            _setter("property", property)
        if rel is not None:
            _setter("rel", rel)
        if tag is not None:
            _setter("tag", tag)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def rel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class SecretAwsArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        SecretAwsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            secret_key=secret_key,
            external_id=external_id,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             secret_key: pulumi.Input[str],
             external_id: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        _setter("access_key", access_key)
        _setter("secret_key", secret_key)
        if external_id is not None:
            _setter("external_id", external_id)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class SecretAzureConnectorArgs:
    def __init__(__self__, *,
                 code: pulumi.Input[str],
                 url: pulumi.Input[str]):
        SecretAzureConnectorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: pulumi.Input[str],
             url: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("code", code)
        _setter("url", url)

    @property
    @pulumi.getter
    def code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[str]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SecretEcrArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 repos: pulumi.Input[Sequence[pulumi.Input[str]]],
                 secret_key: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        SecretEcrArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            repos=repos,
            secret_key=secret_key,
            external_id=external_id,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             repos: pulumi.Input[Sequence[pulumi.Input[str]]],
             secret_key: pulumi.Input[str],
             external_id: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        _setter("access_key", access_key)
        _setter("repos", repos)
        _setter("secret_key", secret_key)
        if external_id is not None:
            _setter("external_id", external_id)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def repos(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "repos")

    @repos.setter
    def repos(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "repos", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class SecretKeypairArgs:
    def __init__(__self__, *,
                 secret_key: pulumi.Input[str],
                 passphrase: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None):
        SecretKeypairArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_key=secret_key,
            passphrase=passphrase,
            public_key=public_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_key: pulumi.Input[str],
             passphrase: Optional[pulumi.Input[str]] = None,
             public_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'publicKey' in kwargs:
            public_key = kwargs['publicKey']

        _setter("secret_key", secret_key)
        if passphrase is not None:
            _setter("passphrase", passphrase)
        if public_key is not None:
            _setter("public_key", public_key)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class SecretNatsAccountArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 private_key: pulumi.Input[str]):
        SecretNatsAccountArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_id=account_id,
            private_key=private_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_id: pulumi.Input[str],
             private_key: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accountId' in kwargs:
            account_id = kwargs['accountId']
        if 'privateKey' in kwargs:
            private_key = kwargs['privateKey']

        _setter("account_id", account_id)
        _setter("private_key", private_key)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class SecretOpaqueArgs:
    def __init__(__self__, *,
                 payload: pulumi.Input[str],
                 encoding: Optional[pulumi.Input[str]] = None):
        SecretOpaqueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            payload=payload,
            encoding=encoding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             payload: pulumi.Input[str],
             encoding: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("payload", payload)
        if encoding is not None:
            _setter("encoding", encoding)

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Input[str]:
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: pulumi.Input[str]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)


@pulumi.input_type
class SecretTlsArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input[str],
                 key: pulumi.Input[str],
                 chain: Optional[pulumi.Input[str]] = None):
        SecretTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cert=cert,
            key=key,
            chain=chain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cert: pulumi.Input[str],
             key: pulumi.Input[str],
             chain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("cert", cert)
        _setter("key", key)
        if chain is not None:
            _setter("chain", chain)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def chain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chain")

    @chain.setter
    def chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chain", value)


@pulumi.input_type
class SecretUserpassArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 encoding: Optional[pulumi.Input[str]] = None):
        SecretUserpassArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
            encoding=encoding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             username: pulumi.Input[str],
             encoding: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)
        if encoding is not None:
            _setter("encoding", encoding)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)


@pulumi.input_type
class VolumeSetAutoscalingArgs:
    def __init__(__self__, *,
                 max_capacity: Optional[pulumi.Input[int]] = None,
                 min_free_percentage: Optional[pulumi.Input[int]] = None,
                 scaling_factor: Optional[pulumi.Input[float]] = None):
        VolumeSetAutoscalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_capacity=max_capacity,
            min_free_percentage=min_free_percentage,
            scaling_factor=scaling_factor,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_capacity: Optional[pulumi.Input[int]] = None,
             min_free_percentage: Optional[pulumi.Input[int]] = None,
             scaling_factor: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxCapacity' in kwargs:
            max_capacity = kwargs['maxCapacity']
        if 'minFreePercentage' in kwargs:
            min_free_percentage = kwargs['minFreePercentage']
        if 'scalingFactor' in kwargs:
            scaling_factor = kwargs['scalingFactor']

        if max_capacity is not None:
            _setter("max_capacity", max_capacity)
        if min_free_percentage is not None:
            _setter("min_free_percentage", min_free_percentage)
        if scaling_factor is not None:
            _setter("scaling_factor", scaling_factor)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_capacity", value)

    @property
    @pulumi.getter(name="minFreePercentage")
    def min_free_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_free_percentage")

    @min_free_percentage.setter
    def min_free_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_free_percentage", value)

    @property
    @pulumi.getter(name="scalingFactor")
    def scaling_factor(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "scaling_factor")

    @scaling_factor.setter
    def scaling_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scaling_factor", value)


@pulumi.input_type
class VolumeSetSnapshotsArgs:
    def __init__(__self__, *,
                 create_final_snapshot: Optional[pulumi.Input[bool]] = None,
                 retention_duration: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None):
        VolumeSetSnapshotsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_final_snapshot=create_final_snapshot,
            retention_duration=retention_duration,
            schedule=schedule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_final_snapshot: Optional[pulumi.Input[bool]] = None,
             retention_duration: Optional[pulumi.Input[str]] = None,
             schedule: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createFinalSnapshot' in kwargs:
            create_final_snapshot = kwargs['createFinalSnapshot']
        if 'retentionDuration' in kwargs:
            retention_duration = kwargs['retentionDuration']

        if create_final_snapshot is not None:
            _setter("create_final_snapshot", create_final_snapshot)
        if retention_duration is not None:
            _setter("retention_duration", retention_duration)
        if schedule is not None:
            _setter("schedule", schedule)

    @property
    @pulumi.getter(name="createFinalSnapshot")
    def create_final_snapshot(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_final_snapshot")

    @create_final_snapshot.setter
    def create_final_snapshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_final_snapshot", value)

    @property
    @pulumi.getter(name="retentionDuration")
    def retention_duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retention_duration")

    @retention_duration.setter
    def retention_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention_duration", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)


@pulumi.input_type
class VolumeSetStatusArgs:
    def __init__(__self__, *,
                 binding_id: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 used_by_workload: Optional[pulumi.Input[str]] = None):
        VolumeSetStatusArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            binding_id=binding_id,
            locations=locations,
            parent_id=parent_id,
            used_by_workload=used_by_workload,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             binding_id: Optional[pulumi.Input[str]] = None,
             locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             parent_id: Optional[pulumi.Input[str]] = None,
             used_by_workload: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bindingId' in kwargs:
            binding_id = kwargs['bindingId']
        if 'parentId' in kwargs:
            parent_id = kwargs['parentId']
        if 'usedByWorkload' in kwargs:
            used_by_workload = kwargs['usedByWorkload']

        if binding_id is not None:
            _setter("binding_id", binding_id)
        if locations is not None:
            _setter("locations", locations)
        if parent_id is not None:
            _setter("parent_id", parent_id)
        if used_by_workload is not None:
            _setter("used_by_workload", used_by_workload)

    @property
    @pulumi.getter(name="bindingId")
    def binding_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "binding_id")

    @binding_id.setter
    def binding_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binding_id", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="usedByWorkload")
    def used_by_workload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "used_by_workload")

    @used_by_workload.setter
    def used_by_workload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "used_by_workload", value)


@pulumi.input_type
class WorkloadContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 gpu_nvidia: Optional[pulumi.Input['WorkloadContainerGpuNvidiaArgs']] = None,
                 inherit_env: Optional[pulumi.Input[bool]] = None,
                 lifecycle: Optional[pulumi.Input['WorkloadContainerLifecycleArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']] = None,
                 memory: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input['WorkloadContainerMetricsArgs']] = None,
                 min_cpu: Optional[pulumi.Input[str]] = None,
                 min_memory: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        WorkloadContainerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image=image,
            name=name,
            args=args,
            command=command,
            cpu=cpu,
            env=env,
            gpu_nvidia=gpu_nvidia,
            inherit_env=inherit_env,
            lifecycle=lifecycle,
            liveness_probe=liveness_probe,
            memory=memory,
            metrics=metrics,
            min_cpu=min_cpu,
            min_memory=min_memory,
            port=port,
            ports=ports,
            readiness_probe=readiness_probe,
            volumes=volumes,
            working_directory=working_directory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image: pulumi.Input[str],
             name: pulumi.Input[str],
             args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             command: Optional[pulumi.Input[str]] = None,
             cpu: Optional[pulumi.Input[str]] = None,
             env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             gpu_nvidia: Optional[pulumi.Input['WorkloadContainerGpuNvidiaArgs']] = None,
             inherit_env: Optional[pulumi.Input[bool]] = None,
             lifecycle: Optional[pulumi.Input['WorkloadContainerLifecycleArgs']] = None,
             liveness_probe: Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']] = None,
             memory: Optional[pulumi.Input[str]] = None,
             metrics: Optional[pulumi.Input['WorkloadContainerMetricsArgs']] = None,
             min_cpu: Optional[pulumi.Input[str]] = None,
             min_memory: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]] = None,
             readiness_probe: Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']] = None,
             volumes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]]] = None,
             working_directory: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'gpuNvidia' in kwargs:
            gpu_nvidia = kwargs['gpuNvidia']
        if 'inheritEnv' in kwargs:
            inherit_env = kwargs['inheritEnv']
        if 'livenessProbe' in kwargs:
            liveness_probe = kwargs['livenessProbe']
        if 'minCpu' in kwargs:
            min_cpu = kwargs['minCpu']
        if 'minMemory' in kwargs:
            min_memory = kwargs['minMemory']
        if 'readinessProbe' in kwargs:
            readiness_probe = kwargs['readinessProbe']
        if 'workingDirectory' in kwargs:
            working_directory = kwargs['workingDirectory']

        _setter("image", image)
        _setter("name", name)
        if args is not None:
            _setter("args", args)
        if command is not None:
            _setter("command", command)
        if cpu is not None:
            _setter("cpu", cpu)
        if env is not None:
            _setter("env", env)
        if gpu_nvidia is not None:
            _setter("gpu_nvidia", gpu_nvidia)
        if inherit_env is not None:
            _setter("inherit_env", inherit_env)
        if lifecycle is not None:
            _setter("lifecycle", lifecycle)
        if liveness_probe is not None:
            _setter("liveness_probe", liveness_probe)
        if memory is not None:
            _setter("memory", memory)
        if metrics is not None:
            _setter("metrics", metrics)
        if min_cpu is not None:
            _setter("min_cpu", min_cpu)
        if min_memory is not None:
            _setter("min_memory", min_memory)
        if port is not None:
            warnings.warn("""The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""", DeprecationWarning)
            pulumi.log.warn("""port is deprecated: The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""")
        if port is not None:
            _setter("port", port)
        if ports is not None:
            _setter("ports", ports)
        if readiness_probe is not None:
            _setter("readiness_probe", readiness_probe)
        if volumes is not None:
            _setter("volumes", volumes)
        if working_directory is not None:
            _setter("working_directory", working_directory)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="gpuNvidia")
    def gpu_nvidia(self) -> Optional[pulumi.Input['WorkloadContainerGpuNvidiaArgs']]:
        return pulumi.get(self, "gpu_nvidia")

    @gpu_nvidia.setter
    def gpu_nvidia(self, value: Optional[pulumi.Input['WorkloadContainerGpuNvidiaArgs']]):
        pulumi.set(self, "gpu_nvidia", value)

    @property
    @pulumi.getter(name="inheritEnv")
    def inherit_env(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inherit_env")

    @inherit_env.setter
    def inherit_env(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_env", value)

    @property
    @pulumi.getter
    def lifecycle(self) -> Optional[pulumi.Input['WorkloadContainerLifecycleArgs']]:
        return pulumi.get(self, "lifecycle")

    @lifecycle.setter
    def lifecycle(self, value: Optional[pulumi.Input['WorkloadContainerLifecycleArgs']]):
        pulumi.set(self, "lifecycle", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input['WorkloadContainerMetricsArgs']]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input['WorkloadContainerMetricsArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_cpu")

    @min_cpu.setter
    def min_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_cpu", value)

    @property
    @pulumi.getter(name="minMemory")
    def min_memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min_memory")

    @min_memory.setter
    def min_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_memory", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        warnings.warn("""The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""", DeprecationWarning)
        pulumi.log.warn("""port is deprecated: The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.""")

        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class WorkloadContainerGpuNvidiaArgs:
    def __init__(__self__, *,
                 model: pulumi.Input[str],
                 quantity: pulumi.Input[int]):
        WorkloadContainerGpuNvidiaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            model=model,
            quantity=quantity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             model: pulumi.Input[str],
             quantity: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("model", model)
        _setter("quantity", quantity)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input[str]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input[str]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def quantity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: pulumi.Input[int]):
        pulumi.set(self, "quantity", value)


@pulumi.input_type
class WorkloadContainerLifecycleArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 post_start: Optional[pulumi.Input['WorkloadContainerLifecyclePostStartArgs']] = None,
                 pre_stop: Optional[pulumi.Input['WorkloadContainerLifecyclePreStopArgs']] = None):
        WorkloadContainerLifecycleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            post_start=post_start,
            pre_stop=pre_stop,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             post_start: Optional[pulumi.Input['WorkloadContainerLifecyclePostStartArgs']] = None,
             pre_stop: Optional[pulumi.Input['WorkloadContainerLifecyclePreStopArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'postStart' in kwargs:
            post_start = kwargs['postStart']
        if 'preStop' in kwargs:
            pre_stop = kwargs['preStop']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if post_start is not None:
            _setter("post_start", post_start)
        if pre_stop is not None:
            _setter("pre_stop", pre_stop)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input['WorkloadContainerLifecyclePostStartArgs']]:
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input['WorkloadContainerLifecyclePostStartArgs']]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input['WorkloadContainerLifecyclePreStopArgs']]:
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input['WorkloadContainerLifecyclePreStopArgs']]):
        pulumi.set(self, "pre_stop", value)


@pulumi.input_type
class WorkloadContainerLifecyclePostStartArgs:
    def __init__(__self__, *,
                 exec_: pulumi.Input['WorkloadContainerLifecyclePostStartExecArgs']):
        WorkloadContainerLifecyclePostStartArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exec_=exec_,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exec_: pulumi.Input['WorkloadContainerLifecyclePostStartExecArgs'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'exec' in kwargs:
            exec_ = kwargs['exec']

        _setter("exec_", exec_)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> pulumi.Input['WorkloadContainerLifecyclePostStartExecArgs']:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: pulumi.Input['WorkloadContainerLifecyclePostStartExecArgs']):
        pulumi.set(self, "exec_", value)


@pulumi.input_type
class WorkloadContainerLifecyclePostStartExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[str]]]):
        WorkloadContainerLifecyclePostStartExecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "commands", value)


@pulumi.input_type
class WorkloadContainerLifecyclePreStopArgs:
    def __init__(__self__, *,
                 exec_: pulumi.Input['WorkloadContainerLifecyclePreStopExecArgs']):
        WorkloadContainerLifecyclePreStopArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exec_=exec_,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exec_: pulumi.Input['WorkloadContainerLifecyclePreStopExecArgs'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'exec' in kwargs:
            exec_ = kwargs['exec']

        _setter("exec_", exec_)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> pulumi.Input['WorkloadContainerLifecyclePreStopExecArgs']:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: pulumi.Input['WorkloadContainerLifecyclePreStopExecArgs']):
        pulumi.set(self, "exec_", value)


@pulumi.input_type
class WorkloadContainerLifecyclePreStopExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[str]]]):
        WorkloadContainerLifecyclePreStopExecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "commands", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['WorkloadContainerLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpc: Optional[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgs']] = None,
                 http_get: Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        WorkloadContainerLivenessProbeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exec_=exec_,
            failure_threshold=failure_threshold,
            grpc=grpc,
            http_get=http_get,
            initial_delay_seconds=initial_delay_seconds,
            period_seconds=period_seconds,
            success_threshold=success_threshold,
            tcp_socket=tcp_socket,
            timeout_seconds=timeout_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exec_: Optional[pulumi.Input['WorkloadContainerLivenessProbeExecArgs']] = None,
             failure_threshold: Optional[pulumi.Input[int]] = None,
             grpc: Optional[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgs']] = None,
             http_get: Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']] = None,
             initial_delay_seconds: Optional[pulumi.Input[int]] = None,
             period_seconds: Optional[pulumi.Input[int]] = None,
             success_threshold: Optional[pulumi.Input[int]] = None,
             tcp_socket: Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']] = None,
             timeout_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'exec' in kwargs:
            exec_ = kwargs['exec']
        if 'failureThreshold' in kwargs:
            failure_threshold = kwargs['failureThreshold']
        if 'httpGet' in kwargs:
            http_get = kwargs['httpGet']
        if 'initialDelaySeconds' in kwargs:
            initial_delay_seconds = kwargs['initialDelaySeconds']
        if 'periodSeconds' in kwargs:
            period_seconds = kwargs['periodSeconds']
        if 'successThreshold' in kwargs:
            success_threshold = kwargs['successThreshold']
        if 'tcpSocket' in kwargs:
            tcp_socket = kwargs['tcpSocket']
        if 'timeoutSeconds' in kwargs:
            timeout_seconds = kwargs['timeoutSeconds']

        if exec_ is not None:
            _setter("exec_", exec_)
        if failure_threshold is not None:
            _setter("failure_threshold", failure_threshold)
        if grpc is not None:
            _setter("grpc", grpc)
        if http_get is not None:
            _setter("http_get", http_get)
        if initial_delay_seconds is not None:
            _setter("initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            _setter("period_seconds", period_seconds)
        if success_threshold is not None:
            _setter("success_threshold", success_threshold)
        if tcp_socket is not None:
            _setter("tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeExecArgs']]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[str]]]):
        WorkloadContainerLivenessProbeExecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "commands", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeGrpcArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        WorkloadContainerLivenessProbeGrpcArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        WorkloadContainerLivenessProbeHttpGetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_headers=http_headers,
            path=path,
            port=port,
            scheme=scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             path: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             scheme: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'httpHeaders' in kwargs:
            http_headers = kwargs['httpHeaders']

        if http_headers is not None:
            _setter("http_headers", http_headers)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if scheme is not None:
            _setter("scheme", scheme)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        WorkloadContainerLivenessProbeTcpSocketArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadContainerMetricsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 port: pulumi.Input[int]):
        WorkloadContainerMetricsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: pulumi.Input[str],
             port: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)
        _setter("port", port)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadContainerPortArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 protocol: Optional[pulumi.Input[str]] = None):
        WorkloadContainerPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number=number,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number: pulumi.Input[int],
             protocol: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("number", number)
        if protocol is not None:
            _setter("protocol", protocol)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['WorkloadContainerReadinessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 grpc: Optional[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgs']] = None,
                 http_get: Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        WorkloadContainerReadinessProbeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exec_=exec_,
            failure_threshold=failure_threshold,
            grpc=grpc,
            http_get=http_get,
            initial_delay_seconds=initial_delay_seconds,
            period_seconds=period_seconds,
            success_threshold=success_threshold,
            tcp_socket=tcp_socket,
            timeout_seconds=timeout_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exec_: Optional[pulumi.Input['WorkloadContainerReadinessProbeExecArgs']] = None,
             failure_threshold: Optional[pulumi.Input[int]] = None,
             grpc: Optional[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgs']] = None,
             http_get: Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']] = None,
             initial_delay_seconds: Optional[pulumi.Input[int]] = None,
             period_seconds: Optional[pulumi.Input[int]] = None,
             success_threshold: Optional[pulumi.Input[int]] = None,
             tcp_socket: Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']] = None,
             timeout_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'exec' in kwargs:
            exec_ = kwargs['exec']
        if 'failureThreshold' in kwargs:
            failure_threshold = kwargs['failureThreshold']
        if 'httpGet' in kwargs:
            http_get = kwargs['httpGet']
        if 'initialDelaySeconds' in kwargs:
            initial_delay_seconds = kwargs['initialDelaySeconds']
        if 'periodSeconds' in kwargs:
            period_seconds = kwargs['periodSeconds']
        if 'successThreshold' in kwargs:
            success_threshold = kwargs['successThreshold']
        if 'tcpSocket' in kwargs:
            tcp_socket = kwargs['tcpSocket']
        if 'timeoutSeconds' in kwargs:
            timeout_seconds = kwargs['timeoutSeconds']

        if exec_ is not None:
            _setter("exec_", exec_)
        if failure_threshold is not None:
            _setter("failure_threshold", failure_threshold)
        if grpc is not None:
            _setter("grpc", grpc)
        if http_get is not None:
            _setter("http_get", http_get)
        if initial_delay_seconds is not None:
            _setter("initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            _setter("period_seconds", period_seconds)
        if success_threshold is not None:
            _setter("success_threshold", success_threshold)
        if tcp_socket is not None:
            _setter("tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeExecArgs']]:
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgs']]:
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeExecArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[Sequence[pulumi.Input[str]]]):
        WorkloadContainerReadinessProbeExecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            commands=commands,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             commands: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("commands", commands)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "commands", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeGrpcArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        WorkloadContainerReadinessProbeGrpcArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        WorkloadContainerReadinessProbeHttpGetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_headers=http_headers,
            path=path,
            port=port,
            scheme=scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             path: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[int]] = None,
             scheme: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'httpHeaders' in kwargs:
            http_headers = kwargs['httpHeaders']

        if http_headers is not None:
            _setter("http_headers", http_headers)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if scheme is not None:
            _setter("scheme", scheme)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        WorkloadContainerReadinessProbeTcpSocketArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             port: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadContainerVolumeArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 uri: pulumi.Input[str],
                 recovery_policy: Optional[pulumi.Input[str]] = None):
        WorkloadContainerVolumeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            uri=uri,
            recovery_policy=recovery_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: pulumi.Input[str],
             uri: pulumi.Input[str],
             recovery_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'recoveryPolicy' in kwargs:
            recovery_policy = kwargs['recoveryPolicy']

        _setter("path", path)
        _setter("uri", uri)
        if recovery_policy is not None:
            _setter("recovery_policy", recovery_policy)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="recoveryPolicy")
    def recovery_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recovery_policy")

    @recovery_policy.setter
    def recovery_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_policy", value)


@pulumi.input_type
class WorkloadFirewallSpecArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 external: Optional[pulumi.Input['WorkloadFirewallSpecExternalArgs']] = None,
                 internal: Optional[pulumi.Input['WorkloadFirewallSpecInternalArgs']] = None):
        WorkloadFirewallSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            external=external,
            internal=internal,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             external: Optional[pulumi.Input['WorkloadFirewallSpecExternalArgs']] = None,
             internal: Optional[pulumi.Input['WorkloadFirewallSpecInternalArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if external is not None:
            _setter("external", external)
        if internal is not None:
            _setter("internal", internal)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input['WorkloadFirewallSpecExternalArgs']]:
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input['WorkloadFirewallSpecExternalArgs']]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def internal(self) -> Optional[pulumi.Input['WorkloadFirewallSpecInternalArgs']]:
        return pulumi.get(self, "internal")

    @internal.setter
    def internal(self, value: Optional[pulumi.Input['WorkloadFirewallSpecInternalArgs']]):
        pulumi.set(self, "internal", value)


@pulumi.input_type
class WorkloadFirewallSpecExternalArgs:
    def __init__(__self__, *,
                 inbound_allow_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outbound_allow_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outbound_allow_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outbound_allow_ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]]] = None):
        WorkloadFirewallSpecExternalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            inbound_allow_cidrs=inbound_allow_cidrs,
            outbound_allow_cidrs=outbound_allow_cidrs,
            outbound_allow_hostnames=outbound_allow_hostnames,
            outbound_allow_ports=outbound_allow_ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             inbound_allow_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             outbound_allow_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             outbound_allow_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             outbound_allow_ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'inboundAllowCidrs' in kwargs:
            inbound_allow_cidrs = kwargs['inboundAllowCidrs']
        if 'outboundAllowCidrs' in kwargs:
            outbound_allow_cidrs = kwargs['outboundAllowCidrs']
        if 'outboundAllowHostnames' in kwargs:
            outbound_allow_hostnames = kwargs['outboundAllowHostnames']
        if 'outboundAllowPorts' in kwargs:
            outbound_allow_ports = kwargs['outboundAllowPorts']

        if inbound_allow_cidrs is not None:
            _setter("inbound_allow_cidrs", inbound_allow_cidrs)
        if outbound_allow_cidrs is not None:
            _setter("outbound_allow_cidrs", outbound_allow_cidrs)
        if outbound_allow_hostnames is not None:
            _setter("outbound_allow_hostnames", outbound_allow_hostnames)
        if outbound_allow_ports is not None:
            _setter("outbound_allow_ports", outbound_allow_ports)

    @property
    @pulumi.getter(name="inboundAllowCidrs")
    def inbound_allow_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "inbound_allow_cidrs")

    @inbound_allow_cidrs.setter
    def inbound_allow_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inbound_allow_cidrs", value)

    @property
    @pulumi.getter(name="outboundAllowCidrs")
    def outbound_allow_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "outbound_allow_cidrs")

    @outbound_allow_cidrs.setter
    def outbound_allow_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outbound_allow_cidrs", value)

    @property
    @pulumi.getter(name="outboundAllowHostnames")
    def outbound_allow_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "outbound_allow_hostnames")

    @outbound_allow_hostnames.setter
    def outbound_allow_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "outbound_allow_hostnames", value)

    @property
    @pulumi.getter(name="outboundAllowPorts")
    def outbound_allow_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]]]:
        return pulumi.get(self, "outbound_allow_ports")

    @outbound_allow_ports.setter
    def outbound_allow_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadFirewallSpecExternalOutboundAllowPortArgs']]]]):
        pulumi.set(self, "outbound_allow_ports", value)


@pulumi.input_type
class WorkloadFirewallSpecExternalOutboundAllowPortArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 protocol: pulumi.Input[str]):
        WorkloadFirewallSpecExternalOutboundAllowPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number=number,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number: pulumi.Input[int],
             protocol: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("number", number)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WorkloadFirewallSpecInternalArgs:
    def __init__(__self__, *,
                 inbound_allow_type: Optional[pulumi.Input[str]] = None,
                 inbound_allow_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        WorkloadFirewallSpecInternalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            inbound_allow_type=inbound_allow_type,
            inbound_allow_workloads=inbound_allow_workloads,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             inbound_allow_type: Optional[pulumi.Input[str]] = None,
             inbound_allow_workloads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'inboundAllowType' in kwargs:
            inbound_allow_type = kwargs['inboundAllowType']
        if 'inboundAllowWorkloads' in kwargs:
            inbound_allow_workloads = kwargs['inboundAllowWorkloads']

        if inbound_allow_type is not None:
            _setter("inbound_allow_type", inbound_allow_type)
        if inbound_allow_workloads is not None:
            _setter("inbound_allow_workloads", inbound_allow_workloads)

    @property
    @pulumi.getter(name="inboundAllowType")
    def inbound_allow_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inbound_allow_type")

    @inbound_allow_type.setter
    def inbound_allow_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_allow_type", value)

    @property
    @pulumi.getter(name="inboundAllowWorkloads")
    def inbound_allow_workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "inbound_allow_workloads")

    @inbound_allow_workloads.setter
    def inbound_allow_workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inbound_allow_workloads", value)


@pulumi.input_type
class WorkloadJobArgs:
    def __init__(__self__, *,
                 schedule: pulumi.Input[str],
                 active_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 concurrency_policy: Optional[pulumi.Input[str]] = None,
                 history_limit: Optional[pulumi.Input[int]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None):
        WorkloadJobArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            schedule=schedule,
            active_deadline_seconds=active_deadline_seconds,
            concurrency_policy=concurrency_policy,
            history_limit=history_limit,
            restart_policy=restart_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             schedule: pulumi.Input[str],
             active_deadline_seconds: Optional[pulumi.Input[int]] = None,
             concurrency_policy: Optional[pulumi.Input[str]] = None,
             history_limit: Optional[pulumi.Input[int]] = None,
             restart_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'activeDeadlineSeconds' in kwargs:
            active_deadline_seconds = kwargs['activeDeadlineSeconds']
        if 'concurrencyPolicy' in kwargs:
            concurrency_policy = kwargs['concurrencyPolicy']
        if 'historyLimit' in kwargs:
            history_limit = kwargs['historyLimit']
        if 'restartPolicy' in kwargs:
            restart_policy = kwargs['restartPolicy']

        _setter("schedule", schedule)
        if active_deadline_seconds is not None:
            _setter("active_deadline_seconds", active_deadline_seconds)
        if concurrency_policy is not None:
            _setter("concurrency_policy", concurrency_policy)
        if history_limit is not None:
            _setter("history_limit", history_limit)
        if restart_policy is not None:
            _setter("restart_policy", restart_policy)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter(name="concurrencyPolicy")
    def concurrency_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "concurrency_policy")

    @concurrency_policy.setter
    def concurrency_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrency_policy", value)

    @property
    @pulumi.getter(name="historyLimit")
    def history_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "history_limit")

    @history_limit.setter
    def history_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "history_limit", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_policy", value)


@pulumi.input_type
class WorkloadLoadBalancerArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 direct: Optional[pulumi.Input['WorkloadLoadBalancerDirectArgs']] = None,
                 geo_location: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationArgs']] = None):
        WorkloadLoadBalancerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            direct=direct,
            geo_location=geo_location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             direct: Optional[pulumi.Input['WorkloadLoadBalancerDirectArgs']] = None,
             geo_location: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'geoLocation' in kwargs:
            geo_location = kwargs['geoLocation']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if direct is not None:
            _setter("direct", direct)
        if geo_location is not None:
            _setter("geo_location", geo_location)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def direct(self) -> Optional[pulumi.Input['WorkloadLoadBalancerDirectArgs']]:
        return pulumi.get(self, "direct")

    @direct.setter
    def direct(self, value: Optional[pulumi.Input['WorkloadLoadBalancerDirectArgs']]):
        pulumi.set(self, "direct", value)

    @property
    @pulumi.getter(name="geoLocation")
    def geo_location(self) -> Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationArgs']]:
        return pulumi.get(self, "geo_location")

    @geo_location.setter
    def geo_location(self, value: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationArgs']]):
        pulumi.set(self, "geo_location", value)


@pulumi.input_type
class WorkloadLoadBalancerDirectArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]]] = None):
        WorkloadLoadBalancerDirectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("enabled", enabled)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLoadBalancerDirectPortArgs']]]]):
        pulumi.set(self, "ports", value)


@pulumi.input_type
class WorkloadLoadBalancerDirectPortArgs:
    def __init__(__self__, *,
                 external_port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 container_port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        WorkloadLoadBalancerDirectPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            external_port=external_port,
            protocol=protocol,
            container_port=container_port,
            scheme=scheme,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             external_port: pulumi.Input[int],
             protocol: pulumi.Input[str],
             container_port: Optional[pulumi.Input[int]] = None,
             scheme: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'externalPort' in kwargs:
            external_port = kwargs['externalPort']
        if 'containerPort' in kwargs:
            container_port = kwargs['containerPort']

        _setter("external_port", external_port)
        _setter("protocol", protocol)
        if container_port is not None:
            _setter("container_port", container_port)
        if scheme is not None:
            _setter("scheme", scheme)

    @property
    @pulumi.getter(name="externalPort")
    def external_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "external_port")

    @external_port.setter
    def external_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "external_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadLoadBalancerGeoLocationArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgs']] = None):
        WorkloadLoadBalancerGeoLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            headers=headers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             headers: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if enabled is not None:
            _setter("enabled", enabled)
        if headers is not None:
            _setter("headers", headers)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgs']]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['WorkloadLoadBalancerGeoLocationHeadersArgs']]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class WorkloadLoadBalancerGeoLocationHeadersArgs:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        WorkloadLoadBalancerGeoLocationHeadersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            asn=asn,
            city=city,
            country=country,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             asn: Optional[pulumi.Input[str]] = None,
             city: Optional[pulumi.Input[str]] = None,
             country: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if asn is not None:
            _setter("asn", asn)
        if city is not None:
            _setter("city", city)
        if country is not None:
            _setter("country", country)
        if region is not None:
            _setter("region", region)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkloadLocalOptionArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 autoscaling: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingArgs']] = None,
                 capacity_ai: Optional[pulumi.Input[bool]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 suspend: Optional[pulumi.Input[bool]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        WorkloadLocalOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
            autoscaling=autoscaling,
            capacity_ai=capacity_ai,
            debug=debug,
            suspend=suspend,
            timeout_seconds=timeout_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: pulumi.Input[str],
             autoscaling: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingArgs']] = None,
             capacity_ai: Optional[pulumi.Input[bool]] = None,
             debug: Optional[pulumi.Input[bool]] = None,
             suspend: Optional[pulumi.Input[bool]] = None,
             timeout_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'capacityAi' in kwargs:
            capacity_ai = kwargs['capacityAi']
        if 'timeoutSeconds' in kwargs:
            timeout_seconds = kwargs['timeoutSeconds']

        _setter("location", location)
        if autoscaling is not None:
            _setter("autoscaling", autoscaling)
        if capacity_ai is not None:
            _setter("capacity_ai", capacity_ai)
        if debug is not None:
            _setter("debug", debug)
        if suspend is not None:
            _setter("suspend", suspend)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['WorkloadLocalOptionAutoscalingArgs']]:
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['WorkloadLocalOptionAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "capacity_ai")

    @capacity_ai.setter
    def capacity_ai(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "capacity_ai", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def suspend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suspend")

    @suspend.setter
    def suspend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspend", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadLocalOptionAutoscalingArgs:
    def __init__(__self__, *,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 max_scale: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 metric_percentile: Optional[pulumi.Input[str]] = None,
                 min_scale: Optional[pulumi.Input[int]] = None,
                 multis: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgs']]]] = None,
                 scale_to_zero_delay: Optional[pulumi.Input[int]] = None,
                 target: Optional[pulumi.Input[int]] = None):
        WorkloadLocalOptionAutoscalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_concurrency=max_concurrency,
            max_scale=max_scale,
            metric=metric,
            metric_percentile=metric_percentile,
            min_scale=min_scale,
            multis=multis,
            scale_to_zero_delay=scale_to_zero_delay,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_concurrency: Optional[pulumi.Input[int]] = None,
             max_scale: Optional[pulumi.Input[int]] = None,
             metric: Optional[pulumi.Input[str]] = None,
             metric_percentile: Optional[pulumi.Input[str]] = None,
             min_scale: Optional[pulumi.Input[int]] = None,
             multis: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgs']]]] = None,
             scale_to_zero_delay: Optional[pulumi.Input[int]] = None,
             target: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxConcurrency' in kwargs:
            max_concurrency = kwargs['maxConcurrency']
        if 'maxScale' in kwargs:
            max_scale = kwargs['maxScale']
        if 'metricPercentile' in kwargs:
            metric_percentile = kwargs['metricPercentile']
        if 'minScale' in kwargs:
            min_scale = kwargs['minScale']
        if 'scaleToZeroDelay' in kwargs:
            scale_to_zero_delay = kwargs['scaleToZeroDelay']

        if max_concurrency is not None:
            _setter("max_concurrency", max_concurrency)
        if max_scale is not None:
            _setter("max_scale", max_scale)
        if metric is not None:
            _setter("metric", metric)
        if metric_percentile is not None:
            _setter("metric_percentile", metric_percentile)
        if min_scale is not None:
            _setter("min_scale", min_scale)
        if multis is not None:
            _setter("multis", multis)
        if scale_to_zero_delay is not None:
            _setter("scale_to_zero_delay", scale_to_zero_delay)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_scale")

    @max_scale.setter
    def max_scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_scale", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_percentile")

    @metric_percentile.setter
    def metric_percentile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_percentile", value)

    @property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_scale")

    @min_scale.setter
    def min_scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_scale", value)

    @property
    @pulumi.getter
    def multis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgs']]]]:
        return pulumi.get(self, "multis")

    @multis.setter
    def multis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadLocalOptionAutoscalingMultiArgs']]]]):
        pulumi.set(self, "multis", value)

    @property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_to_zero_delay")

    @scale_to_zero_delay.setter
    def scale_to_zero_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_to_zero_delay", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WorkloadLocalOptionAutoscalingMultiArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[int]] = None):
        WorkloadLocalOptionAutoscalingMultiArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric=metric,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric: Optional[pulumi.Input[str]] = None,
             target: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if metric is not None:
            _setter("metric", metric)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WorkloadOptionsArgs:
    def __init__(__self__, *,
                 autoscaling: Optional[pulumi.Input['WorkloadOptionsAutoscalingArgs']] = None,
                 capacity_ai: Optional[pulumi.Input[bool]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 suspend: Optional[pulumi.Input[bool]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        WorkloadOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            autoscaling=autoscaling,
            capacity_ai=capacity_ai,
            debug=debug,
            suspend=suspend,
            timeout_seconds=timeout_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             autoscaling: Optional[pulumi.Input['WorkloadOptionsAutoscalingArgs']] = None,
             capacity_ai: Optional[pulumi.Input[bool]] = None,
             debug: Optional[pulumi.Input[bool]] = None,
             suspend: Optional[pulumi.Input[bool]] = None,
             timeout_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'capacityAi' in kwargs:
            capacity_ai = kwargs['capacityAi']
        if 'timeoutSeconds' in kwargs:
            timeout_seconds = kwargs['timeoutSeconds']

        if autoscaling is not None:
            _setter("autoscaling", autoscaling)
        if capacity_ai is not None:
            _setter("capacity_ai", capacity_ai)
        if debug is not None:
            _setter("debug", debug)
        if suspend is not None:
            _setter("suspend", suspend)
        if timeout_seconds is not None:
            _setter("timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['WorkloadOptionsAutoscalingArgs']]:
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['WorkloadOptionsAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter(name="capacityAi")
    def capacity_ai(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "capacity_ai")

    @capacity_ai.setter
    def capacity_ai(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "capacity_ai", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def suspend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "suspend")

    @suspend.setter
    def suspend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspend", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadOptionsAutoscalingArgs:
    def __init__(__self__, *,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 max_scale: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 metric_percentile: Optional[pulumi.Input[str]] = None,
                 min_scale: Optional[pulumi.Input[int]] = None,
                 multis: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgs']]]] = None,
                 scale_to_zero_delay: Optional[pulumi.Input[int]] = None,
                 target: Optional[pulumi.Input[int]] = None):
        WorkloadOptionsAutoscalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_concurrency=max_concurrency,
            max_scale=max_scale,
            metric=metric,
            metric_percentile=metric_percentile,
            min_scale=min_scale,
            multis=multis,
            scale_to_zero_delay=scale_to_zero_delay,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_concurrency: Optional[pulumi.Input[int]] = None,
             max_scale: Optional[pulumi.Input[int]] = None,
             metric: Optional[pulumi.Input[str]] = None,
             metric_percentile: Optional[pulumi.Input[str]] = None,
             min_scale: Optional[pulumi.Input[int]] = None,
             multis: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgs']]]] = None,
             scale_to_zero_delay: Optional[pulumi.Input[int]] = None,
             target: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxConcurrency' in kwargs:
            max_concurrency = kwargs['maxConcurrency']
        if 'maxScale' in kwargs:
            max_scale = kwargs['maxScale']
        if 'metricPercentile' in kwargs:
            metric_percentile = kwargs['metricPercentile']
        if 'minScale' in kwargs:
            min_scale = kwargs['minScale']
        if 'scaleToZeroDelay' in kwargs:
            scale_to_zero_delay = kwargs['scaleToZeroDelay']

        if max_concurrency is not None:
            _setter("max_concurrency", max_concurrency)
        if max_scale is not None:
            _setter("max_scale", max_scale)
        if metric is not None:
            _setter("metric", metric)
        if metric_percentile is not None:
            _setter("metric_percentile", metric_percentile)
        if min_scale is not None:
            _setter("min_scale", min_scale)
        if multis is not None:
            _setter("multis", multis)
        if scale_to_zero_delay is not None:
            _setter("scale_to_zero_delay", scale_to_zero_delay)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="maxScale")
    def max_scale(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_scale")

    @max_scale.setter
    def max_scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_scale", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricPercentile")
    def metric_percentile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_percentile")

    @metric_percentile.setter
    def metric_percentile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_percentile", value)

    @property
    @pulumi.getter(name="minScale")
    def min_scale(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_scale")

    @min_scale.setter
    def min_scale(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_scale", value)

    @property
    @pulumi.getter
    def multis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgs']]]]:
        return pulumi.get(self, "multis")

    @multis.setter
    def multis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadOptionsAutoscalingMultiArgs']]]]):
        pulumi.set(self, "multis", value)

    @property
    @pulumi.getter(name="scaleToZeroDelay")
    def scale_to_zero_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_to_zero_delay")

    @scale_to_zero_delay.setter
    def scale_to_zero_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_to_zero_delay", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WorkloadOptionsAutoscalingMultiArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[int]] = None):
        WorkloadOptionsAutoscalingMultiArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric=metric,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric: Optional[pulumi.Input[str]] = None,
             target: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if metric is not None:
            _setter("metric", metric)
        if target is not None:
            _setter("target", target)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WorkloadRolloutOptionsArgs:
    def __init__(__self__, *,
                 max_surge_replicas: Optional[pulumi.Input[str]] = None,
                 max_unavailable_replicas: Optional[pulumi.Input[str]] = None,
                 min_ready_seconds: Optional[pulumi.Input[int]] = None,
                 scaling_policy: Optional[pulumi.Input[str]] = None):
        WorkloadRolloutOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_surge_replicas=max_surge_replicas,
            max_unavailable_replicas=max_unavailable_replicas,
            min_ready_seconds=min_ready_seconds,
            scaling_policy=scaling_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_surge_replicas: Optional[pulumi.Input[str]] = None,
             max_unavailable_replicas: Optional[pulumi.Input[str]] = None,
             min_ready_seconds: Optional[pulumi.Input[int]] = None,
             scaling_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxSurgeReplicas' in kwargs:
            max_surge_replicas = kwargs['maxSurgeReplicas']
        if 'maxUnavailableReplicas' in kwargs:
            max_unavailable_replicas = kwargs['maxUnavailableReplicas']
        if 'minReadySeconds' in kwargs:
            min_ready_seconds = kwargs['minReadySeconds']
        if 'scalingPolicy' in kwargs:
            scaling_policy = kwargs['scalingPolicy']

        if max_surge_replicas is not None:
            _setter("max_surge_replicas", max_surge_replicas)
        if max_unavailable_replicas is not None:
            _setter("max_unavailable_replicas", max_unavailable_replicas)
        if min_ready_seconds is not None:
            _setter("min_ready_seconds", min_ready_seconds)
        if scaling_policy is not None:
            _setter("scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="maxSurgeReplicas")
    def max_surge_replicas(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_surge_replicas")

    @max_surge_replicas.setter
    def max_surge_replicas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge_replicas", value)

    @property
    @pulumi.getter(name="maxUnavailableReplicas")
    def max_unavailable_replicas(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_unavailable_replicas")

    @max_unavailable_replicas.setter
    def max_unavailable_replicas(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable_replicas", value)

    @property
    @pulumi.getter(name="minReadySeconds")
    def min_ready_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_ready_seconds")

    @min_ready_seconds.setter
    def min_ready_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_ready_seconds", value)

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scaling_policy")

    @scaling_policy.setter
    def scaling_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_policy", value)


@pulumi.input_type
class WorkloadSecurityOptionsArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[pulumi.Input[bool]] = None,
                 file_system_group_id: Optional[pulumi.Input[int]] = None):
        WorkloadSecurityOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            file_system_group_id=file_system_group_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[pulumi.Input[bool]] = None,
             file_system_group_id: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fileSystemGroupId' in kwargs:
            file_system_group_id = kwargs['fileSystemGroupId']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if file_system_group_id is not None:
            _setter("file_system_group_id", file_system_group_id)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="fileSystemGroupId")
    def file_system_group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_system_group_id")

    @file_system_group_id.setter
    def file_system_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_system_group_id", value)


@pulumi.input_type
class WorkloadSidecarArgs:
    def __init__(__self__, *,
                 envoy: pulumi.Input[str]):
        WorkloadSidecarArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            envoy=envoy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             envoy: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("envoy", envoy)

    @property
    @pulumi.getter
    def envoy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "envoy")

    @envoy.setter
    def envoy(self, value: pulumi.Input[str]):
        pulumi.set(self, "envoy", value)


@pulumi.input_type
class WorkloadStatusArgs:
    def __init__(__self__, *,
                 canonical_endpoint: Optional[pulumi.Input[str]] = None,
                 current_replica_count: Optional[pulumi.Input[int]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]]] = None,
                 internal_name: Optional[pulumi.Input[str]] = None,
                 load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgs']]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 resolved_images: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]]] = None):
        WorkloadStatusArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canonical_endpoint=canonical_endpoint,
            current_replica_count=current_replica_count,
            endpoint=endpoint,
            health_checks=health_checks,
            internal_name=internal_name,
            load_balancers=load_balancers,
            parent_id=parent_id,
            resolved_images=resolved_images,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canonical_endpoint: Optional[pulumi.Input[str]] = None,
             current_replica_count: Optional[pulumi.Input[int]] = None,
             endpoint: Optional[pulumi.Input[str]] = None,
             health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]]] = None,
             internal_name: Optional[pulumi.Input[str]] = None,
             load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgs']]]] = None,
             parent_id: Optional[pulumi.Input[str]] = None,
             resolved_images: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'canonicalEndpoint' in kwargs:
            canonical_endpoint = kwargs['canonicalEndpoint']
        if 'currentReplicaCount' in kwargs:
            current_replica_count = kwargs['currentReplicaCount']
        if 'healthChecks' in kwargs:
            health_checks = kwargs['healthChecks']
        if 'internalName' in kwargs:
            internal_name = kwargs['internalName']
        if 'loadBalancers' in kwargs:
            load_balancers = kwargs['loadBalancers']
        if 'parentId' in kwargs:
            parent_id = kwargs['parentId']
        if 'resolvedImages' in kwargs:
            resolved_images = kwargs['resolvedImages']

        if canonical_endpoint is not None:
            _setter("canonical_endpoint", canonical_endpoint)
        if current_replica_count is not None:
            _setter("current_replica_count", current_replica_count)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if health_checks is not None:
            _setter("health_checks", health_checks)
        if internal_name is not None:
            _setter("internal_name", internal_name)
        if load_balancers is not None:
            _setter("load_balancers", load_balancers)
        if parent_id is not None:
            _setter("parent_id", parent_id)
        if resolved_images is not None:
            _setter("resolved_images", resolved_images)

    @property
    @pulumi.getter(name="canonicalEndpoint")
    def canonical_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "canonical_endpoint")

    @canonical_endpoint.setter
    def canonical_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canonical_endpoint", value)

    @property
    @pulumi.getter(name="currentReplicaCount")
    def current_replica_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "current_replica_count")

    @current_replica_count.setter
    def current_replica_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "current_replica_count", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]]]:
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="internalName")
    def internal_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_name")

    @internal_name.setter
    def internal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_name", value)

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgs']]]]:
        return pulumi.get(self, "load_balancers")

    @load_balancers.setter
    def load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusLoadBalancerArgs']]]]):
        pulumi.set(self, "load_balancers", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="resolvedImages")
    def resolved_images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]]]:
        return pulumi.get(self, "resolved_images")

    @resolved_images.setter
    def resolved_images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageArgs']]]]):
        pulumi.set(self, "resolved_images", value)


@pulumi.input_type
class WorkloadStatusHealthCheckArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 code: Optional[pulumi.Input[int]] = None,
                 failures: Optional[pulumi.Input[int]] = None,
                 last_checked: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 success: Optional[pulumi.Input[bool]] = None,
                 successes: Optional[pulumi.Input[int]] = None):
        WorkloadStatusHealthCheckArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active=active,
            code=code,
            failures=failures,
            last_checked=last_checked,
            message=message,
            success=success,
            successes=successes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active: pulumi.Input[bool],
             code: Optional[pulumi.Input[int]] = None,
             failures: Optional[pulumi.Input[int]] = None,
             last_checked: Optional[pulumi.Input[str]] = None,
             message: Optional[pulumi.Input[str]] = None,
             success: Optional[pulumi.Input[bool]] = None,
             successes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'lastChecked' in kwargs:
            last_checked = kwargs['lastChecked']

        _setter("active", active)
        if code is not None:
            _setter("code", code)
        if failures is not None:
            _setter("failures", failures)
        if last_checked is not None:
            _setter("last_checked", last_checked)
        if message is not None:
            _setter("message", message)
        if success is not None:
            _setter("success", success)
        if successes is not None:
            _setter("successes", successes)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failures")

    @failures.setter
    def failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failures", value)

    @property
    @pulumi.getter(name="lastChecked")
    def last_checked(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_checked")

    @last_checked.setter
    def last_checked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_checked", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def success(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "success")

    @success.setter
    def success(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "success", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successes", value)


@pulumi.input_type
class WorkloadStatusLoadBalancerArgs:
    def __init__(__self__, *,
                 origin: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        WorkloadStatusLoadBalancerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            origin=origin,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             origin: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if origin is not None:
            _setter("origin", origin)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkloadStatusResolvedImageArgs:
    def __init__(__self__, *,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]]] = None,
                 resolved_at: Optional[pulumi.Input[str]] = None,
                 resolved_for_version: Optional[pulumi.Input[int]] = None):
        WorkloadStatusResolvedImageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            images=images,
            resolved_at=resolved_at,
            resolved_for_version=resolved_for_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             images: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]]] = None,
             resolved_at: Optional[pulumi.Input[str]] = None,
             resolved_for_version: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'resolvedAt' in kwargs:
            resolved_at = kwargs['resolvedAt']
        if 'resolvedForVersion' in kwargs:
            resolved_for_version = kwargs['resolvedForVersion']

        if images is not None:
            _setter("images", images)
        if resolved_at is not None:
            _setter("resolved_at", resolved_at)
        if resolved_for_version is not None:
            _setter("resolved_for_version", resolved_for_version)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageArgs']]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="resolvedAt")
    def resolved_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolved_at")

    @resolved_at.setter
    def resolved_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolved_at", value)

    @property
    @pulumi.getter(name="resolvedForVersion")
    def resolved_for_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "resolved_for_version")

    @resolved_for_version.setter
    def resolved_for_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resolved_for_version", value)


@pulumi.input_type
class WorkloadStatusResolvedImageImageArgs:
    def __init__(__self__, *,
                 digest: Optional[pulumi.Input[str]] = None,
                 manifests: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgs']]]] = None):
        WorkloadStatusResolvedImageImageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            digest=digest,
            manifests=manifests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             digest: Optional[pulumi.Input[str]] = None,
             manifests: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if digest is not None:
            _setter("digest", digest)
        if manifests is not None:
            _setter("manifests", manifests)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def manifests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgs']]]]:
        return pulumi.get(self, "manifests")

    @manifests.setter
    def manifests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStatusResolvedImageImageManifestArgs']]]]):
        pulumi.set(self, "manifests", value)


@pulumi.input_type
class WorkloadStatusResolvedImageImageManifestArgs:
    def __init__(__self__, *,
                 digest: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 media_type: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        WorkloadStatusResolvedImageImageManifestArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            digest=digest,
            image=image,
            media_type=media_type,
            platform=platform,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             digest: Optional[pulumi.Input[str]] = None,
             image: Optional[pulumi.Input[str]] = None,
             media_type: Optional[pulumi.Input[str]] = None,
             platform: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'mediaType' in kwargs:
            media_type = kwargs['mediaType']

        if digest is not None:
            _setter("digest", digest)
        if image is not None:
            _setter("image", image)
        if media_type is not None:
            _setter("media_type", media_type)
        if platform is not None:
            _setter("platform", platform)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "platform", value)


@pulumi.input_type
class GetGvcControlplaneTracingArgs:
    def __init__(__self__, *,
                 sampling: float,
                 custom_tags: Optional[Mapping[str, str]] = None):
        GetGvcControlplaneTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sampling=sampling,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sampling: float,
             custom_tags: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("sampling", sampling)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def sampling(self) -> float:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: float):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class GetGvcLightstepTracingArgs:
    def __init__(__self__, *,
                 endpoint: str,
                 sampling: float,
                 credentials: Optional[str] = None,
                 custom_tags: Optional[Mapping[str, str]] = None):
        GetGvcLightstepTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            sampling=sampling,
            credentials=credentials,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: str,
             sampling: float,
             credentials: Optional[str] = None,
             custom_tags: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("endpoint", endpoint)
        _setter("sampling", sampling)
        if credentials is not None:
            _setter("credentials", credentials)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: str):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> float:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: float):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class GetGvcLoadBalancerArgs:
    def __init__(__self__, *,
                 dedicated: Optional[bool] = None,
                 redirect: Optional['GetGvcLoadBalancerRedirectArgs'] = None,
                 trusted_proxies: Optional[int] = None):
        GetGvcLoadBalancerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dedicated=dedicated,
            redirect=redirect,
            trusted_proxies=trusted_proxies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dedicated: Optional[bool] = None,
             redirect: Optional['GetGvcLoadBalancerRedirectArgs'] = None,
             trusted_proxies: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'trustedProxies' in kwargs:
            trusted_proxies = kwargs['trustedProxies']

        if dedicated is not None:
            _setter("dedicated", dedicated)
        if redirect is not None:
            _setter("redirect", redirect)
        if trusted_proxies is not None:
            _setter("trusted_proxies", trusted_proxies)

    @property
    @pulumi.getter
    def dedicated(self) -> Optional[bool]:
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[bool]):
        pulumi.set(self, "dedicated", value)

    @property
    @pulumi.getter
    def redirect(self) -> Optional['GetGvcLoadBalancerRedirectArgs']:
        return pulumi.get(self, "redirect")

    @redirect.setter
    def redirect(self, value: Optional['GetGvcLoadBalancerRedirectArgs']):
        pulumi.set(self, "redirect", value)

    @property
    @pulumi.getter(name="trustedProxies")
    def trusted_proxies(self) -> Optional[int]:
        return pulumi.get(self, "trusted_proxies")

    @trusted_proxies.setter
    def trusted_proxies(self, value: Optional[int]):
        pulumi.set(self, "trusted_proxies", value)


@pulumi.input_type
class GetGvcLoadBalancerRedirectArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[bool] = None,
                 class_: Optional['GetGvcLoadBalancerRedirectClassArgs'] = None):
        GetGvcLoadBalancerRedirectArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            class_=class_,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[bool] = None,
             class_: Optional['GetGvcLoadBalancerRedirectClassArgs'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'class' in kwargs:
            class_ = kwargs['class']

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if class_ is not None:
            _setter("class_", class_)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[bool]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[bool]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional['GetGvcLoadBalancerRedirectClassArgs']:
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional['GetGvcLoadBalancerRedirectClassArgs']):
        pulumi.set(self, "class_", value)


@pulumi.input_type
class GetGvcLoadBalancerRedirectClassArgs:
    def __init__(__self__, *,
                 _sentinel: Optional[bool] = None,
                 status5xx: Optional[str] = None):
        GetGvcLoadBalancerRedirectClassArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            _sentinel=_sentinel,
            status5xx=status5xx,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             _sentinel: Optional[bool] = None,
             status5xx: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if _sentinel is not None:
            _setter("_sentinel", _sentinel)
        if status5xx is not None:
            _setter("status5xx", status5xx)

    @property
    @pulumi.getter
    def _sentinel(self) -> Optional[bool]:
        return pulumi.get(self, "_sentinel")

    @_sentinel.setter
    def _sentinel(self, value: Optional[bool]):
        pulumi.set(self, "_sentinel", value)

    @property
    @pulumi.getter
    def status5xx(self) -> Optional[str]:
        return pulumi.get(self, "status5xx")

    @status5xx.setter
    def status5xx(self, value: Optional[str]):
        pulumi.set(self, "status5xx", value)


@pulumi.input_type
class GetGvcOtelTracingArgs:
    def __init__(__self__, *,
                 endpoint: str,
                 sampling: float,
                 custom_tags: Optional[Mapping[str, str]] = None):
        GetGvcOtelTracingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint=endpoint,
            sampling=sampling,
            custom_tags=custom_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint: str,
             sampling: float,
             custom_tags: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customTags' in kwargs:
            custom_tags = kwargs['customTags']

        _setter("endpoint", endpoint)
        _setter("sampling", sampling)
        if custom_tags is not None:
            _setter("custom_tags", custom_tags)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: str):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def sampling(self) -> float:
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: float):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "custom_tags", value)


@pulumi.input_type
class GetGvcSidecarArgs:
    def __init__(__self__, *,
                 envoy: str):
        GetGvcSidecarArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            envoy=envoy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             envoy: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("envoy", envoy)

    @property
    @pulumi.getter
    def envoy(self) -> str:
        return pulumi.get(self, "envoy")

    @envoy.setter
    def envoy(self, value: str):
        pulumi.set(self, "envoy", value)


@pulumi.input_type
class GetImagesQueryArgs:
    def __init__(__self__, *,
                 fetch: Optional[str] = None,
                 spec: Optional['GetImagesQuerySpecArgs'] = None):
        GetImagesQueryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fetch=fetch,
            spec=spec,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fetch: Optional[str] = None,
             spec: Optional['GetImagesQuerySpecArgs'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if fetch is not None:
            _setter("fetch", fetch)
        if spec is not None:
            _setter("spec", spec)

    @property
    @pulumi.getter
    def fetch(self) -> Optional[str]:
        return pulumi.get(self, "fetch")

    @fetch.setter
    def fetch(self, value: Optional[str]):
        pulumi.set(self, "fetch", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional['GetImagesQuerySpecArgs']:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional['GetImagesQuerySpecArgs']):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class GetImagesQuerySpecArgs:
    def __init__(__self__, *,
                 match: Optional[str] = None,
                 terms: Optional[Sequence['GetImagesQuerySpecTermArgs']] = None):
        GetImagesQuerySpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match=match,
            terms=terms,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match: Optional[str] = None,
             terms: Optional[Sequence['GetImagesQuerySpecTermArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if match is not None:
            _setter("match", match)
        if terms is not None:
            _setter("terms", terms)

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[str]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['GetImagesQuerySpecTermArgs']]:
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[Sequence['GetImagesQuerySpecTermArgs']]):
        pulumi.set(self, "terms", value)


@pulumi.input_type
class GetImagesQuerySpecTermArgs:
    def __init__(__self__, *,
                 op: Optional[str] = None,
                 property: Optional[str] = None,
                 rel: Optional[str] = None,
                 tag: Optional[str] = None,
                 value: Optional[str] = None):
        GetImagesQuerySpecTermArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            op=op,
            property=property,
            rel=rel,
            tag=tag,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             op: Optional[str] = None,
             property: Optional[str] = None,
             rel: Optional[str] = None,
             tag: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if op is not None:
            _setter("op", op)
        if property is not None:
            _setter("property", property)
        if rel is not None:
            _setter("rel", rel)
        if tag is not None:
            _setter("tag", tag)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[str]:
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[str]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def rel(self) -> Optional[str]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: Optional[str]):
        pulumi.set(self, "rel", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[str]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class GetSecretAwsArgs:
    def __init__(__self__, *,
                 access_key: str,
                 secret_key: str,
                 external_id: Optional[str] = None,
                 role_arn: Optional[str] = None):
        GetSecretAwsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            secret_key=secret_key,
            external_id=external_id,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: str,
             secret_key: str,
             external_id: Optional[str] = None,
             role_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        _setter("access_key", access_key)
        _setter("secret_key", secret_key)
        if external_id is not None:
            _setter("external_id", external_id)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: str):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class GetSecretAzureConnectorArgs:
    def __init__(__self__, *,
                 code: str,
                 url: str):
        GetSecretAzureConnectorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: str,
             url: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("code", code)
        _setter("url", url)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: str):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)


@pulumi.input_type
class GetSecretEcrArgs:
    def __init__(__self__, *,
                 access_key: str,
                 repos: Sequence[str],
                 secret_key: str,
                 external_id: Optional[str] = None,
                 role_arn: Optional[str] = None):
        GetSecretEcrArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            repos=repos,
            secret_key=secret_key,
            external_id=external_id,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: str,
             repos: Sequence[str],
             secret_key: str,
             external_id: Optional[str] = None,
             role_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'externalId' in kwargs:
            external_id = kwargs['externalId']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']

        _setter("access_key", access_key)
        _setter("repos", repos)
        _setter("secret_key", secret_key)
        if external_id is not None:
            _setter("external_id", external_id)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> str:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: str):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def repos(self) -> Sequence[str]:
        return pulumi.get(self, "repos")

    @repos.setter
    def repos(self, value: Sequence[str]):
        pulumi.set(self, "repos", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: str):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class GetSecretKeypairArgs:
    def __init__(__self__, *,
                 secret_key: str,
                 passphrase: Optional[str] = None,
                 public_key: Optional[str] = None):
        GetSecretKeypairArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secret_key=secret_key,
            passphrase=passphrase,
            public_key=public_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secret_key: str,
             passphrase: Optional[str] = None,
             public_key: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'publicKey' in kwargs:
            public_key = kwargs['publicKey']

        _setter("secret_key", secret_key)
        if passphrase is not None:
            _setter("passphrase", passphrase)
        if public_key is not None:
            _setter("public_key", public_key)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: str):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[str]:
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[str]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[str]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class GetSecretNatsAccountArgs:
    def __init__(__self__, *,
                 account_id: str,
                 private_key: str):
        GetSecretNatsAccountArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_id=account_id,
            private_key=private_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_id: str,
             private_key: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accountId' in kwargs:
            account_id = kwargs['accountId']
        if 'privateKey' in kwargs:
            private_key = kwargs['privateKey']

        _setter("account_id", account_id)
        _setter("private_key", private_key)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: str):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class GetSecretOpaqueArgs:
    def __init__(__self__, *,
                 payload: str,
                 encoding: Optional[str] = None):
        GetSecretOpaqueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            payload=payload,
            encoding=encoding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             payload: str,
             encoding: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("payload", payload)
        if encoding is not None:
            _setter("encoding", encoding)

    @property
    @pulumi.getter
    def payload(self) -> str:
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: str):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[str]):
        pulumi.set(self, "encoding", value)


@pulumi.input_type
class GetSecretTlsArgs:
    def __init__(__self__, *,
                 cert: str,
                 key: str,
                 chain: Optional[str] = None):
        GetSecretTlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cert=cert,
            key=key,
            chain=chain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cert: str,
             key: str,
             chain: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("cert", cert)
        _setter("key", key)
        if chain is not None:
            _setter("chain", chain)

    @property
    @pulumi.getter
    def cert(self) -> str:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: str):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def chain(self) -> Optional[str]:
        return pulumi.get(self, "chain")

    @chain.setter
    def chain(self, value: Optional[str]):
        pulumi.set(self, "chain", value)


@pulumi.input_type
class GetSecretUserpassArgs:
    def __init__(__self__, *,
                 password: str,
                 username: str,
                 encoding: Optional[str] = None):
        GetSecretUserpassArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
            encoding=encoding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: str,
             username: str,
             encoding: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)
        _setter("username", username)
        if encoding is not None:
            _setter("encoding", encoding)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: str):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[str]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[str]):
        pulumi.set(self, "encoding", value)


