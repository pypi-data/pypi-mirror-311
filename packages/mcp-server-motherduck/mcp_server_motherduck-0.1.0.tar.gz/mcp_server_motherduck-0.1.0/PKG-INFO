Metadata-Version: 2.3
Name: mcp-server-motherduck
Version: 0.1.0
Summary: A MCP server for MotherDuck 
Author-email: tdoehmen <till@motherduck.com>
Requires-Python: >=3.10
Requires-Dist: duckdb>=1.1.3
Requires-Dist: mcp>=1.0.0
Description-Content-Type: text/markdown

# mcp-server-motherduck MCP server

A MCP server for MotherDuck 

## Components

### Resources

### Prompts

### Tools

The server implements one tool:
- read-query-motherduck: Executes a single SQL SELECT statement on MotherDuck and retrieves the result
  - Takes "query" as required string arguments

## Configuration

Set [MotherDuck token](https://motherduck.com/docs/key-tasks/authenticating-and-connecting-to-motherduck/authenticating-to-motherduck/#storing-the-access-token-as-an-environment-variable) as environment variable:
`export motherduck_token='<token>'`

## Quickstart

### Install

#### Claude Desktop

On MacOS: `~/Library/Application\ Support/Claude/claude_desktop_config.json`
On Windows: `%APPDATA%/Claude/claude_desktop_config.json`

<details>
  <summary>Development/Unpublished Servers Configuration</summary>
  ```
  "mcpServers": {
    "mcp-server-motherduck": {
      "command": "uv",
      "args": [
        "--directory",
        "/Users/<username>/mcp-server/mcp-server-motherduck",
        "run",
        "mcp-server-motherduck"
      ]
    }
  }
  ```
</details>

<details>
  <summary>Published Servers Configuration</summary>
  ```
  "mcpServers": {
    "mcp-server-motherduck": {
      "command": "uvx",
      "args": [
        "mcp-server-motherduck"
      ]
    }
  }
  ```
</details>

## Development

### Building and Publishing

To prepare the package for distribution:

1. Sync dependencies and update lockfile:
```bash
uv sync
```

2. Build package distributions:
```bash
uv build
```

This will create source and wheel distributions in the `dist/` directory.

3. Publish to PyPI:
```bash
uv publish
```

Note: You'll need to set PyPI credentials via environment variables or command flags:
- Token: `--token` or `UV_PUBLISH_TOKEN`
- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`

### Debugging

Since MCP servers run over stdio, debugging can be challenging. For the best debugging
experience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).


You can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:

```bash
npx @modelcontextprotocol/inspector uv --directory /Users/doehmen/Documents/Research/docs/ai-playground/mcp-server/mcp-server-motherduck run mcp-server-motherduck
```


Upon launching, the Inspector will display a URL that you can access in your browser to begin debugging.