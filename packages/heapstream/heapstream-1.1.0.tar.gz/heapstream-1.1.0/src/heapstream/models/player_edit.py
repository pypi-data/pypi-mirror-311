# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .only_true_enum import OnlyTrueEnum
from .player_logo_position import PlayerLogoPosition
from .player_skin import PlayerSkin


@JsonMap({})
class PlayerEdit(BaseModel):
    """PlayerEdit

    :param default: default, defaults to None
    :type default: OnlyTrueEnum, optional
    :param delete_control_bar_logo: Delete the control bar logo., defaults to None
    :type delete_control_bar_logo: bool, optional
    :param delete_logo: Delete the logo., defaults to None
    :type delete_logo: bool, optional
    :param delete_title_logo: Delete the title logo., defaults to None
    :type delete_title_logo: bool, optional
    :param description: Description of the player., defaults to None
    :type description: str, optional
    :param logo: Upload the logo that will be used inside the player video. If width\>28 or             height\>128, it will be resized while maintaining aspect ratio. Maximum filesize is 10.0 MB. File must be a valid image., defaults to None
    :type logo: bytes, optional
    :param logo_control_bar: Upload logo that appears inside the controlbar. It will be scaled down if height \> 16px. Maximum filesize is 10.0 MB. File must be a valid image., defaults to None
    :type logo_control_bar: bytes, optional
    :param logo_position: logo_position, defaults to None
    :type logo_position: PlayerLogoPosition, optional
    :param quality_menu: Whether to display the video quality menu., defaults to None
    :type quality_menu: bool, optional
    :param rewind_button: Show the rewind button., defaults to None
    :type rewind_button: bool, optional
    :param share_menu: Whether to display the share menu., defaults to None
    :type share_menu: bool, optional
    :param show_minithumbs: Whether to display minithumbs., defaults to None
    :type show_minithumbs: bool, optional
    :param show_title: Show the video title on top., defaults to None
    :type show_title: bool, optional
    :param skin: skin, defaults to None
    :type skin: PlayerSkin, optional
    :param speed_menu: Whether to display the speed menu., defaults to None
    :type speed_menu: bool, optional
    :param title: Player title that is displayed in admin., defaults to None
    :type title: str, optional
    :param title_logo: Upload logo that will appear in the title of the video. If width/height is             bigger than 24px, it will be downscaled to (24px x 24px). Maximum filesize is 10.0 MB. File must be a valid image., defaults to None
    :type title_logo: bytes, optional
    :param zoom_menu: Whether to display the zoom menu., defaults to None
    :type zoom_menu: bool, optional
    """

    def __init__(
        self,
        default: OnlyTrueEnum = None,
        delete_control_bar_logo: bool = None,
        delete_logo: bool = None,
        delete_title_logo: bool = None,
        description: str = None,
        logo: bytes = None,
        logo_control_bar: bytes = None,
        logo_position: PlayerLogoPosition = None,
        quality_menu: bool = None,
        rewind_button: bool = None,
        share_menu: bool = None,
        show_minithumbs: bool = None,
        show_title: bool = None,
        skin: PlayerSkin = None,
        speed_menu: bool = None,
        title: str = None,
        title_logo: bytes = None,
        zoom_menu: bool = None,
    ):
        """PlayerEdit

        :param default: default, defaults to None
        :type default: OnlyTrueEnum, optional
        :param delete_control_bar_logo: Delete the control bar logo., defaults to None
        :type delete_control_bar_logo: bool, optional
        :param delete_logo: Delete the logo., defaults to None
        :type delete_logo: bool, optional
        :param delete_title_logo: Delete the title logo., defaults to None
        :type delete_title_logo: bool, optional
        :param description: Description of the player., defaults to None
        :type description: str, optional
        :param logo: Upload the logo that will be used inside the player video. If width\>28 or             height\>128, it will be resized while maintaining aspect ratio. Maximum filesize is 10.0 MB. File must be a valid image., defaults to None
        :type logo: bytes, optional
        :param logo_control_bar: Upload logo that appears inside the controlbar. It will be scaled down if height \> 16px. Maximum filesize is 10.0 MB. File must be a valid image., defaults to None
        :type logo_control_bar: bytes, optional
        :param logo_position: logo_position, defaults to None
        :type logo_position: PlayerLogoPosition, optional
        :param quality_menu: Whether to display the video quality menu., defaults to None
        :type quality_menu: bool, optional
        :param rewind_button: Show the rewind button., defaults to None
        :type rewind_button: bool, optional
        :param share_menu: Whether to display the share menu., defaults to None
        :type share_menu: bool, optional
        :param show_minithumbs: Whether to display minithumbs., defaults to None
        :type show_minithumbs: bool, optional
        :param show_title: Show the video title on top., defaults to None
        :type show_title: bool, optional
        :param skin: skin, defaults to None
        :type skin: PlayerSkin, optional
        :param speed_menu: Whether to display the speed menu., defaults to None
        :type speed_menu: bool, optional
        :param title: Player title that is displayed in admin., defaults to None
        :type title: str, optional
        :param title_logo: Upload logo that will appear in the title of the video. If width/height is             bigger than 24px, it will be downscaled to (24px x 24px). Maximum filesize is 10.0 MB. File must be a valid image., defaults to None
        :type title_logo: bytes, optional
        :param zoom_menu: Whether to display the zoom menu., defaults to None
        :type zoom_menu: bool, optional
        """
        if default is not None:
            self.default = self._enum_matching(default, OnlyTrueEnum.list(), "default")
        if delete_control_bar_logo is not None:
            self.delete_control_bar_logo = delete_control_bar_logo
        if delete_logo is not None:
            self.delete_logo = delete_logo
        if delete_title_logo is not None:
            self.delete_title_logo = delete_title_logo
        if description is not None:
            self.description = self._define_str(
                "description", description, max_length=500
            )
        if logo is not None:
            self.logo = logo
        if logo_control_bar is not None:
            self.logo_control_bar = logo_control_bar
        if logo_position is not None:
            self.logo_position = self._enum_matching(
                logo_position, PlayerLogoPosition.list(), "logo_position"
            )
        if quality_menu is not None:
            self.quality_menu = quality_menu
        if rewind_button is not None:
            self.rewind_button = rewind_button
        if share_menu is not None:
            self.share_menu = share_menu
        if show_minithumbs is not None:
            self.show_minithumbs = show_minithumbs
        if show_title is not None:
            self.show_title = show_title
        if skin is not None:
            self.skin = self._enum_matching(skin, PlayerSkin.list(), "skin")
        if speed_menu is not None:
            self.speed_menu = speed_menu
        if title is not None:
            self.title = self._define_str("title", title, max_length=50)
        if title_logo is not None:
            self.title_logo = title_logo
        if zoom_menu is not None:
            self.zoom_menu = zoom_menu
