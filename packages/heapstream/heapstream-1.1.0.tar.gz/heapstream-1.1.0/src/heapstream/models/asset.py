# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .poster import Poster
from .encoding_tier import EncodingTier
from .asset_error import AssetError


@JsonMap({"id_": "id"})
class Asset(BaseModel):
    """Asset

    :param chosen_poster: The chosen poster that is displayed.
    :type chosen_poster: Poster
    :param duration: Duration of video in seconds.
    :type duration: float
    :param encoding_tier: encoding_tier
    :type encoding_tier: EncodingTier
    :param errors: List of any errors that happened when processing this asset.
    :type errors: List[AssetError]
    :param height: Height of the uploaded video.
    :type height: int
    :param id_: ID of the object.
    :type id_: str
    :param normalize_audio: Whether to normalize the audio tracks of this video.
    :type normalize_audio: bool
    :param original_link: Link to download the original video. URL expires after 24 hours by default.
    :type original_link: str
    :param watermark_id: Watermark used on this asset.
    :type watermark_id: str
    :param width: Width of the uploaded video.
    :type width: int
    """

    def __init__(
        self,
        chosen_poster: Poster,
        duration: float,
        encoding_tier: EncodingTier,
        errors: List[AssetError],
        height: int,
        id_: str,
        normalize_audio: bool,
        original_link: str,
        watermark_id: str,
        width: int,
    ):
        """Asset

        :param chosen_poster: The chosen poster that is displayed.
        :type chosen_poster: Poster
        :param duration: Duration of video in seconds.
        :type duration: float
        :param encoding_tier: encoding_tier
        :type encoding_tier: EncodingTier
        :param errors: List of any errors that happened when processing this asset.
        :type errors: List[AssetError]
        :param height: Height of the uploaded video.
        :type height: int
        :param id_: ID of the object.
        :type id_: str
        :param normalize_audio: Whether to normalize the audio tracks of this video.
        :type normalize_audio: bool
        :param original_link: Link to download the original video. URL expires after 24 hours by default.
        :type original_link: str
        :param watermark_id: Watermark used on this asset.
        :type watermark_id: str
        :param width: Width of the uploaded video.
        :type width: int
        """
        self.chosen_poster = self._define_object(chosen_poster, Poster)
        self.duration = duration
        self.encoding_tier = self._enum_matching(
            encoding_tier, EncodingTier.list(), "encoding_tier"
        )
        self.errors = self._define_list(errors, AssetError)
        self.height = height
        self.id_ = id_
        self.normalize_audio = normalize_audio
        self.original_link = original_link
        self.watermark_id = self._define_str(
            "watermark_id", watermark_id, nullable=True
        )
        self.width = width
