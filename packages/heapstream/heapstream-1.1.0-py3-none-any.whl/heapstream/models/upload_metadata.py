# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .tt_auto_lang import TtAutoLang
from .encoding_tier import EncodingTier


@JsonMap({})
class UploadMetadata(BaseModel):
    """The nested schema to upload a video.

    :param auto_tt: List of language codes to transcribe the video. If set to NULL, will use the project settings., defaults to None
    :type auto_tt: List[TtAutoLang], optional
    :param encoding_tier: The encoding tier serves as the factor that dictates the pricing and qualities accessible for the asset. By default, the encoding tier of the project is the one applied., defaults to None
    :type encoding_tier: EncodingTier, optional
    :param normalize_audio: Whether to normalize the audio tracks of this video., defaults to None
    :type normalize_audio: bool, optional
    :param size: The size of the file in bytes that will be uploaded. Needs to be exact.
    :type size: int
    :param title: Title of the video., defaults to None
    :type title: str, optional
    :param watermark_id: id of watermark to use in this video., defaults to None
    :type watermark_id: str, optional
    """

    def __init__(
        self,
        size: int,
        auto_tt: List[TtAutoLang] = None,
        encoding_tier: EncodingTier = None,
        normalize_audio: bool = None,
        title: str = None,
        watermark_id: str = None,
    ):
        """The nested schema to upload a video.

        :param auto_tt: List of language codes to transcribe the video. If set to NULL, will use the project settings., defaults to None
        :type auto_tt: List[TtAutoLang], optional
        :param encoding_tier: The encoding tier serves as the factor that dictates the pricing and qualities accessible for the asset. By default, the encoding tier of the project is the one applied., defaults to None
        :type encoding_tier: EncodingTier, optional
        :param normalize_audio: Whether to normalize the audio tracks of this video., defaults to None
        :type normalize_audio: bool, optional
        :param size: The size of the file in bytes that will be uploaded. Needs to be exact.
        :type size: int
        :param title: Title of the video., defaults to None
        :type title: str, optional
        :param watermark_id: id of watermark to use in this video., defaults to None
        :type watermark_id: str, optional
        """
        if auto_tt is not None:
            self.auto_tt = self._define_list(auto_tt, TtAutoLang)
        if encoding_tier is not None:
            self.encoding_tier = self._enum_matching(
                encoding_tier, EncodingTier.list(), "encoding_tier"
            )
        if normalize_audio is not None:
            self.normalize_audio = normalize_audio
        self.size = self._define_number("size", size, ge=1, le=9223372036854776000)
        if title is not None:
            self.title = self._define_str("title", title, nullable=True)
        if watermark_id is not None:
            self.watermark_id = self._define_str(
                "watermark_id", watermark_id, nullable=True
            )
