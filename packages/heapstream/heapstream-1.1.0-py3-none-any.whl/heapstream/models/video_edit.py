# This file was generated by liblab | https://liblab.com/

from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


@JsonMap({})
class VideoEdit(BaseModel):
    """VideoEdit

    :param description: The video description., defaults to None
    :type description: str, optional
    :param meta: A dynamic key-value store to reference video data within various systems of record. Maximum size is 1KB in json format., defaults to None
    :type meta: dict, optional
    :param password: Password is used to view private videos., defaults to None
    :type password: str, optional
    :param permalink: Link to the canonical URL of the video., defaults to None
    :type permalink: str, optional
    :param public: Whether the video is public or not. Public videos can be viewed by just having the video url., defaults to None
    :type public: bool, optional
    :param swap_id: ID of the video to swap the assets with, preserving the title,url,         embed-link, etc. Both videos need to have `completed` status., defaults to None
    :type swap_id: str, optional
    :param tags: List of strings to tag a video., defaults to None
    :type tags: List[str], optional
    :param title: Title of the video., defaults to None
    :type title: str, optional
    """

    def __init__(
        self,
        description: str = None,
        meta: dict = None,
        password: str = None,
        permalink: str = None,
        public: bool = None,
        swap_id: str = None,
        tags: List[str] = None,
        title: str = None,
    ):
        """VideoEdit

        :param description: The video description., defaults to None
        :type description: str, optional
        :param meta: A dynamic key-value store to reference video data within various systems of record. Maximum size is 1KB in json format., defaults to None
        :type meta: dict, optional
        :param password: Password is used to view private videos., defaults to None
        :type password: str, optional
        :param permalink: Link to the canonical URL of the video., defaults to None
        :type permalink: str, optional
        :param public: Whether the video is public or not. Public videos can be viewed by just having the video url., defaults to None
        :type public: bool, optional
        :param swap_id: ID of the video to swap the assets with, preserving the title,url,         embed-link, etc. Both videos need to have `completed` status., defaults to None
        :type swap_id: str, optional
        :param tags: List of strings to tag a video., defaults to None
        :type tags: List[str], optional
        :param title: Title of the video., defaults to None
        :type title: str, optional
        """
        if description is not None:
            self.description = self._define_str(
                "description", description, max_length=256
            )
        if meta is not None:
            self.meta = meta
        if password is not None:
            self.password = self._define_str("password", password, max_length=32)
        if permalink is not None:
            self.permalink = self._define_str(
                "permalink", permalink, min_length=1, max_length=2083
            )
        if public is not None:
            self.public = public
        if swap_id is not None:
            self.swap_id = swap_id
        if tags is not None:
            self.tags = tags
        if title is not None:
            self.title = self._define_str("title", title, min_length=1, max_length=64)
