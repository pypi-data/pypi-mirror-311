# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Project, ProjectCreate, ProjectEdit, ProjectList


class ProjectService(BaseService):

    @cast_models
    def list_projects(self) -> ProjectList:
        """</br>List available projects.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: ProjectList
        """

        serialized_request = (
            Serializer(f"{self.base_url}/api/v1/project", self.get_default_headers())
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return ProjectList._unmap(response)

    @cast_models
    def create_project(self, request_body: ProjectCreate) -> Project:
        """</br>Create a new project. A default player will be created with it.

        :param request_body: The request body.
        :type request_body: ProjectCreate
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Project
        """

        Validator(ProjectCreate).validate(request_body)

        serialized_request = (
            Serializer(f"{self.base_url}/api/v1/project", self.get_default_headers())
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Project._unmap(response)

    @cast_models
    def get_project(self, project_id: str) -> Project:
        """</br>Get settings of a single project by ID.

        :param project_id: The ID of the project.
        :type project_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Project
        """

        Validator(str).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Project._unmap(response)

    @cast_models
    def edit_project(self, request_body: ProjectEdit, project_id: str) -> Project:
        """</br>Edit settings that apply to a single project.

        :param request_body: The request body.
        :type request_body: ProjectEdit
        :param project_id: The ID of the project.
        :type project_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Project
        """

        Validator(ProjectEdit).validate(request_body)
        Validator(str).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Project._unmap(response)
