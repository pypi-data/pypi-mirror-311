# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import EngagementStats, PerformanceStats


class StatsService(BaseService):

    @cast_models
    def get_engagement_stats(
        self, project_id: str, video_id: str, start_date: str, end_date: str
    ) -> EngagementStats:
        """</br>Get engagement stats for a specific video.

        :param project_id: The ID of the project.
        :type project_id: str
        :param video_id: ID of the video.
        :type video_id: str
        :param start_date: The start date for the period that you want analytics for.
        :type start_date: str
        :param end_date: The end date for the period that you want analytics for.
        :type end_date: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: EngagementStats
        """

        Validator(str).validate(project_id)
        Validator(str).validate(video_id)
        Validator(str).validate(start_date)
        Validator(str).validate(end_date)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/stats/engagement/video/{{video_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .add_query("start_date", start_date)
            .add_query("end_date", end_date)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return EngagementStats._unmap(response)

    @cast_models
    def get_performance_stats(
        self, project_id: str, start_date: str, end_date: str, video_id: str = None
    ) -> PerformanceStats:
        """</br>Get performance stats about the project or a single video.

        :param project_id: The ID of the project.
        :type project_id: str
        :param start_date: The start date for the period that you want analytics for.
        :type start_date: str
        :param end_date: The end date for the period that you want analytics for.
        :type end_date: str
        :param video_id: Filter by video_id., defaults to None
        :type video_id: str, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: PerformanceStats
        """

        Validator(str).validate(project_id)
        Validator(str).validate(start_date)
        Validator(str).validate(end_date)
        Validator(str).is_optional().validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/stats/performance",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_query("video_id", video_id, nullable=True)
            .add_query("start_date", start_date)
            .add_query("end_date", end_date)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return PerformanceStats._unmap(response)
