# This file was generated by liblab | https://liblab.com/

from typing import Any
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import (
    TextTrack,
    TextTrackCreate,
    TextTrackEdit,
    TextTrackGenerate,
    TextTrackList,
)


class TextTrackService(BaseService):

    @cast_models
    def list_text_tracks(self, project_id: str, video_id: str) -> TextTrackList:
        """</br>List all text tracks associated with a given video.

        :param project_id: The ID of the project.
        :type project_id: str
        :param video_id: ID of the video.
        :type video_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TextTrackList
        """

        Validator(str).validate(project_id)
        Validator(str).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/text_track",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return TextTrackList._unmap(response)

    @cast_models
    def create_text_track(
        self, request_body: TextTrackCreate, project_id: str, video_id: str
    ) -> TextTrack:
        """</br>Upload a new text track to be used as a `caption` or `chapter`. A video can only have 1 `chapter`</br>text track.

        :param request_body: The request body.
        :type request_body: TextTrackCreate
        :param project_id: The ID of the project.
        :type project_id: str
        :param video_id: ID of the video.
        :type video_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TextTrack
        """

        Validator(TextTrackCreate).validate(request_body)
        Validator(str).validate(project_id)
        Validator(str).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/text_track",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)
        return TextTrack._unmap(response)

    @cast_models
    def generate_text_track(
        self, request_body: TextTrackGenerate, project_id: str, video_id: str
    ) -> TextTrackList:
        """</br>Generate captions using AI.

        :param request_body: The request body.
        :type request_body: TextTrackGenerate
        :param project_id: The ID of the project.
        :type project_id: str
        :param video_id: ID of the video.
        :type video_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TextTrackList
        """

        Validator(TextTrackGenerate).validate(request_body)
        Validator(str).validate(project_id)
        Validator(str).validate(video_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/text_track/generate",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return TextTrackList._unmap(response)

    @cast_models
    def edit_text_track(
        self, request_body: TextTrackEdit, project_id: str, video_id: str, track_id: str
    ) -> TextTrack:
        """</br>Update settings of a text track.

        :param request_body: The request body.
        :type request_body: TextTrackEdit
        :param project_id: The ID of the project.
        :type project_id: str
        :param video_id: ID of the video.
        :type video_id: str
        :param track_id: ID of the track.
        :type track_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: TextTrack
        """

        Validator(TextTrackEdit).validate(request_body)
        Validator(str).validate(project_id)
        Validator(str).validate(video_id)
        Validator(str).validate(track_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/text_track/{{track_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .add_path("track_id", track_id)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return TextTrack._unmap(response)

    @cast_models
    def delete_text_track(self, project_id: str, video_id: str, track_id: str) -> Any:
        """</br>Delete the text track of a video by its ID.

        :param project_id: The ID of the project.
        :type project_id: str
        :param video_id: ID of the video.
        :type video_id: str
        :param track_id: ID of the track.
        :type track_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        """

        Validator(str).validate(project_id)
        Validator(str).validate(video_id)
        Validator(str).validate(track_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/video/{{video_id}}/text_track/{{track_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("video_id", video_id)
            .add_path("track_id", track_id)
            .serialize()
            .set_method("DELETE")
        )

        response = self.send_request(serialized_request)
        return response
