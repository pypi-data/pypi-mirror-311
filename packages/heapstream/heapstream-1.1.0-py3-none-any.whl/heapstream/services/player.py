# This file was generated by liblab | https://liblab.com/

from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..models.utils.cast_models import cast_models
from ..models import Player, PlayerCreate, PlayerEdit, PlayerList


class PlayerService(BaseService):

    @cast_models
    def list_players(self, project_id: str) -> PlayerList:
        """</br>List all available players.

        :param project_id: The ID of the project.
        :type project_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: PlayerList
        """

        Validator(str).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/player",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return PlayerList._unmap(response)

    @cast_models
    def create_player(self, request_body: PlayerCreate, project_id: str) -> Player:
        """</br>Create a player for your videos.

        :param request_body: The request body.
        :type request_body: PlayerCreate
        :param project_id: The ID of the project.
        :type project_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Player
        """

        Validator(PlayerCreate).validate(request_body)
        Validator(str).validate(project_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/player",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response = self.send_request(serialized_request)
        return Player._unmap(response)

    @cast_models
    def get_player(self, project_id: str, player_id: str) -> Player:
        """</br>Return player based on ID.

        :param project_id: The ID of the project.
        :type project_id: str
        :param player_id: Id of the player.
        :type player_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Player
        """

        Validator(str).validate(project_id)
        Validator(str).validate(player_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/player/{{player_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("player_id", player_id)
            .serialize()
            .set_method("GET")
        )

        response = self.send_request(serialized_request)
        return Player._unmap(response)

    @cast_models
    def edit_player(
        self, request_body: PlayerEdit, project_id: str, player_id: str
    ) -> Player:
        """</br>Use a player ID to update specific details for a player.</br></br>NOTE: It may take up to 10 min before the new player configuration is available from our CDN.

        :param request_body: The request body.
        :type request_body: PlayerEdit
        :param project_id: The ID of the project.
        :type project_id: str
        :param player_id: Id of the player.
        :type player_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: OK
        :rtype: Player
        """

        Validator(PlayerEdit).validate(request_body)
        Validator(str).validate(project_id)
        Validator(str).validate(player_id)

        serialized_request = (
            Serializer(
                f"{self.base_url}/api/v1/project/{{project_id}}/player/{{player_id}}",
                self.get_default_headers(),
            )
            .add_path("project_id", project_id)
            .add_path("player_id", player_id)
            .serialize()
            .set_method("POST")
            .set_body(request_body, "multipart/form-data")
        )

        response = self.send_request(serialized_request)
        return Player._unmap(response)
