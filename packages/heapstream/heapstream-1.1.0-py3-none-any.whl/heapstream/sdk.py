# This file was generated by liblab | https://liblab.com/

from typing import Union
from .services.project import ProjectService
from .services.direct_upload import DirectUploadService
from .services.player import PlayerService
from .services.stats import StatsService
from .services.video import VideoService
from .services.audio_track import AudioTrackService
from .services.poster import PosterService
from .services.text_track import TextTrackService
from .services.watermark import WatermarkService
from .services.webhook import WebhookService
from .net.environment import Environment


class Heapstream:
    def __init__(
        self,
        username: str = None,
        password: str = None,
        base_url: Union[Environment, str] = Environment.DEFAULT,
        timeout: int = 60000,
    ):
        """
        Initializes Heapstream the SDK class.
        """

        self._base_url = (
            base_url.value if isinstance(base_url, Environment) else base_url
        )
        self.project = ProjectService(base_url=self._base_url)
        self.direct_upload = DirectUploadService(base_url=self._base_url)
        self.player = PlayerService(base_url=self._base_url)
        self.stats = StatsService(base_url=self._base_url)
        self.video = VideoService(base_url=self._base_url)
        self.audio_track = AudioTrackService(base_url=self._base_url)
        self.poster = PosterService(base_url=self._base_url)
        self.text_track = TextTrackService(base_url=self._base_url)
        self.watermark = WatermarkService(base_url=self._base_url)
        self.webhook = WebhookService(base_url=self._base_url)
        self.set_basic_auth(username=username, password=password)
        self.set_timeout(timeout)

    def set_base_url(self, base_url: Union[Environment, str]):
        """
        Sets the base URL for the entire SDK.

        :param Union[Environment, str] base_url: The base URL to be set.
        :return: The SDK instance.
        """
        self._base_url = (
            base_url.value if isinstance(base_url, Environment) else base_url
        )

        self.project.set_base_url(self._base_url)
        self.direct_upload.set_base_url(self._base_url)
        self.player.set_base_url(self._base_url)
        self.stats.set_base_url(self._base_url)
        self.video.set_base_url(self._base_url)
        self.audio_track.set_base_url(self._base_url)
        self.poster.set_base_url(self._base_url)
        self.text_track.set_base_url(self._base_url)
        self.watermark.set_base_url(self._base_url)
        self.webhook.set_base_url(self._base_url)

        return self

    def set_basic_auth(self, username: str, password: str):
        """
        Sets the username and password for the entire SDK.
        """
        self.project.set_basic_auth(username=username, password=password)
        self.direct_upload.set_basic_auth(username=username, password=password)
        self.player.set_basic_auth(username=username, password=password)
        self.stats.set_basic_auth(username=username, password=password)
        self.video.set_basic_auth(username=username, password=password)
        self.audio_track.set_basic_auth(username=username, password=password)
        self.poster.set_basic_auth(username=username, password=password)
        self.text_track.set_basic_auth(username=username, password=password)
        self.watermark.set_basic_auth(username=username, password=password)
        self.webhook.set_basic_auth(username=username, password=password)

        return self

    def set_timeout(self, timeout: int):
        """
        Sets the timeout for the entire SDK.

        :param int timeout: The timeout (ms) to be set.
        :return: The SDK instance.
        """
        self.project.set_timeout(timeout)
        self.direct_upload.set_timeout(timeout)
        self.player.set_timeout(timeout)
        self.stats.set_timeout(timeout)
        self.video.set_timeout(timeout)
        self.audio_track.set_timeout(timeout)
        self.poster.set_timeout(timeout)
        self.text_track.set_timeout(timeout)
        self.watermark.set_timeout(timeout)
        self.webhook.set_timeout(timeout)

        return self


# c029837e0e474b76bc487506e8799df5e3335891efe4fb02bda7a1441840310c
