Metadata-Version: 2.1
Name: modern-logger
Version: 0.1.0
Summary: Advanced logging system with real-time streaming
Home-page: UNKNOWN
Author: BANAS Yann
Author-email: yannbanas@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# modern Logger

Un syst√®me de logging avanc√© Python avec support ULID, rotation des fichiers, API REST, et bien plus encore.

## üìö Table des mati√®res
- [Caract√©ristiques](#-caract√©ristiques)
- [Installation](#-installation)
- [D√©marrage Rapide](#-d√©marrage-rapide)
- [Configurations](#-configurations)
- [Formats d'Affichage](#-formats-daffichage)
- [Modes d'Utilisation](#-modes-dutilisation)
- [API REST](#-api-rest)
- [Architecture](#-architecture)
- [Exemples Avanc√©s](#-exemples-avanc√©s)

## üåü Caract√©ristiques

- üìù **Logging Structur√©**: Utilisation d'ULID pour une tra√ßabilit√© pr√©cise
- üîÑ **Gestion Intelligente**: Rotation et compression automatique des fichiers
- üîç **Recherche Puissante**: Recherche avanc√©e avec filtres multiples
- üåê **API REST**: API compl√®te pour l'int√©gration avec d'autres services
- üìä **M√©triques**: Suivi des performances et statistiques
- üîí **S√©curit√©**: Masquage automatique des donn√©es sensibles

## üì• Installation

```bash
# Installation de base
pip install modern-logger

# Installation avec d√©pendances optionnelles
pip install modern-logger[full]
```

### Pr√©requis
- Python 3.7+
- asyncio
- FastAPI (pour l'API REST)

## üöÄ D√©marrage Rapide

### 1. Logging Simple
```python
import asyncio
from modern_logger import modernLogger

async def main():
    logger = modernLogger("MyApp")
    
    # Log basique
    await logger.log("INFO", "system", "startup", "App started", "main")
    
    # Log avec m√©tadonn√©es
    await logger.log(
        "INFO", 
        "user123",
        "login",
        "User logged in",
        "auth",
        metadata={"ip": "192.168.1.1"}
    )
    
    await logger.close()

asyncio.run(main())
```

### 2. Wrapper Pratique
```python
class AppLogger:
    def __init__(self, app_name: str):
        self.logger = modernLogger(app_name)
        
    async def info(self, message: str, user_id: str = "system"):
        await self.logger.log("INFO", user_id, "info", message, "app")
        
    async def error(self, message: str, user_id: str = "system"):
        await self.logger.log("ERROR", user_id, "error", message, "app")

# Utilisation
async def main():
    app_logger = AppLogger("MyService")
    await app_logger.info("Service d√©marr√©")
    await app_logger.error("Erreur de connexion")
```

## ‚öôÔ∏è Configurations

### Configuration par Fichier YAML
```yaml
# config.yaml
basic:
  log_dir: "logs"
  default_level: "INFO"
  locale: "fr"

performance:
  rotation_size: 5242880  # 5 MB
  buffer_size: 100
  retention_days: 30

security:
  sensitive_fields:
    - password
    - token
    - api_key
    - secret

api:
  enabled: true
  host: "0.0.0.0"
  port: 8000

display:
  format: "DETAILED"  # SHORT/DETAILED/FULL
  colors_enabled: true
```

### Configuration Programmatique
```python
logger = modernLogger(
    "MyApp",
    config_path="config.yaml",     # Fichier de config
    display_format="DETAILED",     # Format d'affichage
)
```

## üé® Formats d'Affichage

```python
# 1. Format Court (SHORT)
logger = modernLogger("MyApp", display_format="SHORT")
await logger.log("INFO", "user123", "login", "Connexion r√©ussie", "auth")
# Affiche: [INFO] User: user123 | Action: login | Description: Connexion r√©ussie

# 2. Format D√©taill√© (DETAILED)
logger = modernLogger("MyApp", display_format="DETAILED")
# Affiche: [INFO] Date: 2024-11-27 15:30:45 | User: user123 | Action: login | Description: Connexion r√©ussie | ID: 01JDQ221...

# 3. Format Complet (FULL)
logger = modernLogger("MyApp", display_format="FULL")
# Affiche le JSON complet avec toutes les informations
```

## üîÑ Modes d'Utilisation

### 1. Mode Local
```python
logger = modernLogger("LocalApp")
await logger.log(...)
```

### 2. Mode Client-Serveur

#### Serveur (log_server.py)
```python
import asyncio
from modern_logger import modernLogger, LogAPI

async def init_logger():
    return modernLogger("LogServer")

def main():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    logger = loop.run_until_complete(init_logger())
    api = LogAPI(logger)
    api.run(host="0.0.0.0", port=8000)

if __name__ == "__main__":
    main()
```

#### Client (log_client.py)
```python
from modern_logger import LogClient

async def main():
    client = LogClient("http://localhost:8000")
    
    # Log simple
    response = await client.log(
        "INFO",
        "user123",
        "action",
        "Description",
        "component"
    )
    print(response)  # {'status': 'success', 'message': 'Log created'}

asyncio.run(main())
```

## üåê API REST

### Endpoints Disponibles

| M√©thode | Endpoint | Description |
|---------|----------|-------------|
| POST | `/log` | Cr√©er un nouveau log |
| GET | `/logs` | Rechercher les logs |
| GET | `/metrics` | Obtenir les m√©triques |
| GET | `/level` | Niveau actuel |
| POST | `/level/{level}` | Changer le niveau |
| GET | `/health` | √âtat du service |
| GET | `/config` | Configuration |

### Exemple avec curl
```bash
# Cr√©er un log
curl -X POST http://localhost:8000/log \
  -H "Content-Type: application/json" \
  -d '{
    "level": "INFO",
    "user_id": "user123",
    "action": "test",
    "description": "Test message",
    "component": "api"
  }'

# Obtenir les m√©triques
curl http://localhost:8000/metrics
```

## üèóÔ∏è Architecture

```
modern_logger/
‚îú‚îÄ‚îÄ __init__.py          # Exports publics
‚îú‚îÄ‚îÄ logger.py            # Logger principal
‚îú‚îÄ‚îÄ api.py              # Interface REST
‚îú‚îÄ‚îÄ client.py           # Client HTTP
‚îú‚îÄ‚îÄ config.py           # Gestion config
‚îú‚îÄ‚îÄ core.py             # Composants centraux
‚îú‚îÄ‚îÄ models.py           # Mod√®les Pydantic
‚îú‚îÄ‚îÄ storage.py          # Gestion stockage
‚îî‚îÄ‚îÄ ulid.py             # G√©n√©rateur ULID
```

## üéØ Exemples Avanc√©s

### Gestion des Erreurs
```python
async def process_order(logger, order_data):
    try:
        await logger.log(
            "INFO",
            order_data["user_id"],
            "process_order",
            f"Processing order {order_data['id']}",
            "orders"
        )
        
        result = await process(order_data)
        
        await logger.log(
            "INFO",
            order_data["user_id"],
            "order_complete",
            f"Order {order_data['id']} processed",
            "orders",
            metadata={"result": result}
        )
        
    except Exception as e:
        await logger.log(
            "ERROR",
            order_data["user_id"],
            "order_error",
            f"Failed to process order {order_data['id']}",
            "orders",
            metadata={"error": str(e)}
        )
        raise
```
## üìä M√©triques et Statistiques

### Collecter des M√©triques
```python
async def analyze_metrics(logger):
    # Obtenir les statistiques sur 24h
    stats = await logger.get_statistics(24)
    
    print(f"Total logs: {stats['total_logs']}")
    print(f"Taux d'erreur: {stats['error_rate']}%")
    print("\nLogs par niveau:")
    for level, count in stats['logs_by_level'].items():
        print(f"- {level}: {count}")
```

### Monitorer en Temps R√©el
```python
async def monitor_logs(logger):
    client = Client(id="monitor", log_level="INFO")
    logger.subscribe(client)
    
    try:
        while True:
            print("\nEn attente de nouveaux logs...")
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.unsubscribe(client.id)
```

## üîç Recherche Avanc√©e

### Recherche par Crit√®res
```python
async def search_example(logger):
    # Recherche simple
    logs = await logger.storage.search_logs(
        query="error",
        level="ERROR"
    )
    
    # Recherche avec plage de dates
    from datetime import datetime, timedelta
    end_time = datetime.now()
    start_time = end_time - timedelta(hours=24)
    
    critical_logs = await logger.storage.search_logs(
        level="ERROR",
        start_time=start_time,
        end_time=end_time
    )
```

## üõ°Ô∏è S√©curit√© et Sanitization

### Configuration des Champs Sensibles
```yaml
# security_config.yaml
sensitive_fields:
  - password
  - token
  - credit_card
  - ssn
  - api_key
  - secret
  - authorization
```

### Exemple avec Donn√©es Sensibles
```python
async def process_user_data(logger, user_data):
    # Les champs sensibles seront automatiquement masqu√©s
    await logger.log(
        "INFO",
        user_data["id"],
        "user_update",
        "User data updated",
        "users",
        metadata={
            "password": "secret123",  # Sera masqu√©
            "email": "user@example.com",
            "api_key": "ak_123456"  # Sera masqu√©
        }
    )
```

## üîÑ Rotation et Nettoyage

### Configuration de la Rotation
```python
logger = modernLogger(
    "MyApp",
    config={
        "rotation_size": 5 * 1024 * 1024,  # 5 MB
        "retention_days": 30,
        "compression_enabled": True
    }
)
```

### Nettoyage Manuel
```python
async def maintenance(logger):
    # Nettoyer les logs plus vieux que retention_days
    await logger.cleanup()
    
    # Forcer une rotation
    await logger.storage._rotate_file()
```

## üåê Configuration API Avanc√©e

### Configuration du Serveur
```python
from modern_logger import modernLogger, LogAPI
from fastapi.middleware.cors import CORSMiddleware

async def setup_api():
    logger = modernLogger("APIServer")
    api = LogAPI(logger)
    
    # Configuration CORS
    api.app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_methods=["*"],
        allow_headers=["*"]
    )
    
    return api

# Lancement avec configuration personnalis√©e
api = asyncio.run(setup_api())
api.run(
    host="0.0.0.0",
    port=8000,
    workers=4,
    reload=True  # En d√©veloppement
)
```

### Client API Avanc√©
```python
class EnhancedLogClient:
    def __init__(self, base_url: str, service_name: str):
        self.client = LogClient(base_url)
        self.service = service_name
    
    async def log_with_context(
        self,
        level: str,
        user_id: str,
        action: str,
        description: str,
        metadata: dict = None
    ):
        try:
            metadata = metadata or {}
            metadata["service"] = self.service
            metadata["timestamp"] = datetime.now().isoformat()
            
            response = await self.client.log(
                level,
                user_id,
                action,
                description,
                "enhanced",
                metadata
            )
            
            if response.get("status") != "success":
                print(f"Warning: Log non cr√©√© - {response.get('message')}")
                
            return response
            
        except Exception as e:
            print(f"Erreur de logging: {e}")
            return None

# Utilisation
client = EnhancedLogClient("http://localhost:8000", "UserService")
await client.log_with_context(
    "INFO",
    "user123",
    "login",
    "Connexion r√©ussie",
    {"ip": "192.168.1.1"}
)
```

## üìà Visualisation des Logs

Le package peut √™tre int√©gr√© avec des outils de visualisation comme Grafana ou Kibana. Voici un exemple avec une interface web simple :

```python
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard():
    return """
    <html>
        <head>
            <title>Log Dashboard</title>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
        </head>
        <body>
            <div id="logChart"></div>
            <script>
                async function updateChart() {
                    const response = await fetch('/metrics');
                    const data = await response.json();
                    
                    Plotly.newPlot('logChart', [{
                        x: Object.keys(data.logs_by_level),
                        y: Object.values(data.logs_by_level),
                        type: 'bar'
                    }]);
                }
                
                updateChart();
                setInterval(updateChart, 5000);
            </script>
        </body>
    </html>
    """
```

## ü§ù Contribution

Les contributions sont les bienvenues ! Voici comment contribuer :

1. Fork le projet
2. Cr√©ez votre branche (`git checkout -b feature/AmazingFeature`)
3. Committez vos changements (`git commit -m 'Add AmazingFeature'`)
4. Push sur la branche (`git push origin feature/AmazingFeature`)
5. Ouvrez une Pull Request

## üìÑ License

Ce projet est sous licence MIT. Voir le fichier `LICENSE` pour plus de d√©tails.

