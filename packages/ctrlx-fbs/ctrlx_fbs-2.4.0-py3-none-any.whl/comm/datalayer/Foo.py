# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Foo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 12

    # Foo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Foo
    def A(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Foo
    def B(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Foo
    def C(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateFoo(builder, a, b, c):
    builder.Prep(4, 12)
    builder.PrependFloat32(c)
    builder.PrependFloat32(b)
    builder.PrependFloat32(a)
    return builder.Offset()


class FooT(object):

    # FooT
    def __init__(self):
        self.a = 0.0  # type: float
        self.b = 0.0  # type: float
        self.c = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        foo = Foo()
        foo.Init(buf, pos)
        return cls.InitFromObj(foo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, foo):
        x = FooT()
        x._UnPack(foo)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.a == other.a and \
            self.b == other.b and \
            self.c == other.c

    # FooT
    def _UnPack(self, foo):
        if foo is None:
            return
        self.a = foo.A()
        self.b = foo.B()
        self.c = foo.C()

    # FooT
    def Pack(self, builder):
        return CreateFoo(builder, self.a, self.b, self.c)
