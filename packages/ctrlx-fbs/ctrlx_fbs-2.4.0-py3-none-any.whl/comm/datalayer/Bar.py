# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Diagnosis of nvram
class Bar(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Bar()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBar(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Bar
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # List of corrupted memory areas in nvram
    # Bar
    def Test(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from comm.datalayer.Foo import Foo
            obj = Foo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BarStart(builder): builder.StartObject(1)
def Start(builder):
    return BarStart(builder)
def BarAddTest(builder, test): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(test), 0)
def AddTest(builder, test):
    return BarAddTest(builder, test)
def BarEnd(builder): return builder.EndObject()
def End(builder):
    return BarEnd(builder)
import comm.datalayer.Foo
try:
    from typing import Optional
except:
    pass

class BarT(object):

    # BarT
    def __init__(self):
        self.test = None  # type: Optional[comm.datalayer.Foo.FooT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        bar = Bar()
        bar.Init(buf, pos)
        return cls.InitFromObj(bar)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, bar):
        x = BarT()
        x._UnPack(bar)
        return x

    def __eq__(self, other):
        return type(self) == type(other) and \
            self.test == other.test

    # BarT
    def _UnPack(self, bar):
        if bar is None:
            return
        if bar.Test() is not None:
            self.test = comm.datalayer.Foo.FooT.InitFromObj(bar.Test())

    # BarT
    def Pack(self, builder):
        BarStart(builder)
        if self.test is not None:
            test = self.test.Pack(builder)
            BarAddTest(builder, test)
        bar = BarEnd(builder)
        return bar
