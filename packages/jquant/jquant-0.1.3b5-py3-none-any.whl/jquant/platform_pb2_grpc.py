# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from . import platform_pb2 as platform__pb2

GRPC_GENERATED_VERSION = "1.64.0"
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = "1.65.0"
SCHEDULED_RELEASE_DATE = "June 25, 2024"
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in platform_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
        + f" This warning will become an error in {EXPECTED_ERROR_RELEASE},"
        + f" scheduled for release on {SCHEDULED_RELEASE_DATE}.",
        RuntimeWarning,
    )


class StreamServiceStub(object):
    """数据流服务"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.stream_stream(
            "/jquant.api.v1.StreamService/Subscribe",
            request_serializer=platform__pb2.SubscribeRequest.SerializeToString,
            response_deserializer=platform__pb2.SubscribeReply.FromString,
            _registered_method=True,
        )


class StreamServiceServicer(object):
    """数据流服务"""

    def Subscribe(self, request_iterator, context):
        """订阅数据流"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_StreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Subscribe": grpc.stream_stream_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=platform__pb2.SubscribeRequest.FromString,
            response_serializer=platform__pb2.SubscribeReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "jquant.api.v1.StreamService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "jquant.api.v1.StreamService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class StreamService(object):
    """数据流服务"""

    @staticmethod
    def Subscribe(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/jquant.api.v1.StreamService/Subscribe",
            platform__pb2.SubscribeRequest.SerializeToString,
            platform__pb2.SubscribeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class ExchangeServiceStub(object):
    """交易服务
    //行情接口///
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTicker = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetTicker",
            request_serializer=platform__pb2.GetTickerRequest.SerializeToString,
            response_deserializer=platform__pb2.GetTickerReply.FromString,
            _registered_method=True,
        )
        self.GetTickers = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetTickers",
            request_serializer=platform__pb2.GetTickersRequest.SerializeToString,
            response_deserializer=platform__pb2.GetTickersReply.FromString,
            _registered_method=True,
        )
        self.GetOrderBook = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetOrderBook",
            request_serializer=platform__pb2.GetOrderBookRequest.SerializeToString,
            response_deserializer=platform__pb2.GetOrderBookReply.FromString,
            _registered_method=True,
        )
        self.GetKline = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetKline",
            request_serializer=platform__pb2.GetKlineRequest.SerializeToString,
            response_deserializer=platform__pb2.GetKlineReply.FromString,
            _registered_method=True,
        )
        self.Cancel = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/Cancel",
            request_serializer=platform__pb2.CancelRequest.SerializeToString,
            response_deserializer=platform__pb2.CancelReply.FromString,
            _registered_method=True,
        )
        self.Buy = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/Buy",
            request_serializer=platform__pb2.BuyRequest.SerializeToString,
            response_deserializer=platform__pb2.BuyReply.FromString,
            _registered_method=True,
        )
        self.Sell = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/Sell",
            request_serializer=platform__pb2.SellRequest.SerializeToString,
            response_deserializer=platform__pb2.SellReply.FromString,
            _registered_method=True,
        )
        self.CloseBuy = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/CloseBuy",
            request_serializer=platform__pb2.CloseBuyRequest.SerializeToString,
            response_deserializer=platform__pb2.CloseBuyReply.FromString,
            _registered_method=True,
        )
        self.CloseSell = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/CloseSell",
            request_serializer=platform__pb2.CloseSellRequest.SerializeToString,
            response_deserializer=platform__pb2.CloseSellReply.FromString,
            _registered_method=True,
        )
        self.GetOrder = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetOrder",
            request_serializer=platform__pb2.GetOrderRequest.SerializeToString,
            response_deserializer=platform__pb2.GetOrderReply.FromString,
            _registered_method=True,
        )
        self.GetOrders = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetOrders",
            request_serializer=platform__pb2.GetOrdersRequest.SerializeToString,
            response_deserializer=platform__pb2.GetOrdersReply.FromString,
            _registered_method=True,
        )
        self.SetLeverage = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/SetLeverage",
            request_serializer=platform__pb2.SetLeverageRequest.SerializeToString,
            response_deserializer=platform__pb2.SetLeverageReply.FromString,
            _registered_method=True,
        )
        self.GetPosition = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetPosition",
            request_serializer=platform__pb2.GetPositionRequest.SerializeToString,
            response_deserializer=platform__pb2.GetPositionReply.FromString,
            _registered_method=True,
        )
        self.GetInstruments = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetInstruments",
            request_serializer=platform__pb2.GetInstrumentsRequest.SerializeToString,
            response_deserializer=platform__pb2.GetInstrumentsReply.FromString,
            _registered_method=True,
        )
        self.GetConfig = channel.unary_unary(
            "/jquant.api.v1.ExchangeService/GetConfig",
            request_serializer=platform__pb2.GetConfigRequest.SerializeToString,
            response_deserializer=platform__pb2.GetConfigReply.FromString,
            _registered_method=True,
        )


class ExchangeServiceServicer(object):
    """交易服务
    //行情接口///
    """

    def GetTicker(self, request, context):
        """获取指定标的的最新行情"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTickers(self, request, context):
        """获取多个标的的最新行情"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOrderBook(self, request, context):
        """获取指定标的的深度(排单)"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetKline(self, request, context):
        """获取指定标的的K线"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Cancel(self, request, context):
        """//交易接口

        取消
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Buy(self, request, context):
        """现货买入
        期货买入做多(开多单)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Sell(self, request, context):
        """现货卖出
        期货卖出做空(开空单)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CloseBuy(self, request, context):
        """期货卖出平仓(平多单)"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CloseSell(self, request, context):
        """期货买入平仓(平空单)"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOrder(self, request, context):
        """获取指定订单的信息"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOrders(self, request, context):
        """获取指定标的和状态的所有订单"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetLeverage(self, request, context):
        """设置杠杆倍数"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetPosition(self, request, context):
        """获取当前持仓,现货,期货"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetInstruments(self, request, context):
        """获取标的列表"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetConfig(self, request, context):
        """获取配置"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExchangeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetTicker": grpc.unary_unary_rpc_method_handler(
            servicer.GetTicker,
            request_deserializer=platform__pb2.GetTickerRequest.FromString,
            response_serializer=platform__pb2.GetTickerReply.SerializeToString,
        ),
        "GetTickers": grpc.unary_unary_rpc_method_handler(
            servicer.GetTickers,
            request_deserializer=platform__pb2.GetTickersRequest.FromString,
            response_serializer=platform__pb2.GetTickersReply.SerializeToString,
        ),
        "GetOrderBook": grpc.unary_unary_rpc_method_handler(
            servicer.GetOrderBook,
            request_deserializer=platform__pb2.GetOrderBookRequest.FromString,
            response_serializer=platform__pb2.GetOrderBookReply.SerializeToString,
        ),
        "GetKline": grpc.unary_unary_rpc_method_handler(
            servicer.GetKline,
            request_deserializer=platform__pb2.GetKlineRequest.FromString,
            response_serializer=platform__pb2.GetKlineReply.SerializeToString,
        ),
        "Cancel": grpc.unary_unary_rpc_method_handler(
            servicer.Cancel,
            request_deserializer=platform__pb2.CancelRequest.FromString,
            response_serializer=platform__pb2.CancelReply.SerializeToString,
        ),
        "Buy": grpc.unary_unary_rpc_method_handler(
            servicer.Buy,
            request_deserializer=platform__pb2.BuyRequest.FromString,
            response_serializer=platform__pb2.BuyReply.SerializeToString,
        ),
        "Sell": grpc.unary_unary_rpc_method_handler(
            servicer.Sell,
            request_deserializer=platform__pb2.SellRequest.FromString,
            response_serializer=platform__pb2.SellReply.SerializeToString,
        ),
        "CloseBuy": grpc.unary_unary_rpc_method_handler(
            servicer.CloseBuy,
            request_deserializer=platform__pb2.CloseBuyRequest.FromString,
            response_serializer=platform__pb2.CloseBuyReply.SerializeToString,
        ),
        "CloseSell": grpc.unary_unary_rpc_method_handler(
            servicer.CloseSell,
            request_deserializer=platform__pb2.CloseSellRequest.FromString,
            response_serializer=platform__pb2.CloseSellReply.SerializeToString,
        ),
        "GetOrder": grpc.unary_unary_rpc_method_handler(
            servicer.GetOrder,
            request_deserializer=platform__pb2.GetOrderRequest.FromString,
            response_serializer=platform__pb2.GetOrderReply.SerializeToString,
        ),
        "GetOrders": grpc.unary_unary_rpc_method_handler(
            servicer.GetOrders,
            request_deserializer=platform__pb2.GetOrdersRequest.FromString,
            response_serializer=platform__pb2.GetOrdersReply.SerializeToString,
        ),
        "SetLeverage": grpc.unary_unary_rpc_method_handler(
            servicer.SetLeverage,
            request_deserializer=platform__pb2.SetLeverageRequest.FromString,
            response_serializer=platform__pb2.SetLeverageReply.SerializeToString,
        ),
        "GetPosition": grpc.unary_unary_rpc_method_handler(
            servicer.GetPosition,
            request_deserializer=platform__pb2.GetPositionRequest.FromString,
            response_serializer=platform__pb2.GetPositionReply.SerializeToString,
        ),
        "GetInstruments": grpc.unary_unary_rpc_method_handler(
            servicer.GetInstruments,
            request_deserializer=platform__pb2.GetInstrumentsRequest.FromString,
            response_serializer=platform__pb2.GetInstrumentsReply.SerializeToString,
        ),
        "GetConfig": grpc.unary_unary_rpc_method_handler(
            servicer.GetConfig,
            request_deserializer=platform__pb2.GetConfigRequest.FromString,
            response_serializer=platform__pb2.GetConfigReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "jquant.api.v1.ExchangeService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "jquant.api.v1.ExchangeService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class ExchangeService(object):
    """交易服务
    //行情接口///
    """

    @staticmethod
    def GetTicker(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetTicker",
            platform__pb2.GetTickerRequest.SerializeToString,
            platform__pb2.GetTickerReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetTickers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetTickers",
            platform__pb2.GetTickersRequest.SerializeToString,
            platform__pb2.GetTickersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetOrderBook(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetOrderBook",
            platform__pb2.GetOrderBookRequest.SerializeToString,
            platform__pb2.GetOrderBookReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetKline(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetKline",
            platform__pb2.GetKlineRequest.SerializeToString,
            platform__pb2.GetKlineReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Cancel(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/Cancel",
            platform__pb2.CancelRequest.SerializeToString,
            platform__pb2.CancelReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Buy(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/Buy",
            platform__pb2.BuyRequest.SerializeToString,
            platform__pb2.BuyReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Sell(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/Sell",
            platform__pb2.SellRequest.SerializeToString,
            platform__pb2.SellReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CloseBuy(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/CloseBuy",
            platform__pb2.CloseBuyRequest.SerializeToString,
            platform__pb2.CloseBuyReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CloseSell(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/CloseSell",
            platform__pb2.CloseSellRequest.SerializeToString,
            platform__pb2.CloseSellReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetOrder",
            platform__pb2.GetOrderRequest.SerializeToString,
            platform__pb2.GetOrderReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetOrders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetOrders",
            platform__pb2.GetOrdersRequest.SerializeToString,
            platform__pb2.GetOrdersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SetLeverage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/SetLeverage",
            platform__pb2.SetLeverageRequest.SerializeToString,
            platform__pb2.SetLeverageReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetPosition(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetPosition",
            platform__pb2.GetPositionRequest.SerializeToString,
            platform__pb2.GetPositionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetInstruments(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetInstruments",
            platform__pb2.GetInstrumentsRequest.SerializeToString,
            platform__pb2.GetInstrumentsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jquant.api.v1.ExchangeService/GetConfig",
            platform__pb2.GetConfigRequest.SerializeToString,
            platform__pb2.GetConfigReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
