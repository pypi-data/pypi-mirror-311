"""
    Copyright 2024 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import mitogen


typedef operation_t as string matching self in ["replace", "merge", "remove"]
"""
Define the type of operation to apply for a batch of data in a desired state.
These operations are inspired from the netconf yang specifications and have the
same semantic.
cf. https://datatracker.ietf.org/doc/html/rfc4741#section-7.2
"""

typedef json_format_t as string matching self in ["json", "yaml"]


entity File extends std::PurgeableResource:
    """
        This represents a file on the filesystem

        :attr path: The path of the file
        :attr mode: The permissions of the file
        :attr owner: The owner of the file
        :attr group: The group of the file
        :attr content: The file contents
        :attr content_separator: A string to use to join all of the prefix/suffix content
            entities together.
    """
    string path
    int? mode = null
    string? owner = null
    string? group = null
    string content
    string content_separator = "\n"
    bool send_event = true
end
File.via [0:1] -- mitogen::Context
"""
Mitogen context dedicated to this resource.  If not specified, defaults
to the one of the host.
"""

File.host [1] -- std::Host
"""
Relation to the host on which the file should be deployed.
"""

File.prefix_content [0:] -- Content
"""
Relation to content that should be inserted at the start of the file.
"""

File.suffix_content [0:] -- Content
"""
Relation to content that should be appended at the end of the file.
"""

index File(host, path)

implement File using fileHost

entity Content:
    """
        A content block as a prefix or suffix to a file. This blocks are only merged with the content at export time. This
        is an advanced pattern that can be used to speed up the compilation in very specific use cases.

        :attr sorting_key: The key to use to sort the content blocks in the same list. When this attribute is not set
                           value is used as sorting key.
        :attr value: The value to prepend or append
    """
    string? sorting_key=null
    string value
end

implement Content using std::none

entity ConfigFile extends File:
    """
        A file with often used defaults for configuration files.
    """
    int? mode = 644
    string? owner = "root"
    string? group = "root"
end

implement ConfigFile using fileHost

implementation fileHost for File:
    self.requires = self.host.requires
end

entity Directory extends std::PurgeableResource:
    """
        A directory on the filesystem

        :attr path: The path of the directory
        :attr mode: The permissions of the directory
        :attr owner: The owner of the directory
        :attr group: The group of the directory
    """
    string path
    int? mode = null
    string? owner = null
    string? group = null
    bool send_event = true
end
Directory.via [0:1] -- mitogen::Context
"""
Mitogen context dedicated to this resource.  If not specified, defaults
to the one of the host.
"""

Directory.host [1] -- std::Host
"""
Relation to the host on which the directory should be deployed.
"""

index Directory(host, path)

implement Directory using dirHost

entity DefaultDirectory extends Directory:
    """
        A directory that is world readable. It is also writable for its owner root.
    """
    int? mode = 755
    string? owner = "root"
    string? group = "root"
end

implement DefaultDirectory using dirHost

implementation dirHost for Directory:
    self.requires = self.host.requires
end

entity Symlink extends std::PurgeableResource:
    """
    A symbolic link on the filesystem

    :attr src: The path on the file system that the created symlink should point to.
    :attr dst: The path on the filesystem where the symlink should be created.
    """
    string src
    string dst
    bool send_event = true
end
Symlink.via [0:1] -- mitogen::Context
"""
Mitogen context dedicated to this resource.  If not specified, defaults
to the one of the host.
"""

Symlink.host [1] -- std::Host
"""
Relation to the host where the symlink should be deployed.
"""

index Symlink(host, dst)

implement Symlink using symHost

implementation symHost for Symlink:
    self.requires = self.host.requires
end


entity JsonFile extends std::PurgeableResource:
    """
    A JsonFile on the given host.  The resource contains a set of values
    that needs to be enforced on the given file.  See fs::JsonValue for
    more information about the usage of said values.
    This resource can be split into multiple ones, which share the management
    of the file. This is ideal for managing files which need to be part of
    multiple resource sets.

    The following example will make sure that:
    1. The file /tmp/example.json exists
    2. The file is a valid json file
    3. The json object of the file contains a key "bob", which has as value
        the given dict: {"name": "bob", "age"; 31}

    ..code-block::

        fs::JsonFile(
            host=...,
            path="/tmp/example.json",
            resource_discriminator="bob",
            values=[
                JsonObject(
                    path="bob",
                    value={"name": "bob", "age": 31},
                ),
            ],
        )

    :attr path: The path where the file should be managed.
    :attr resource_discriminator: An additional field which allows
        to create multiple resources for a single file.
    :attr mode: The permissions to set on the file
    :attr owner: The name of the user owning of the file
    :attr group: The name of the group owning the file
    :attr indent: The indentiation to use when writing in the file.
    :attr format: The format the json content is supposed to be written in.
    """
    string path
    string resource_discriminator = ""
    int? mode = null
    string? owner = null
    string? group = null
    int indent = 2
    json_format_t format = "json"
    bool send_event = true
end
JsonFile.host [1] -- std::Host
"""
The host that this file is managed on.
"""

JsonFile.via [0:1] -- mitogen::Context
"""
Mitogen context dedicated to this resource.  If not specified, defaults
to the one of the host.
"""

JsonFile.values [0:] -- fs::JsonValue.json_file [1]
"""
The set of values that will be enforced in the file.
"""

index JsonFile(host, path, resource_discriminator)

implement JsonFile using std::none

entity JsonValue:
    """
    A value present in a json file.  This is an abstract entity, it should be
    extended for each type of value that can be set in the desired state.
    The children entities should have one attribute: `value`, that should contain
    the value to enforce, whichever type it is.

    :attr path: A dict path expression pointing to an element in the json
        file.  The dict path operation should respect what is defined here
        https://github.com/inmanta/inmanta-core/blob/master/src/inmanta/util/dict_path.py
    :attr operation: The way the value should be enforced in the file.
    """
    string path
    operation_t operation = "replace"
end

index JsonValue(json_file, path)


entity JsonObject extends JsonValue:
    """
    A json object value in a json file.

    :attr value: The dict value to set for this value.
    """
    dict value
end

implement JsonObject using std::none
