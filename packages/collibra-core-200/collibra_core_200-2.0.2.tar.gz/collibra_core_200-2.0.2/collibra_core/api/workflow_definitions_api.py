# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_core.api_client import ApiClient


class WorkflowDefinitionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_asset_type_assignment_rule(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Add asset type assignment rule.  # noqa: E501

        Adds an asset type assignment rule to the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_asset_type_assignment_rule(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param AddAssetTypeAssignmentRuleRequest body: The request describing assignment rule to be added.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_asset_type_assignment_rule_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_asset_type_assignment_rule_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def add_asset_type_assignment_rule_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Add asset type assignment rule.  # noqa: E501

        Adds an asset type assignment rule to the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_asset_type_assignment_rule_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param AddAssetTypeAssignmentRuleRequest body: The request describing assignment rule to be added.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_asset_type_assignment_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `add_asset_type_assignment_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_domain_type_assignment_rule(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Add domain type assignment rule.  # noqa: E501

        Adds a domain type assignment rule to the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_domain_type_assignment_rule(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param AddDomainTypeAssignmentRuleRequest body: The request describing assignment rule to be added.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_domain_type_assignment_rule_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_domain_type_assignment_rule_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def add_domain_type_assignment_rule_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Add domain type assignment rule.  # noqa: E501

        Adds a domain type assignment rule to the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_domain_type_assignment_rule_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param AddDomainTypeAssignmentRuleRequest body: The request describing assignment rule to be added.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_domain_type_assignment_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `add_domain_type_assignment_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_asset_type_assignment_rule(self, workflow_definition_id, rule_id, **kwargs):  # noqa: E501
        """Change asset type assignment rule.  # noqa: E501

        Modifies the asset type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_asset_type_assignment_rule(workflow_definition_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param str rule_id: The ID of the assignment rule to be changed. (required)
        :param ChangeAssetTypeAssignmentRuleRequest body: Parameters for the assignment rule to be changed.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_asset_type_assignment_rule_with_http_info(workflow_definition_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_asset_type_assignment_rule_with_http_info(workflow_definition_id, rule_id, **kwargs)  # noqa: E501
            return data

    def change_asset_type_assignment_rule_with_http_info(self, workflow_definition_id, rule_id, **kwargs):  # noqa: E501
        """Change asset type assignment rule.  # noqa: E501

        Modifies the asset type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_asset_type_assignment_rule_with_http_info(workflow_definition_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param str rule_id: The ID of the assignment rule to be changed. (required)
        :param ChangeAssetTypeAssignmentRuleRequest body: Parameters for the assignment rule to be changed.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'rule_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_asset_type_assignment_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `change_asset_type_assignment_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `change_asset_type_assignment_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules/{ruleId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_domain_type_assignment_rule(self, workflow_definition_id, rule_id, **kwargs):  # noqa: E501
        """Change domain type assignment rule.  # noqa: E501

        Modifies the domain type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_domain_type_assignment_rule(workflow_definition_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param str rule_id: The ID of the assignment rule to be changed. (required)
        :param ChangeDomainTypeAssignmentRuleRequest body: Parameters for the assignment rule to be changed.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_domain_type_assignment_rule_with_http_info(workflow_definition_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_domain_type_assignment_rule_with_http_info(workflow_definition_id, rule_id, **kwargs)  # noqa: E501
            return data

    def change_domain_type_assignment_rule_with_http_info(self, workflow_definition_id, rule_id, **kwargs):  # noqa: E501
        """Change domain type assignment rule.  # noqa: E501

        Modifies the domain type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_domain_type_assignment_rule_with_http_info(workflow_definition_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param str rule_id: The ID of the assignment rule to be changed. (required)
        :param ChangeDomainTypeAssignmentRuleRequest body: Parameters for the assignment rule to be changed.
        :return: AssetAssignmentRuleImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'rule_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_domain_type_assignment_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `change_domain_type_assignment_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `change_domain_type_assignment_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules/{ruleId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAssignmentRuleImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_workflow_definition(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Change workflow definition.  # noqa: E501

        Modifies the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_workflow_definition(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param ChangeWorkflowDefinitionRequest body: Parameters for the workflow definition to be changed.
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_workflow_definition_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_workflow_definition_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def change_workflow_definition_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Change workflow definition.  # noqa: E501

        Modifies the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_workflow_definition_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param ChangeWorkflowDefinitionRequest body: Parameters for the workflow definition to be changed.
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_workflow_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `change_workflow_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowDefinitionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy_workflow_definition(self, **kwargs):  # noqa: E501
        """Deploy workflow definition.  # noqa: E501

        Deploys workflow definition (the business process and resources) using the specified request.<p> The input stream can represent a single file(e.g: .bpmn20.xml or .bpmn) or an archive file (e.g: .zip or .bar). It is not allowed to deploy a resource containing more than one process definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_workflow_definition(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :param str file_name:
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_workflow_definition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deploy_workflow_definition_with_http_info(**kwargs)  # noqa: E501
            return data

    def deploy_workflow_definition_with_http_info(self, **kwargs):  # noqa: E501
        """Deploy workflow definition.  # noqa: E501

        Deploys workflow definition (the business process and resources) using the specified request.<p> The input stream can represent a single file(e.g: .bpmn20.xml or .bpmn) or an archive file (e.g: .zip or .bar). It is not allowed to deploy a resource containing more than one process definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_workflow_definition_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :param str file_name:
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_workflow_definition" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'file_name' in params:
            form_params.append(('fileName', params['file_name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowDefinitionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_workflow_definitions(self, **kwargs):  # noqa: E501
        """Find workflow definitions.  # noqa: E501

        Finds the workflow definitions matching the criteria described in the request object. By default, the result contains up to 1000 workflow definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_workflow_definitions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param list[str] asset_id: The list of the IDs of business items (assets) for which the workflow definitions should be found.
        :param list[str] domain_id: The list of the IDs of business items (domains) for which the workflow definitions should be found.
        :param list[str] community_id: The list of the IDs of business items (communities) for which the workflow definitions should be found.
        :param bool enabled: Whether the found workflow definitions should be enabled.
        :param bool _global: Whether the found workflow definitions should be global.
        :param str name: The name (could be partial) of the workflow definition to search for.
        :param str sort_order: The sorting order.
        :param str sort_field: The field on which the results are sorted.
        :param str description: The description (could be partial) of the workflow definition to search for.
        :param str guardrails_validation_result: The result of the guardrails validation of this workflow definition
        :return: WorkflowDefinitionPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_workflow_definitions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_workflow_definitions_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_workflow_definitions_with_http_info(self, **kwargs):  # noqa: E501
        """Find workflow definitions.  # noqa: E501

        Finds the workflow definitions matching the criteria described in the request object. By default, the result contains up to 1000 workflow definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_workflow_definitions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param list[str] asset_id: The list of the IDs of business items (assets) for which the workflow definitions should be found.
        :param list[str] domain_id: The list of the IDs of business items (domains) for which the workflow definitions should be found.
        :param list[str] community_id: The list of the IDs of business items (communities) for which the workflow definitions should be found.
        :param bool enabled: Whether the found workflow definitions should be enabled.
        :param bool _global: Whether the found workflow definitions should be global.
        :param str name: The name (could be partial) of the workflow definition to search for.
        :param str sort_order: The sorting order.
        :param str sort_field: The field on which the results are sorted.
        :param str description: The description (could be partial) of the workflow definition to search for.
        :param str guardrails_validation_result: The result of the guardrails validation of this workflow definition
        :return: WorkflowDefinitionPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'asset_id', 'domain_id', 'community_id', 'enabled', '_global', 'name', 'sort_order', 'sort_field', 'description', 'guardrails_validation_result']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_workflow_definitions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'asset_id' in params:
            query_params.append(('assetId', params['asset_id']))  # noqa: E501
            collection_formats['assetId'] = 'multi'  # noqa: E501
        if 'domain_id' in params:
            query_params.append(('domainId', params['domain_id']))  # noqa: E501
            collection_formats['domainId'] = 'multi'  # noqa: E501
        if 'community_id' in params:
            query_params.append(('communityId', params['community_id']))  # noqa: E501
            collection_formats['communityId'] = 'multi'  # noqa: E501
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501
        if '_global' in params:
            query_params.append(('global', params['_global']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'guardrails_validation_result' in params:
            query_params.append(('guardrailsValidationResult', params['guardrails_validation_result']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowDefinitionPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_configuration_start_form_data(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get configuration start form data.  # noqa: E501

        Returns the task configuration start form data of the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_configuration_start_form_data(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition that should be used for the form data retrieval. (required)
        :param str form_property_type: The form type to be returned.
        :return: StartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_configuration_start_form_data_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_configuration_start_form_data_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def get_configuration_start_form_data_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get configuration start form data.  # noqa: E501

        Returns the task configuration start form data of the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_configuration_start_form_data_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition that should be used for the form data retrieval. (required)
        :param str form_property_type: The form type to be returned.
        :return: StartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'form_property_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_configuration_start_form_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `get_configuration_start_form_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []
        if 'form_property_type' in params:
            query_params.append(('formPropertyType', params['form_property_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/configurationStartFormData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartFormDataImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_possible_start_events(self, **kwargs):  # noqa: E501
        """Get all possible workflow start events  # noqa: E501

        Returns all possible workflow start events, including event name and description  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_possible_start_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NamedDescribedWorkflowStartEventType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_possible_start_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_possible_start_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_possible_start_events_with_http_info(self, **kwargs):  # noqa: E501
        """Get all possible workflow start events  # noqa: E501

        Returns all possible workflow start events, including event name and description  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_possible_start_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[NamedDescribedWorkflowStartEventType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_possible_start_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/startEvents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NamedDescribedWorkflowStartEventType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_start_form_data(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get start form data.  # noqa: E501

        Returns the task start form data of the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_start_form_data(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition that should be used for the form data retrieval. (required)
        :param str form_property_type: The form type to be returned.
        :return: StartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_start_form_data_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_start_form_data_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def get_start_form_data_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get start form data.  # noqa: E501

        Returns the task start form data of the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_start_form_data_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition that should be used for the form data retrieval. (required)
        :param str form_property_type: The form type to be returned.
        :return: StartFormDataImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'form_property_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_start_form_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `get_start_form_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []
        if 'form_property_type' in params:
            query_params.append(('formPropertyType', params['form_property_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/startFormData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartFormDataImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_definition(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get workflow definition.  # noqa: E501

        Returns the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_definition_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_definition_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_definition_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get workflow definition.  # noqa: E501

        Returns the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `get_workflow_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowDefinitionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_definition_by_process_id(self, process_id, **kwargs):  # noqa: E501
        """Get workflow definition.  # noqa: E501

        Returns the workflow definition with the specified process ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition_by_process_id(process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str process_id: The process ID of the workflow definition. (required)
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_definition_by_process_id_with_http_info(process_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_definition_by_process_id_with_http_info(process_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_definition_by_process_id_with_http_info(self, process_id, **kwargs):  # noqa: E501
        """Get workflow definition.  # noqa: E501

        Returns the workflow definition with the specified process ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition_by_process_id_with_http_info(process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str process_id: The process ID of the workflow definition. (required)
        :return: WorkflowDefinitionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_definition_by_process_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params or
                params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `get_workflow_definition_by_process_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'process_id' in params:
            path_params['processId'] = params['process_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/process/{processId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowDefinitionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_definition_diagram(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get process diagram.  # noqa: E501

        Returns the process diagram of the workflow definition with the specified ID. The diagram input stream returned can be null as deployed workflow definitions without graphical notation included do not have a diagram.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition_diagram(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_definition_diagram_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_definition_diagram_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_definition_diagram_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get process diagram.  # noqa: E501

        Returns the process diagram of the workflow definition with the specified ID. The diagram input stream returned can be null as deployed workflow definitions without graphical notation included do not have a diagram.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition_diagram_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_definition_diagram" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `get_workflow_definition_diagram`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/diagram', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_definition_xml(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get XML of workflow definition.  # noqa: E501

        Returns the XML source of the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition_xml(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_definition_xml_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_definition_xml_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_definition_xml_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Get XML of workflow definition.  # noqa: E501

        Returns the XML source of the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_definition_xml_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_definition_xml" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `get_workflow_definition_xml`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/xml', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_assignment_rule(self, workflow_definition_id, rule_id, **kwargs):  # noqa: E501
        """Remove assignment rule.  # noqa: E501

        Removes the assignment rule with the specified ID from the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_assignment_rule(workflow_definition_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param str rule_id: The ID of the assignment rule. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_assignment_rule_with_http_info(workflow_definition_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_assignment_rule_with_http_info(workflow_definition_id, rule_id, **kwargs)  # noqa: E501
            return data

    def remove_assignment_rule_with_http_info(self, workflow_definition_id, rule_id, **kwargs):  # noqa: E501
        """Remove assignment rule.  # noqa: E501

        Removes the assignment rule with the specified ID from the workflow definition with the specified ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_assignment_rule_with_http_info(workflow_definition_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :param str rule_id: The ID of the assignment rule. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_assignment_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `remove_assignment_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `remove_assignment_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}/assignmentRules/{ruleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_workflow_definition(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Remove workflow definition.  # noqa: E501

        Removes the workflow definition with the specified ID. The workflow definition will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_workflow_definition(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_workflow_definition_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_workflow_definition_with_http_info(workflow_definition_id, **kwargs)  # noqa: E501
            return data

    def remove_workflow_definition_with_http_info(self, workflow_definition_id, **kwargs):  # noqa: E501
        """Remove workflow definition.  # noqa: E501

        Removes the workflow definition with the specified ID. The workflow definition will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_workflow_definition_with_http_info(workflow_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_definition_id: The ID of the workflow definition. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_definition_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_workflow_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_definition_id' is set
        if ('workflow_definition_id' not in params or
                params['workflow_definition_id'] is None):
            raise ValueError("Missing the required parameter `workflow_definition_id` when calling `remove_workflow_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_definition_id' in params:
            path_params['workflowDefinitionId'] = params['workflow_definition_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/{workflowDefinitionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_workflow_definitions_in_job(self, **kwargs):  # noqa: E501
        """Remove multiple workflow definitions.  # noqa: E501

        Removes multiple workflow definitions asynchronously. The workflow definition(s) will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_workflow_definitions_in_job(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The list of IDs of the workflow definitions to remove.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_workflow_definitions_in_job_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remove_workflow_definitions_in_job_with_http_info(**kwargs)  # noqa: E501
            return data

    def remove_workflow_definitions_in_job_with_http_info(self, **kwargs):  # noqa: E501
        """Remove multiple workflow definitions.  # noqa: E501

        Removes multiple workflow definitions asynchronously. The workflow definition(s) will be completely removed from the application, including any history.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_workflow_definitions_in_job_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The list of IDs of the workflow definitions to remove.
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_workflow_definitions_in_job" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowDefinitions/removalJobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
