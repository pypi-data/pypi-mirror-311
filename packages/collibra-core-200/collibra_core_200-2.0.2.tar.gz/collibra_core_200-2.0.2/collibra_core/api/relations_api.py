# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_core.api_client import ApiClient


class RelationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_relation(self, **kwargs):  # noqa: E501
        """Adds a new relation.  # noqa: E501

        Adds a new relation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_relation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddRelationRequest body: The properties of the relation to be added
        :return: RelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_relation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_relation_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_relation_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new relation.  # noqa: E501

        Adds a new relation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_relation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddRelationRequest body: The properties of the relation to be added
        :return: RelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_relation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelationImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_relations(self, **kwargs):  # noqa: E501
        """Adds multiple relations in one go.  # noqa: E501

        Adds multiple relations in one gos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_relations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddRelationRequest] body: List of the properties of the relations to be added.
        :return: list[RelationImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_relations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_relations_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_relations_with_http_info(self, **kwargs):  # noqa: E501
        """Adds multiple relations in one go.  # noqa: E501

        Adds multiple relations in one gos.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_relations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddRelationRequest] body: List of the properties of the relations to be added.
        :return: list[RelationImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_relations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RelationImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_relation(self, relation_id, **kwargs):  # noqa: E501
        """Changes the relation with the information that is present in the request.  # noqa: E501

        Changes the relation with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_relation(relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str relation_id: The ID of the relation to be changed. (required)
        :param ChangeRelationRequest body: The properties of the relation to be changed.
        :return: RelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_relation_with_http_info(relation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_relation_with_http_info(relation_id, **kwargs)  # noqa: E501
            return data

    def change_relation_with_http_info(self, relation_id, **kwargs):  # noqa: E501
        """Changes the relation with the information that is present in the request.  # noqa: E501

        Changes the relation with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_relation_with_http_info(relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str relation_id: The ID of the relation to be changed. (required)
        :param ChangeRelationRequest body: The properties of the relation to be changed.
        :return: RelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['relation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_relation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'relation_id' is set
        if ('relation_id' not in params or
                params['relation_id'] is None):
            raise ValueError("Missing the required parameter `relation_id` when calling `change_relation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'relation_id' in params:
            path_params['relationId'] = params['relation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations/{relationId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelationImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_relations(self, **kwargs):  # noqa: E501
        """Changes multiple relations.  # noqa: E501

        Changes multiple relations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_relations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ChangeRelationRequest] body: The list of properties of the relations to be changed.
        :return: list[RelationImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_relations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.change_relations_with_http_info(**kwargs)  # noqa: E501
            return data

    def change_relations_with_http_info(self, **kwargs):  # noqa: E501
        """Changes multiple relations.  # noqa: E501

        Changes multiple relations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_relations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ChangeRelationRequest] body: The list of properties of the relations to be changed.
        :return: list[RelationImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_relations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations/bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RelationImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_relations(self, **kwargs):  # noqa: E501
        """Returns relations matching the given search criteria.  # noqa: E501

        Returns relations matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned relations satisfy all constraints that are specified in this search criteria. By default a result containing 1000 relations is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_relations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.
        :param str cursor: Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).
        :param str relation_type_id: The ID of the type of relations to search for.
        :param str source_id: The ID of the source of relations to search for.
        :param str target_id: The ID of the target of relations to search for.
        :param str source_target_logical_operator: The logical operator determining how to combine the source and target criteria: AND or OR.
        :return: RelationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_relations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_relations_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_relations_with_http_info(self, **kwargs):  # noqa: E501
        """Returns relations matching the given search criteria.  # noqa: E501

        Returns relations matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned relations satisfy all constraints that are specified in this search criteria. By default a result containing 1000 relations is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_relations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.
        :param str cursor: Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).
        :param str relation_type_id: The ID of the type of relations to search for.
        :param str source_id: The ID of the source of relations to search for.
        :param str target_id: The ID of the target of relations to search for.
        :param str source_target_logical_operator: The logical operator determining how to combine the source and target criteria: AND or OR.
        :return: RelationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'cursor', 'relation_type_id', 'source_id', 'target_id', 'source_target_logical_operator']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_relations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'relation_type_id' in params:
            query_params.append(('relationTypeId', params['relation_type_id']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('sourceId', params['source_id']))  # noqa: E501
        if 'target_id' in params:
            query_params.append(('targetId', params['target_id']))  # noqa: E501
        if 'source_target_logical_operator' in params:
            query_params.append(('sourceTargetLogicalOperator', params['source_target_logical_operator']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelationPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_relation(self, relation_id, **kwargs):  # noqa: E501
        """Returns a relation identified by given id.  # noqa: E501

        Returns a relation identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relation(relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str relation_id: the ID of the relation (required)
        :return: RelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_relation_with_http_info(relation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_relation_with_http_info(relation_id, **kwargs)  # noqa: E501
            return data

    def get_relation_with_http_info(self, relation_id, **kwargs):  # noqa: E501
        """Returns a relation identified by given id.  # noqa: E501

        Returns a relation identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relation_with_http_info(relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str relation_id: the ID of the relation (required)
        :return: RelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['relation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'relation_id' is set
        if ('relation_id' not in params or
                params['relation_id'] is None):
            raise ValueError("Missing the required parameter `relation_id` when calling `get_relation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'relation_id' in params:
            path_params['relationId'] = params['relation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations/{relationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RelationImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_relation(self, relation_id, **kwargs):  # noqa: E501
        """Removes a relation identified by given id.  # noqa: E501

        Removes a relation identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_relation(relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str relation_id: the ID of the relation to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_relation_with_http_info(relation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_relation_with_http_info(relation_id, **kwargs)  # noqa: E501
            return data

    def remove_relation_with_http_info(self, relation_id, **kwargs):  # noqa: E501
        """Removes a relation identified by given id.  # noqa: E501

        Removes a relation identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_relation_with_http_info(relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str relation_id: the ID of the relation to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['relation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_relation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'relation_id' is set
        if ('relation_id' not in params or
                params['relation_id'] is None):
            raise ValueError("Missing the required parameter `relation_id` when calling `remove_relation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'relation_id' in params:
            path_params['relationId'] = params['relation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations/{relationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_relations(self, **kwargs):  # noqa: E501
        """Removes multiple relations.  # noqa: E501

        Removes multiple relations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_relations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: the IDs of the relations to be removed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_relations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remove_relations_with_http_info(**kwargs)  # noqa: E501
            return data

    def remove_relations_with_http_info(self, **kwargs):  # noqa: E501
        """Removes multiple relations.  # noqa: E501

        Removes multiple relations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_relations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: the IDs of the relations to be removed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_relations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/relations/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
