# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_core.api_client import ApiClient


class WorkflowTasksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_workflow_task(self, workflow_task_id, **kwargs):  # noqa: E501
        """Cancel workflow task.  # noqa: E501

        Cancels the workflow task with the specified ID with a reason. If the given workflow is a subprocess, this method makes sure everything is cancelled from the root process instance. If the given task is not found, this method will assume it already was cancelled without throwing any error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_workflow_task(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: The ID of the workflow task. (required)
        :param str body: The reason for the cancellation of the workflow task.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_workflow_task_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_workflow_task_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
            return data

    def cancel_workflow_task_with_http_info(self, workflow_task_id, **kwargs):  # noqa: E501
        """Cancel workflow task.  # noqa: E501

        Cancels the workflow task with the specified ID with a reason. If the given workflow is a subprocess, this method makes sure everything is cancelled from the root process instance. If the given task is not found, this method will assume it already was cancelled without throwing any error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_workflow_task_with_http_info(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: The ID of the workflow task. (required)
        :param str body: The reason for the cancellation of the workflow task.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_task_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_workflow_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_task_id' is set
        if ('workflow_task_id' not in params or
                params['workflow_task_id'] is None):
            raise ValueError("Missing the required parameter `workflow_task_id` when calling `cancel_workflow_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_task_id' in params:
            path_params['workflowTaskId'] = params['workflow_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/{workflowTaskId}/canceled', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def complete_workflow_tasks(self, **kwargs):  # noqa: E501
        """Complete workflow tasks.  # noqa: E501

        Completes tasks based on the provided request and returns the following tasks, if the same user is assigned to them.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_workflow_tasks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompleteWorkflowTasksRequest body: Request to complete the workflow tasks.
        :return: list[WorkflowTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complete_workflow_tasks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.complete_workflow_tasks_with_http_info(**kwargs)  # noqa: E501
            return data

    def complete_workflow_tasks_with_http_info(self, **kwargs):  # noqa: E501
        """Complete workflow tasks.  # noqa: E501

        Completes tasks based on the provided request and returns the following tasks, if the same user is assigned to them.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_workflow_tasks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CompleteWorkflowTasksRequest body: Request to complete the workflow tasks.
        :return: list[WorkflowTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complete_workflow_tasks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/completed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkflowTask]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_workflow_tasks(self, **kwargs):  # noqa: E501
        """Find workflow tasks.  # noqa: E501

        Returns the workflow tasks matching given search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_workflow_tasks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str business_item_id: The ID of the business item
        :param str business_item_type: The type of the business item
        :param str workflow_task_user_relation: The type of relation between user and searched tasks. This could be either set to search for all the tasks the user is permitted to view or just those assigned to the user.
        :param str business_item_name: The part of the name of the business item.
        :param str description: The part of the task description.
        :param str user_id: The ID of the user for which the tasks need to be returned. If empty, the current logged in user will be used
        :param int create_date: The creation date of the task. It is the timestamp (in UTC time standard)
        :param int due_date: The due date of the task. It is the timestamp (in UTC time standard)
        :param str title: The title/name of the task.
        :param str type: The task type.
        :param str sort_field: The field on which the results are sorted. On due date by default.
        :param str sort_order: The sorting order.
        :return: WorkflowTaskPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_workflow_tasks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_workflow_tasks_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_workflow_tasks_with_http_info(self, **kwargs):  # noqa: E501
        """Find workflow tasks.  # noqa: E501

        Returns the workflow tasks matching given search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_workflow_tasks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str business_item_id: The ID of the business item
        :param str business_item_type: The type of the business item
        :param str workflow_task_user_relation: The type of relation between user and searched tasks. This could be either set to search for all the tasks the user is permitted to view or just those assigned to the user.
        :param str business_item_name: The part of the name of the business item.
        :param str description: The part of the task description.
        :param str user_id: The ID of the user for which the tasks need to be returned. If empty, the current logged in user will be used
        :param int create_date: The creation date of the task. It is the timestamp (in UTC time standard)
        :param int due_date: The due date of the task. It is the timestamp (in UTC time standard)
        :param str title: The title/name of the task.
        :param str type: The task type.
        :param str sort_field: The field on which the results are sorted. On due date by default.
        :param str sort_order: The sorting order.
        :return: WorkflowTaskPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'business_item_id', 'business_item_type', 'workflow_task_user_relation', 'business_item_name', 'description', 'user_id', 'create_date', 'due_date', 'title', 'type', 'sort_field', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_workflow_tasks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'business_item_id' in params:
            query_params.append(('businessItemId', params['business_item_id']))  # noqa: E501
        if 'business_item_type' in params:
            query_params.append(('businessItemType', params['business_item_type']))  # noqa: E501
        if 'workflow_task_user_relation' in params:
            query_params.append(('workflowTaskUserRelation', params['workflow_task_user_relation']))  # noqa: E501
        if 'business_item_name' in params:
            query_params.append(('businessItemName', params['business_item_name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'create_date' in params:
            query_params.append(('createDate', params['create_date']))  # noqa: E501
        if 'due_date' in params:
            query_params.append(('dueDate', params['due_date']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowTaskPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_task_form_data(self, workflow_task_id, **kwargs):  # noqa: E501
        """Get task form data.  # noqa: E501

        Returns the task form data of the workflow task with the specified ID and form property type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_form_data(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: Workflow task ID. (required)
        :param str form_property_type: Form property type.
        :return: TaskFormData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_task_form_data_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_task_form_data_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
            return data

    def get_task_form_data_with_http_info(self, workflow_task_id, **kwargs):  # noqa: E501
        """Get task form data.  # noqa: E501

        Returns the task form data of the workflow task with the specified ID and form property type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_task_form_data_with_http_info(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: Workflow task ID. (required)
        :param str form_property_type: Form property type.
        :return: TaskFormData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_task_id', 'form_property_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task_form_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_task_id' is set
        if ('workflow_task_id' not in params or
                params['workflow_task_id'] is None):
            raise ValueError("Missing the required parameter `workflow_task_id` when calling `get_task_form_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_task_id' in params:
            path_params['workflowTaskId'] = params['workflow_task_id']  # noqa: E501

        query_params = []
        if 'form_property_type' in params:
            query_params.append(('formPropertyType', params['form_property_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/{workflowTaskId}/taskFormData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskFormData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_task(self, workflow_task_id, **kwargs):  # noqa: E501
        """Get workflow task.  # noqa: E501

        Returns the workflow task with the specified ID. A task will only be returned when the user has the correct permission to view it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_task(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: The ID of the workflow task to return. (required)
        :return: WorkflowTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_task_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_task_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
            return data

    def get_workflow_task_with_http_info(self, workflow_task_id, **kwargs):  # noqa: E501
        """Get workflow task.  # noqa: E501

        Returns the workflow task with the specified ID. A task will only be returned when the user has the correct permission to view it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workflow_task_with_http_info(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: The ID of the workflow task to return. (required)
        :return: WorkflowTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_task_id' is set
        if ('workflow_task_id' not in params or
                params['workflow_task_id'] is None):
            raise ValueError("Missing the required parameter `workflow_task_id` when calling `get_workflow_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_task_id' in params:
            path_params['workflowTaskId'] = params['workflow_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/{workflowTaskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reassign_task(self, workflow_task_id, **kwargs):  # noqa: E501
        """Reassign task.  # noqa: E501

        Reassigns the task with the specified ID to one or more users, groups or roles. Caller needs to provide at least one of the value list for users, groups or roles. If roles are provided then the same number of communities needs to be provided also.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reassign_task(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: The ID of the workflow task. (required)
        :param list[str] users: The user IDs to reassign to.
        :param list[str] groups: The group IDs to reassign to.
        :param list[str] roles: The role IDs to reassign to.
        :param list[str] communities: The Community IDs of the specified roles to reassign to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reassign_task_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reassign_task_with_http_info(workflow_task_id, **kwargs)  # noqa: E501
            return data

    def reassign_task_with_http_info(self, workflow_task_id, **kwargs):  # noqa: E501
        """Reassign task.  # noqa: E501

        Reassigns the task with the specified ID to one or more users, groups or roles. Caller needs to provide at least one of the value list for users, groups or roles. If roles are provided then the same number of communities needs to be provided also.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reassign_task_with_http_info(workflow_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workflow_task_id: The ID of the workflow task. (required)
        :param list[str] users: The user IDs to reassign to.
        :param list[str] groups: The group IDs to reassign to.
        :param list[str] roles: The role IDs to reassign to.
        :param list[str] communities: The Community IDs of the specified roles to reassign to.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow_task_id', 'users', 'groups', 'roles', 'communities']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reassign_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow_task_id' is set
        if ('workflow_task_id' not in params or
                params['workflow_task_id'] is None):
            raise ValueError("Missing the required parameter `workflow_task_id` when calling `reassign_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_task_id' in params:
            path_params['workflowTaskId'] = params['workflow_task_id']  # noqa: E501

        query_params = []
        if 'users' in params:
            query_params.append(('users', params['users']))  # noqa: E501
            collection_formats['users'] = 'multi'  # noqa: E501
        if 'groups' in params:
            query_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'multi'  # noqa: E501
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501
            collection_formats['roles'] = 'multi'  # noqa: E501
        if 'communities' in params:
            query_params.append(('communities', params['communities']))  # noqa: E501
            collection_formats['communities'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/workflowTasks/{workflowTaskId}/reassign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
