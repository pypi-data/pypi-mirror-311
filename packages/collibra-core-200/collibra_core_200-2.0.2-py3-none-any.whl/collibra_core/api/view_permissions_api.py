# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_core.api_client import ApiClient


class ViewPermissionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_view_permission(self, **kwargs):  # noqa: E501
        """Adds a view permission. It can be applied only to 'Community' and 'Domain' resource types.  # noqa: E501

        Adds a view permission. It can be applied only to 'Community' and 'Domain' resource types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_view_permission(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddViewPermissionRequest body: Properties of the new view permission. Valid resource types are: 'Community', 'Domain'.
        :return: ViewPermissionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_view_permission_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_view_permission_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_view_permission_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a view permission. It can be applied only to 'Community' and 'Domain' resource types.  # noqa: E501

        Adds a view permission. It can be applied only to 'Community' and 'Domain' resource types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_view_permission_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddViewPermissionRequest body: Properties of the new view permission. Valid resource types are: 'Community', 'Domain'.
        :return: ViewPermissionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_view_permission" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/viewPermissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViewPermissionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_view_permissions(self, **kwargs):  # noqa: E501
        """Finds view permissions with given criteria.  # noqa: E501

        Finds view permissions with given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_view_permissions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str user_id: The ID of the user for whom the view permission applies.
        :param str user_group_id: The ID of the user group for whose members the view permission applies.
        :param str resource_id: The ID of the community or domain to which the view permissions apply.
        :param str resource_type: Deprecated. Use <code>Community</code> or <code>Domain</code> to only retrieve view permissions assigned directly on a community or domain respectively. Do not use this filter in conjunction with the <code>resourceId</code> parameter.
        :param bool include_inherited: When you provide a <code>resourceId</code>, setting this parameter to <code>true</code> also returns the view permissions inherited from a parent community.
        :return: PagedResponseViewPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_view_permissions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_view_permissions_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_view_permissions_with_http_info(self, **kwargs):  # noqa: E501
        """Finds view permissions with given criteria.  # noqa: E501

        Finds view permissions with given criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_view_permissions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str user_id: The ID of the user for whom the view permission applies.
        :param str user_group_id: The ID of the user group for whose members the view permission applies.
        :param str resource_id: The ID of the community or domain to which the view permissions apply.
        :param str resource_type: Deprecated. Use <code>Community</code> or <code>Domain</code> to only retrieve view permissions assigned directly on a community or domain respectively. Do not use this filter in conjunction with the <code>resourceId</code> parameter.
        :param bool include_inherited: When you provide a <code>resourceId</code>, setting this parameter to <code>true</code> also returns the view permissions inherited from a parent community.
        :return: PagedResponseViewPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'user_id', 'user_group_id', 'resource_id', 'resource_type', 'include_inherited']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_view_permissions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'user_group_id' in params:
            query_params.append(('userGroupId', params['user_group_id']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resourceId', params['resource_id']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resourceType', params['resource_type']))  # noqa: E501
        if 'include_inherited' in params:
            query_params.append(('includeInherited', params['include_inherited']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/viewPermissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseViewPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_view_permission(self, view_permission_id, **kwargs):  # noqa: E501
        """Retrieves a view permission.  # noqa: E501

        Retrieves a view permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_permission(view_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_permission_id: Identifier of the view permission to retrieve. (required)
        :return: ViewPermissionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_view_permission_with_http_info(view_permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_permission_with_http_info(view_permission_id, **kwargs)  # noqa: E501
            return data

    def get_view_permission_with_http_info(self, view_permission_id, **kwargs):  # noqa: E501
        """Retrieves a view permission.  # noqa: E501

        Retrieves a view permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_view_permission_with_http_info(view_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_permission_id: Identifier of the view permission to retrieve. (required)
        :return: ViewPermissionImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_permission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_view_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_permission_id' is set
        if ('view_permission_id' not in params or
                params['view_permission_id'] is None):
            raise ValueError("Missing the required parameter `view_permission_id` when calling `get_view_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_permission_id' in params:
            path_params['viewPermissionId'] = params['view_permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/viewPermissions/{viewPermissionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViewPermissionImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_view_permission(self, view_permission_id, **kwargs):  # noqa: E501
        """Removes a view permission.  # noqa: E501

        Removes a view permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_view_permission(view_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_permission_id: Identifier of the view permission to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_view_permission_with_http_info(view_permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_view_permission_with_http_info(view_permission_id, **kwargs)  # noqa: E501
            return data

    def remove_view_permission_with_http_info(self, view_permission_id, **kwargs):  # noqa: E501
        """Removes a view permission.  # noqa: E501

        Removes a view permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_view_permission_with_http_info(view_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_permission_id: Identifier of the view permission to remove. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_permission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_view_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_permission_id' is set
        if ('view_permission_id' not in params or
                params['view_permission_id'] is None):
            raise ValueError("Missing the required parameter `view_permission_id` when calling `remove_view_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_permission_id' in params:
            path_params['viewPermissionId'] = params['view_permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/viewPermissions/{viewPermissionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
