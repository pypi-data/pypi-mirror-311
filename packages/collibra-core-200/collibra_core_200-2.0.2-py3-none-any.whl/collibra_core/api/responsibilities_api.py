# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_core.api_client import ApiClient


class ResponsibilitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_responsibilities(self, **kwargs):  # noqa: E501
        """Adds multiple responsibilities in one go.  # noqa: E501

        Adds multiple responsibilities in one go. Assigns the given users to the resources with the given roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_responsibilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddResponsibilityRequest] body:
        :return: list[ResponsibilityImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_responsibilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_responsibilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_responsibilities_with_http_info(self, **kwargs):  # noqa: E501
        """Adds multiple responsibilities in one go.  # noqa: E501

        Adds multiple responsibilities in one go. Assigns the given users to the resources with the given roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_responsibilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddResponsibilityRequest] body:
        :return: list[ResponsibilityImpl]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_responsibilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResponsibilityImpl]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_responsibility(self, **kwargs):  # noqa: E501
        """Adds a new responsibility.  # noqa: E501

        Adds new responsibility. Assigns given user to resource with given role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_responsibility(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResponsibilityRequest body:
        :return: ResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_responsibility_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_responsibility_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_responsibility_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new responsibility.  # noqa: E501

        Adds new responsibility. Assigns given user to resource with given role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_responsibility_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddResponsibilityRequest body:
        :return: ResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_responsibility" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponsibilityImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_responsibilities(self, **kwargs):  # noqa: E501
        """Finds responsibilities.  # noqa: E501

        Returns responsibilities matching the given search criteria.  Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned responsibilities satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 responsibilities is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_responsibilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param list[str] resource_ids: The list of IDs of the resources for which the responsibilities should be found.
        :param list[str] owner_ids: The list of IDs of the owners for which the responsibilities should be found.
        :param list[str] role_ids: The list of IDs of the roles for which the responsibilities should be found.
        :param bool include_inherited: Whether inherited responsibilities should be included in the search results.
        :param bool global_only: Whether only global responsibilities should be searched.
        :param str sort_field: The field that should be used as reference for sorting.
        :param str sort_order: The order of sorting.
        :param str type: Indicates which type of responsibilities should be searched for. Usage is mutually exclusive with the deprecated globalOnly flag.
        :return: PagedResponseResponsibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_responsibilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_responsibilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_responsibilities_with_http_info(self, **kwargs):  # noqa: E501
        """Finds responsibilities.  # noqa: E501

        Returns responsibilities matching the given search criteria.  Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned responsibilities satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 responsibilities is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_responsibilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param list[str] resource_ids: The list of IDs of the resources for which the responsibilities should be found.
        :param list[str] owner_ids: The list of IDs of the owners for which the responsibilities should be found.
        :param list[str] role_ids: The list of IDs of the roles for which the responsibilities should be found.
        :param bool include_inherited: Whether inherited responsibilities should be included in the search results.
        :param bool global_only: Whether only global responsibilities should be searched.
        :param str sort_field: The field that should be used as reference for sorting.
        :param str sort_order: The order of sorting.
        :param str type: Indicates which type of responsibilities should be searched for. Usage is mutually exclusive with the deprecated globalOnly flag.
        :return: PagedResponseResponsibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'resource_ids', 'owner_ids', 'role_ids', 'include_inherited', 'global_only', 'sort_field', 'sort_order', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_responsibilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'resource_ids' in params:
            query_params.append(('resourceIds', params['resource_ids']))  # noqa: E501
            collection_formats['resourceIds'] = 'multi'  # noqa: E501
        if 'owner_ids' in params:
            query_params.append(('ownerIds', params['owner_ids']))  # noqa: E501
            collection_formats['ownerIds'] = 'multi'  # noqa: E501
        if 'role_ids' in params:
            query_params.append(('roleIds', params['role_ids']))  # noqa: E501
            collection_formats['roleIds'] = 'multi'  # noqa: E501
        if 'include_inherited' in params:
            query_params.append(('includeInherited', params['include_inherited']))  # noqa: E501
        if 'global_only' in params:
            query_params.append(('globalOnly', params['global_only']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResponseResponsibility',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_responsibility(self, responsibility_id, **kwargs):  # noqa: E501
        """Returns the responsibility identified by the given id.  # noqa: E501

        Returns the responsibility identified by the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_responsibility(responsibility_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str responsibility_id: The unique identifier of the responsibility. (required)
        :return: ResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_responsibility_with_http_info(responsibility_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_responsibility_with_http_info(responsibility_id, **kwargs)  # noqa: E501
            return data

    def get_responsibility_with_http_info(self, responsibility_id, **kwargs):  # noqa: E501
        """Returns the responsibility identified by the given id.  # noqa: E501

        Returns the responsibility identified by the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_responsibility_with_http_info(responsibility_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str responsibility_id: The unique identifier of the responsibility. (required)
        :return: ResponsibilityImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['responsibility_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_responsibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'responsibility_id' is set
        if ('responsibility_id' not in params or
                params['responsibility_id'] is None):
            raise ValueError("Missing the required parameter `responsibility_id` when calling `get_responsibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'responsibility_id' in params:
            path_params['responsibilityId'] = params['responsibility_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/{responsibilityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponsibilityImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_responsibilities(self, **kwargs):  # noqa: E501
        """Removes multiple responsibilities in one go.  # noqa: E501

        Removes multiple responsibilities in one go identified by given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_responsibilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The unique identifiers of the responsibilities.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_responsibilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remove_responsibilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def remove_responsibilities_with_http_info(self, **kwargs):  # noqa: E501
        """Removes multiple responsibilities in one go.  # noqa: E501

        Removes multiple responsibilities in one go identified by given ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_responsibilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body: The unique identifiers of the responsibilities.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_responsibilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_responsibility(self, responsibility_id, **kwargs):  # noqa: E501
        """Removes the responsibility identified by the given id.  # noqa: E501

        Removes the responsibility identified by the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_responsibility(responsibility_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str responsibility_id: The unique identifier of the responsibility. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_responsibility_with_http_info(responsibility_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_responsibility_with_http_info(responsibility_id, **kwargs)  # noqa: E501
            return data

    def remove_responsibility_with_http_info(self, responsibility_id, **kwargs):  # noqa: E501
        """Removes the responsibility identified by the given id.  # noqa: E501

        Removes the responsibility identified by the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_responsibility_with_http_info(responsibility_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str responsibility_id: The unique identifier of the responsibility. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['responsibility_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_responsibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'responsibility_id' is set
        if ('responsibility_id' not in params or
                params['responsibility_id'] is None):
            raise ValueError("Missing the required parameter `responsibility_id` when calling `remove_responsibility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'responsibility_id' in params:
            path_params['responsibilityId'] = params['responsibility_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/responsibilities/{responsibilityId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
