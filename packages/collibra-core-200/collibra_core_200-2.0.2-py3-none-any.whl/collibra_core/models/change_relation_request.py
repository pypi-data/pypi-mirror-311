# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangeRelationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'source_id': 'str',
        'target_id': 'str',
        'starting_date': 'int',
        'ending_date': 'int'
    }

    attribute_map = {
        'id': 'id',
        'source_id': 'sourceId',
        'target_id': 'targetId',
        'starting_date': 'startingDate',
        'ending_date': 'endingDate'
    }

    def __init__(self, id=None, source_id=None, target_id=None, starting_date=None, ending_date=None):  # noqa: E501
        """ChangeRelationRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_id = None
        self._target_id = None
        self._starting_date = None
        self._ending_date = None
        self.discriminator = None
        self.id = id
        if source_id is not None:
            self.source_id = source_id
        if target_id is not None:
            self.target_id = target_id
        if starting_date is not None:
            self.starting_date = starting_date
        if ending_date is not None:
            self.ending_date = ending_date

    @property
    def id(self):
        """Gets the id of this ChangeRelationRequest.  # noqa: E501

        The ID of the relation to be changed. Silently ignored if the ID is provided as path parameter of the request.  # noqa: E501

        :return: The id of this ChangeRelationRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeRelationRequest.

        The ID of the relation to be changed. Silently ignored if the ID is provided as path parameter of the request.  # noqa: E501

        :param id: The id of this ChangeRelationRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def source_id(self):
        """Gets the source_id of this ChangeRelationRequest.  # noqa: E501

        The ID of the new source for the relation.  # noqa: E501

        :return: The source_id of this ChangeRelationRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ChangeRelationRequest.

        The ID of the new source for the relation.  # noqa: E501

        :param source_id: The source_id of this ChangeRelationRequest.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def target_id(self):
        """Gets the target_id of this ChangeRelationRequest.  # noqa: E501

        The ID of the new target for the relation.  # noqa: E501

        :return: The target_id of this ChangeRelationRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this ChangeRelationRequest.

        The ID of the new target for the relation.  # noqa: E501

        :param target_id: The target_id of this ChangeRelationRequest.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def starting_date(self):
        """Gets the starting_date of this ChangeRelationRequest.  # noqa: E501

        The new starting date for the relation.  # noqa: E501

        :return: The starting_date of this ChangeRelationRequest.  # noqa: E501
        :rtype: int
        """
        return self._starting_date

    @starting_date.setter
    def starting_date(self, starting_date):
        """Sets the starting_date of this ChangeRelationRequest.

        The new starting date for the relation.  # noqa: E501

        :param starting_date: The starting_date of this ChangeRelationRequest.  # noqa: E501
        :type: int
        """

        self._starting_date = starting_date

    @property
    def ending_date(self):
        """Gets the ending_date of this ChangeRelationRequest.  # noqa: E501

        The new ending date for the relation.  # noqa: E501

        :return: The ending_date of this ChangeRelationRequest.  # noqa: E501
        :rtype: int
        """
        return self._ending_date

    @ending_date.setter
    def ending_date(self, ending_date):
        """Sets the ending_date of this ChangeRelationRequest.

        The new ending date for the relation.  # noqa: E501

        :param ending_date: The ending_date of this ChangeRelationRequest.  # noqa: E501
        :type: int
        """

        self._ending_date = ending_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeRelationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeRelationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
