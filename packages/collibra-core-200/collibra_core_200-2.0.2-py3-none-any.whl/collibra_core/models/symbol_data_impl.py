# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SymbolDataImpl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'symbol_type': 'str',
        'icon_code': 'str',
        'acronym_code': 'str'
    }

    attribute_map = {
        'color': 'color',
        'symbol_type': 'symbolType',
        'icon_code': 'iconCode',
        'acronym_code': 'acronymCode'
    }

    def __init__(self, color=None, symbol_type=None, icon_code=None, acronym_code=None):  # noqa: E501
        """SymbolDataImpl - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._symbol_type = None
        self._icon_code = None
        self._acronym_code = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if symbol_type is not None:
            self.symbol_type = symbol_type
        if icon_code is not None:
            self.icon_code = icon_code
        if acronym_code is not None:
            self.acronym_code = acronym_code

    @property
    def color(self):
        """Gets the color of this SymbolDataImpl.  # noqa: E501


        :return: The color of this SymbolDataImpl.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SymbolDataImpl.


        :param color: The color of this SymbolDataImpl.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def symbol_type(self):
        """Gets the symbol_type of this SymbolDataImpl.  # noqa: E501


        :return: The symbol_type of this SymbolDataImpl.  # noqa: E501
        :rtype: str
        """
        return self._symbol_type

    @symbol_type.setter
    def symbol_type(self, symbol_type):
        """Sets the symbol_type of this SymbolDataImpl.


        :param symbol_type: The symbol_type of this SymbolDataImpl.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "ICON_CODE", "ACRONYM_CODE"]  # noqa: E501
        if symbol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `symbol_type` ({0}), must be one of {1}"  # noqa: E501
                .format(symbol_type, allowed_values)
            )

        self._symbol_type = symbol_type

    @property
    def icon_code(self):
        """Gets the icon_code of this SymbolDataImpl.  # noqa: E501


        :return: The icon_code of this SymbolDataImpl.  # noqa: E501
        :rtype: str
        """
        return self._icon_code

    @icon_code.setter
    def icon_code(self, icon_code):
        """Sets the icon_code of this SymbolDataImpl.


        :param icon_code: The icon_code of this SymbolDataImpl.  # noqa: E501
        :type: str
        """

        self._icon_code = icon_code

    @property
    def acronym_code(self):
        """Gets the acronym_code of this SymbolDataImpl.  # noqa: E501


        :return: The acronym_code of this SymbolDataImpl.  # noqa: E501
        :rtype: str
        """
        return self._acronym_code

    @acronym_code.setter
    def acronym_code(self, acronym_code):
        """Sets the acronym_code of this SymbolDataImpl.


        :param acronym_code: The acronym_code of this SymbolDataImpl.  # noqa: E501
        :type: str
        """

        self._acronym_code = acronym_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SymbolDataImpl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SymbolDataImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
