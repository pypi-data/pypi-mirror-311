# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'file_name': 'str',
        'resource_type': 'str',
        'resource_id': 'str'
    }

    attribute_map = {
        'file': 'file',
        'file_name': 'fileName',
        'resource_type': 'resourceType',
        'resource_id': 'resourceId'
    }

    def __init__(self, file=None, file_name=None, resource_type=None, resource_id=None):  # noqa: E501
        """AttachmentsBody - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._file_name = None
        self._resource_type = None
        self._resource_id = None
        self.discriminator = None
        if file is not None:
            self.file = file
        if file_name is not None:
            self.file_name = file_name
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_id is not None:
            self.resource_id = resource_id

    @property
    def file(self):
        """Gets the file of this AttachmentsBody.  # noqa: E501

        the file - attachment content  # noqa: E501

        :return: The file of this AttachmentsBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this AttachmentsBody.

        the file - attachment content  # noqa: E501

        :param file: The file of this AttachmentsBody.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def file_name(self):
        """Gets the file_name of this AttachmentsBody.  # noqa: E501

        the display name of the file of this attachment  # noqa: E501

        :return: The file_name of this AttachmentsBody.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this AttachmentsBody.

        the display name of the file of this attachment  # noqa: E501

        :param file_name: The file_name of this AttachmentsBody.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def resource_type(self):
        """Gets the resource_type of this AttachmentsBody.  # noqa: E501

        the type of the resource the attachment should refer to. An attachment can be added on those resource types: User, Community, Domain, Asset, Role, ValidationRule, Workflow.  # noqa: E501

        :return: The resource_type of this AttachmentsBody.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AttachmentsBody.

        the type of the resource the attachment should refer to. An attachment can be added on those resource types: User, Community, Domain, Asset, Role, ValidationRule, Workflow.  # noqa: E501

        :param resource_type: The resource_type of this AttachmentsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["View", "Asset", "Community", "Domain", "AssetType", "DomainType", "Status", "User", "ClassificationMatch", "UserGroup", "Attribute", "StringAttribute", "ScriptAttribute", "BooleanAttribute", "DateAttribute", "NumericAttribute", "SingleValueListAttribute", "MultiValueListAttribute", "Comment", "Attachment", "Responsibility", "Workflow", "Job", "Relation", "RelationType", "ComplexRelation", "ComplexRelationType", "ArticulationRule", "Assignment", "Scope", "RelationTrace", "ValidationRule", "DataQualityRule", "DataQualityMetric", "Address", "InstantMessagingAccount", "Email", "PhoneNumber", "Website", "Activity", "FormProperty", "WorkflowTask", "ActivityChange", "WorkflowInstance", "Role", "AttributeType", "BooleanAttributeType", "DateAttributeType", "DateTimeAttributeType", "MultiValueListAttributeType", "NumericAttributeType", "ScriptAttributeType", "SingleValueListAttributeType", "StringAttributeType", "ViewSharingRule", "ViewAssignmentRule", "JdbcDriverFile", "JdbcDriver", "JdbcIngestionProperties", "CsvIngestionProperties", "ExcelIngestionProperties", "ConnectionStringParameter", "AssignedCharacteristicType", "Notification", "Tag", "ComplexRelationLegType", "ComplexRelationAttributeType", "ComplexRelationLeg", "BaseDataType", "AdvancedDataType", "DiagramPicture", "DiagramPictureSharingRule", "DiagramPictureAssignmentRule", "Rating", "Classification", "PhysicalDataConnector", "Context"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def resource_id(self):
        """Gets the resource_id of this AttachmentsBody.  # noqa: E501

        the id of the resource the attachment should refer to  # noqa: E501

        :return: The resource_id of this AttachmentsBody.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AttachmentsBody.

        the id of the resource the attachment should refer to  # noqa: E501

        :param resource_id: The resource_id of this AttachmentsBody.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
