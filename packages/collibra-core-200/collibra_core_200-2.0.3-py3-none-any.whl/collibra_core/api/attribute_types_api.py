# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_core.api_client import ApiClient


class AttributeTypesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_attribute_type(self, **kwargs):  # noqa: E501
        """Adds a new Attribute Type.  # noqa: E501

        Adds a new Attribute Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_attribute_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAttributeTypeRequest body:
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_attribute_type_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_attribute_type_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_attribute_type_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new Attribute Type.  # noqa: E501

        Adds a new Attribute Type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_attribute_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAttributeTypeRequest body:
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_attribute_type" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttributeType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_attribute_types(self, **kwargs):  # noqa: E501
        """Adds multiple Attribute Types.  # noqa: E501

        Adds multiple Attribute Types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_attribute_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddAttributeTypeRequest] body:
        :return: list[AttributeType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_attribute_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_attribute_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_attribute_types_with_http_info(self, **kwargs):  # noqa: E501
        """Adds multiple Attribute Types.  # noqa: E501

        Adds multiple Attribute Types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_attribute_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AddAttributeTypeRequest] body:
        :return: list[AttributeType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_attribute_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AttributeType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_attribute_type(self, attribute_type_id, **kwargs):  # noqa: E501
        """Changes the attribute types.  # noqa: E501

        Changes the attribute types with the information present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_attribute_type(attribute_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_id: the unique identifier of the attribute type (required)
        :param ChangeAttributeTypeRequest body:
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_attribute_type_with_http_info(attribute_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_attribute_type_with_http_info(attribute_type_id, **kwargs)  # noqa: E501
            return data

    def change_attribute_type_with_http_info(self, attribute_type_id, **kwargs):  # noqa: E501
        """Changes the attribute types.  # noqa: E501

        Changes the attribute types with the information present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_attribute_type_with_http_info(attribute_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_id: the unique identifier of the attribute type (required)
        :param ChangeAttributeTypeRequest body:
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_attribute_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute_type_id' is set
        if ('attribute_type_id' not in params or
                params['attribute_type_id'] is None):
            raise ValueError("Missing the required parameter `attribute_type_id` when calling `change_attribute_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attribute_type_id' in params:
            path_params['attributeTypeId'] = params['attribute_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes/{attributeTypeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttributeType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_attribute_types(self, **kwargs):  # noqa: E501
        """Changes multiple attribute types.  # noqa: E501

        Changes multiple attribute types with the information present in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_attribute_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ChangeAttributeTypeRequest] body:
        :return: list[AttributeType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_attribute_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.change_attribute_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def change_attribute_types_with_http_info(self, **kwargs):  # noqa: E501
        """Changes multiple attribute types.  # noqa: E501

        Changes multiple attribute types with the information present in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_attribute_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ChangeAttributeTypeRequest] body:
        :return: list[AttributeType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_attribute_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes/bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AttributeType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_attribute_types(self, **kwargs):  # noqa: E501
        """Returns attribute types matching the given search criteria.  # noqa: E501

        Returns attribute types matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned attribute types satisfy all constraints that are specified in this search criteria. By default a result containing 1000 attribute types is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_attribute_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str name: The name of the Attribute Type to search for.
        :param str name_match_mode: The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.
        :param str kind: The kind of the Attribute Type to search for.
        :param str language: The language of the Attribute Type to search for. This property is only applicable to Attribute Types of kind \"Script\".
        :param bool statistics_enabled: Whether the Attribute Types should be searched with statistics enabled or not. This property is only applicable to Attribute Types of kind \"Numeric\" or \"Boolean\".
        :param bool is_integer: Whether only integer-type Attribute Types should be searched or not. This property is only applicable to Attribute Types of kind \"Numeric\".
        :param str sort_field: The field that should be used as reference for sorting.
        :param str sort_order: The order of sorting.
        :return: AttributeTypePagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_attribute_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_attribute_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_attribute_types_with_http_info(self, **kwargs):  # noqa: E501
        """Returns attribute types matching the given search criteria.  # noqa: E501

        Returns attribute types matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned attribute types satisfy all constraints that are specified in this search criteria. By default a result containing 1000 attribute types is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_attribute_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped
        :param str name: The name of the Attribute Type to search for.
        :param str name_match_mode: The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.
        :param str kind: The kind of the Attribute Type to search for.
        :param str language: The language of the Attribute Type to search for. This property is only applicable to Attribute Types of kind \"Script\".
        :param bool statistics_enabled: Whether the Attribute Types should be searched with statistics enabled or not. This property is only applicable to Attribute Types of kind \"Numeric\" or \"Boolean\".
        :param bool is_integer: Whether only integer-type Attribute Types should be searched or not. This property is only applicable to Attribute Types of kind \"Numeric\".
        :param str sort_field: The field that should be used as reference for sorting.
        :param str sort_order: The order of sorting.
        :return: AttributeTypePagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'name', 'name_match_mode', 'kind', 'language', 'statistics_enabled', 'is_integer', 'sort_field', 'sort_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_attribute_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'name_match_mode' in params:
            query_params.append(('nameMatchMode', params['name_match_mode']))  # noqa: E501
        if 'kind' in params:
            query_params.append(('kind', params['kind']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'statistics_enabled' in params:
            query_params.append(('statisticsEnabled', params['statistics_enabled']))  # noqa: E501
        if 'is_integer' in params:
            query_params.append(('isInteger', params['is_integer']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttributeTypePagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attribute_type(self, attribute_type_id, **kwargs):  # noqa: E501
        """Returns the attribute type identified by given UUID.  # noqa: E501

        Returns the attribute type identified by given UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribute_type(attribute_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_id: the unique identifier of the attribute type (required)
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attribute_type_with_http_info(attribute_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attribute_type_with_http_info(attribute_type_id, **kwargs)  # noqa: E501
            return data

    def get_attribute_type_with_http_info(self, attribute_type_id, **kwargs):  # noqa: E501
        """Returns the attribute type identified by given UUID.  # noqa: E501

        Returns the attribute type identified by given UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribute_type_with_http_info(attribute_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_id: the unique identifier of the attribute type (required)
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attribute_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute_type_id' is set
        if ('attribute_type_id' not in params or
                params['attribute_type_id'] is None):
            raise ValueError("Missing the required parameter `attribute_type_id` when calling `get_attribute_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attribute_type_id' in params:
            path_params['attributeTypeId'] = params['attribute_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes/{attributeTypeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttributeType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attribute_type_by_name(self, attribute_type_name, **kwargs):  # noqa: E501
        """Returns the attribute type identified by given name.  # noqa: E501

        Returns the attribute type identified by given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribute_type_by_name(attribute_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_name: the unique identifier of the attribute type (required)
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attribute_type_by_name_with_http_info(attribute_type_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attribute_type_by_name_with_http_info(attribute_type_name, **kwargs)  # noqa: E501
            return data

    def get_attribute_type_by_name_with_http_info(self, attribute_type_name, **kwargs):  # noqa: E501
        """Returns the attribute type identified by given name.  # noqa: E501

        Returns the attribute type identified by given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribute_type_by_name_with_http_info(attribute_type_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_name: the unique identifier of the attribute type (required)
        :return: AttributeType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_type_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attribute_type_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute_type_name' is set
        if ('attribute_type_name' not in params or
                params['attribute_type_name'] is None):
            raise ValueError("Missing the required parameter `attribute_type_name` when calling `get_attribute_type_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attribute_type_name' in params:
            path_params['attributeTypeName'] = params['attribute_type_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes/name/{attributeTypeName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttributeType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_attribute_type(self, attribute_type_id, **kwargs):  # noqa: E501
        """Removes attribute type identified by given UUID.  # noqa: E501

        Removes attribute type identified by given UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_attribute_type(attribute_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_id: the unique identifier of the attribute type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_attribute_type_with_http_info(attribute_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_attribute_type_with_http_info(attribute_type_id, **kwargs)  # noqa: E501
            return data

    def remove_attribute_type_with_http_info(self, attribute_type_id, **kwargs):  # noqa: E501
        """Removes attribute type identified by given UUID.  # noqa: E501

        Removes attribute type identified by given UUID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_attribute_type_with_http_info(attribute_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type_id: the unique identifier of the attribute type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_attribute_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute_type_id' is set
        if ('attribute_type_id' not in params or
                params['attribute_type_id'] is None):
            raise ValueError("Missing the required parameter `attribute_type_id` when calling `remove_attribute_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attribute_type_id' in params:
            path_params['attributeTypeId'] = params['attribute_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes/{attributeTypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_attribute_types(self, **kwargs):  # noqa: E501
        """Removes multiple attribute types.  # noqa: E501

        Removes multiple attribute types identified by the UUIDs passed as parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_attribute_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_attribute_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remove_attribute_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def remove_attribute_types_with_http_info(self, **kwargs):  # noqa: E501
        """Removes multiple attribute types.  # noqa: E501

        Removes multiple attribute types identified by the UUIDs passed as parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_attribute_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_attribute_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/attributeTypes/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
