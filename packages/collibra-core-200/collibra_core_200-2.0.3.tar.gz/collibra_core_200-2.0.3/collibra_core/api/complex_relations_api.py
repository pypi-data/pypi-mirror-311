# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from collibra_core.api_client import ApiClient


class ComplexRelationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_complex_relation(self, **kwargs):  # noqa: E501
        """Adds new complex relation.  # noqa: E501

        Adds new complex relation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_complex_relation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddComplexRelationRequest body:
        :return: ComplexRelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_complex_relation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_complex_relation_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_complex_relation_with_http_info(self, **kwargs):  # noqa: E501
        """Adds new complex relation.  # noqa: E501

        Adds new complex relation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_complex_relation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddComplexRelationRequest body:
        :return: ComplexRelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_complex_relation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexRelationImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_complex_relation(self, complex_relation_id, **kwargs):  # noqa: E501
        """Change the complex relation with the information that is present in the request.  # noqa: E501

        Change the complex relation with the information that is present in the request.  Only properties that are specified in this request and have not <code>null</code> values are updated.  All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_complex_relation(complex_relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str complex_relation_id: the id of the complex relation to be modified. (required)
        :param ChangeComplexRelationRequest body:
        :return: ComplexRelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_complex_relation_with_http_info(complex_relation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_complex_relation_with_http_info(complex_relation_id, **kwargs)  # noqa: E501
            return data

    def change_complex_relation_with_http_info(self, complex_relation_id, **kwargs):  # noqa: E501
        """Change the complex relation with the information that is present in the request.  # noqa: E501

        Change the complex relation with the information that is present in the request.  Only properties that are specified in this request and have not <code>null</code> values are updated.  All other properties are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_complex_relation_with_http_info(complex_relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str complex_relation_id: the id of the complex relation to be modified. (required)
        :param ChangeComplexRelationRequest body:
        :return: ComplexRelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complex_relation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_complex_relation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complex_relation_id' is set
        if ('complex_relation_id' not in params or
                params['complex_relation_id'] is None):
            raise ValueError("Missing the required parameter `complex_relation_id` when calling `change_complex_relation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'complex_relation_id' in params:
            path_params['complexRelationId'] = params['complex_relation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/{complexRelationId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexRelationImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_to_csv(self, **kwargs):  # noqa: E501
        """Export complex relations of the given type to CSV.  # noqa: E501

        Export complex relations of the given type to CSV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToCSVRequest body:
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_to_csv_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_to_csv_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_to_csv_with_http_info(self, **kwargs):  # noqa: E501
        """Export complex relations of the given type to CSV.  # noqa: E501

        Export complex relations of the given type to CSV.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToCSVRequest body:
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_to_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/export/csv-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_to_csv_without_job(self, **kwargs):  # noqa: E501
        """Export all complex relations of the given type to a CSV file.  # noqa: E501

        Export all complex relations of the given type to a CSV file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_csv_without_job(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToCSVRequest body:
        :return: FileInfoImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_to_csv_without_job_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_to_csv_without_job_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_to_csv_without_job_with_http_info(self, **kwargs):  # noqa: E501
        """Export all complex relations of the given type to a CSV file.  # noqa: E501

        Export all complex relations of the given type to a CSV file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_csv_without_job_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToCSVRequest body:
        :return: FileInfoImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_to_csv_without_job" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/export/csv-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfoImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_to_csvas_string(self, **kwargs):  # noqa: E501
        """Export all complex relations of the given type to CSV as a String.  # noqa: E501

        Export all complex relations of the given type to CSV as a String.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_csvas_string(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToCSVRequest body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_to_csvas_string_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_to_csvas_string_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_to_csvas_string_with_http_info(self, **kwargs):  # noqa: E501
        """Export all complex relations of the given type to CSV as a String.  # noqa: E501

        Export all complex relations of the given type to CSV as a String.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_csvas_string_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToCSVRequest body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_to_csvas_string" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/export/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_to_excel(self, **kwargs):  # noqa: E501
        """Export complex relations of the given type to Excel.  # noqa: E501

        Export complex relations of the given type to Excel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_excel(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToExcelRequest body:
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_to_excel_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_to_excel_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_to_excel_with_http_info(self, **kwargs):  # noqa: E501
        """Export complex relations of the given type to Excel.  # noqa: E501

        Export complex relations of the given type to Excel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_excel_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToExcelRequest body:
        :return: Job
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_to_excel" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/export/excel-job', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Job',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_to_excel_without_job(self, **kwargs):  # noqa: E501
        """Export all complex relations of the given type to an Excel file.  # noqa: E501

        Export all complex relations of the given type to an Excel file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_excel_without_job(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToExcelRequest body:
        :return: FileInfoImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_to_excel_without_job_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.export_to_excel_without_job_with_http_info(**kwargs)  # noqa: E501
            return data

    def export_to_excel_without_job_with_http_info(self, **kwargs):  # noqa: E501
        """Export all complex relations of the given type to an Excel file.  # noqa: E501

        Export all complex relations of the given type to an Excel file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_to_excel_without_job_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportComplexRelationsToExcelRequest body:
        :return: FileInfoImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_to_excel_without_job" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/export/excel-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfoImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_complex_relations(self, **kwargs):  # noqa: E501
        """Returns complex relations matching the given search criteria.  # noqa: E501

        Returns complex relations matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned complex relations satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 complex relations is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_complex_relations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.
        :param str cursor: Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).
        :param str asset_id: The ID of the asset for which complex relations should be found.
        :param str type_id: The ID of the type of complex relations to search for.
        :return: ComplexRelationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_complex_relations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_complex_relations_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_complex_relations_with_http_info(self, **kwargs):  # noqa: E501
        """Returns complex relations matching the given search criteria.  # noqa: E501

        Returns complex relations matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned complex relations satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 complex relations is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_complex_relations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.
        :param int limit: The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.
        :param int count_limit: Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.
        :param str cursor: Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).
        :param str asset_id: The ID of the asset for which complex relations should be found.
        :param str type_id: The ID of the type of complex relations to search for.
        :return: ComplexRelationPagedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'count_limit', 'cursor', 'asset_id', 'type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_complex_relations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'count_limit' in params:
            query_params.append(('countLimit', params['count_limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'asset_id' in params:
            query_params.append(('assetId', params['asset_id']))  # noqa: E501
        if 'type_id' in params:
            query_params.append(('typeId', params['type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexRelationPagedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_complex_relation(self, complex_relation_id, **kwargs):  # noqa: E501
        """Returns a ComplexRelation identified by given id.  # noqa: E501

        Returns a complex relation identified by given <code>id</code>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_complex_relation(complex_relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str complex_relation_id: the id of the complex relation. (required)
        :return: ComplexRelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_complex_relation_with_http_info(complex_relation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_complex_relation_with_http_info(complex_relation_id, **kwargs)  # noqa: E501
            return data

    def get_complex_relation_with_http_info(self, complex_relation_id, **kwargs):  # noqa: E501
        """Returns a ComplexRelation identified by given id.  # noqa: E501

        Returns a complex relation identified by given <code>id</code>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_complex_relation_with_http_info(complex_relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str complex_relation_id: the id of the complex relation. (required)
        :return: ComplexRelationImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complex_relation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_complex_relation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complex_relation_id' is set
        if ('complex_relation_id' not in params or
                params['complex_relation_id'] is None):
            raise ValueError("Missing the required parameter `complex_relation_id` when calling `get_complex_relation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'complex_relation_id' in params:
            path_params['complexRelationId'] = params['complex_relation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/{complexRelationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexRelationImpl',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_complex_relation(self, complex_relation_id, **kwargs):  # noqa: E501
        """Removes complex relation identified by given id.  # noqa: E501

        Removes complex relation identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_complex_relation(complex_relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str complex_relation_id: the id of the complex relation to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_complex_relation_with_http_info(complex_relation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_complex_relation_with_http_info(complex_relation_id, **kwargs)  # noqa: E501
            return data

    def remove_complex_relation_with_http_info(self, complex_relation_id, **kwargs):  # noqa: E501
        """Removes complex relation identified by given id.  # noqa: E501

        Removes complex relation identified by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_complex_relation_with_http_info(complex_relation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str complex_relation_id: the id of the complex relation to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complex_relation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_complex_relation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complex_relation_id' is set
        if ('complex_relation_id' not in params or
                params['complex_relation_id'] is None):
            raise ValueError("Missing the required parameter `complex_relation_id` when calling `remove_complex_relation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'complex_relation_id' in params:
            path_params['complexRelationId'] = params['complex_relation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/complexRelations/{complexRelationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
