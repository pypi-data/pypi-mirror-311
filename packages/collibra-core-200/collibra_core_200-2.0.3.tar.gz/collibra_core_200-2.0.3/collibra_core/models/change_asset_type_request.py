# coding: utf-8

"""
    Collibra Data Governance Center Core API

    <p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangeAssetTypeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'public_id': 'str',
        'name': 'str',
        'description': 'str',
        'parent_id': 'str',
        'color': 'str',
        'symbol_type': 'str',
        'icon_code': 'str',
        'acronym_code': 'str',
        'display_name_enabled': 'bool',
        'rating_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'public_id': 'publicId',
        'name': 'name',
        'description': 'description',
        'parent_id': 'parentId',
        'color': 'color',
        'symbol_type': 'symbolType',
        'icon_code': 'iconCode',
        'acronym_code': 'acronymCode',
        'display_name_enabled': 'displayNameEnabled',
        'rating_enabled': 'ratingEnabled'
    }

    def __init__(self, id=None, public_id=None, name=None, description=None, parent_id=None, color=None, symbol_type=None, icon_code=None, acronym_code=None, display_name_enabled=None, rating_enabled=None):  # noqa: E501
        """ChangeAssetTypeRequest - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._public_id = None
        self._name = None
        self._description = None
        self._parent_id = None
        self._color = None
        self._symbol_type = None
        self._icon_code = None
        self._acronym_code = None
        self._display_name_enabled = None
        self._rating_enabled = None
        self.discriminator = None
        self.id = id
        if public_id is not None:
            self.public_id = public_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if parent_id is not None:
            self.parent_id = parent_id
        if color is not None:
            self.color = color
        if symbol_type is not None:
            self.symbol_type = symbol_type
        if icon_code is not None:
            self.icon_code = icon_code
        if acronym_code is not None:
            self.acronym_code = acronym_code
        if display_name_enabled is not None:
            self.display_name_enabled = display_name_enabled
        if rating_enabled is not None:
            self.rating_enabled = rating_enabled

    @property
    def id(self):
        """Gets the id of this ChangeAssetTypeRequest.  # noqa: E501

        The ID of the Asset Type to be changed. Silently ignored if the ID is provided as path parameter of the request.  # noqa: E501

        :return: The id of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangeAssetTypeRequest.

        The ID of the Asset Type to be changed. Silently ignored if the ID is provided as path parameter of the request.  # noqa: E501

        :param id: The id of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def public_id(self):
        """Gets the public_id of this ChangeAssetTypeRequest.  # noqa: E501

        The new public id for the Asset Type. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable.  # noqa: E501

        :return: The public_id of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this ChangeAssetTypeRequest.

        The new public id for the Asset Type. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable.  # noqa: E501

        :param public_id: The public_id of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """

        self._public_id = public_id

    @property
    def name(self):
        """Gets the name of this ChangeAssetTypeRequest.  # noqa: E501

        The new name for the Asset Type.  # noqa: E501

        :return: The name of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChangeAssetTypeRequest.

        The new name for the Asset Type.  # noqa: E501

        :param name: The name of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ChangeAssetTypeRequest.  # noqa: E501

        The new description for the Asset Type.  # noqa: E501

        :return: The description of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChangeAssetTypeRequest.

        The new description for the Asset Type.  # noqa: E501

        :param description: The description of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parent_id(self):
        """Gets the parent_id of this ChangeAssetTypeRequest.  # noqa: E501

        The ID of the new parent for the Asset Type.  # noqa: E501

        :return: The parent_id of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ChangeAssetTypeRequest.

        The ID of the new parent for the Asset Type.  # noqa: E501

        :param parent_id: The parent_id of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def color(self):
        """Gets the color of this ChangeAssetTypeRequest.  # noqa: E501

        The color of the symbol, in a hex format e.g. '#000000'. This format always includes the '#' and has a size of 7.  # noqa: E501

        :return: The color of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ChangeAssetTypeRequest.

        The color of the symbol, in a hex format e.g. '#000000'. This format always includes the '#' and has a size of 7.  # noqa: E501

        :param color: The color of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def symbol_type(self):
        """Gets the symbol_type of this ChangeAssetTypeRequest.  # noqa: E501

        The symbol type.  # noqa: E501

        :return: The symbol_type of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._symbol_type

    @symbol_type.setter
    def symbol_type(self, symbol_type):
        """Sets the symbol_type of this ChangeAssetTypeRequest.

        The symbol type.  # noqa: E501

        :param symbol_type: The symbol_type of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "ICON_CODE", "ACRONYM_CODE"]  # noqa: E501
        if symbol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `symbol_type` ({0}), must be one of {1}"  # noqa: E501
                .format(symbol_type, allowed_values)
            )

        self._symbol_type = symbol_type

    @property
    def icon_code(self):
        """Gets the icon_code of this ChangeAssetTypeRequest.  # noqa: E501

        The icon code, a code representing the icon that should be shown.  # noqa: E501

        :return: The icon_code of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._icon_code

    @icon_code.setter
    def icon_code(self, icon_code):
        """Sets the icon_code of this ChangeAssetTypeRequest.

        The icon code, a code representing the icon that should be shown.  # noqa: E501

        :param icon_code: The icon_code of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """

        self._icon_code = icon_code

    @property
    def acronym_code(self):
        """Gets the acronym_code of this ChangeAssetTypeRequest.  # noqa: E501

        The acronym code, a code representing the acronym that should be shown.  # noqa: E501

        :return: The acronym_code of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: str
        """
        return self._acronym_code

    @acronym_code.setter
    def acronym_code(self, acronym_code):
        """Sets the acronym_code of this ChangeAssetTypeRequest.

        The acronym code, a code representing the acronym that should be shown.  # noqa: E501

        :param acronym_code: The acronym_code of this ChangeAssetTypeRequest.  # noqa: E501
        :type: str
        """

        self._acronym_code = acronym_code

    @property
    def display_name_enabled(self):
        """Gets the display_name_enabled of this ChangeAssetTypeRequest.  # noqa: E501

        Whether display name should be enabled for all Assets of changed type.  # noqa: E501

        :return: The display_name_enabled of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._display_name_enabled

    @display_name_enabled.setter
    def display_name_enabled(self, display_name_enabled):
        """Sets the display_name_enabled of this ChangeAssetTypeRequest.

        Whether display name should be enabled for all Assets of changed type.  # noqa: E501

        :param display_name_enabled: The display_name_enabled of this ChangeAssetTypeRequest.  # noqa: E501
        :type: bool
        """

        self._display_name_enabled = display_name_enabled

    @property
    def rating_enabled(self):
        """Gets the rating_enabled of this ChangeAssetTypeRequest.  # noqa: E501

        Whether rating should be enabled for all Assets of given type.  # noqa: E501

        :return: The rating_enabled of this ChangeAssetTypeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._rating_enabled

    @rating_enabled.setter
    def rating_enabled(self, rating_enabled):
        """Sets the rating_enabled of this ChangeAssetTypeRequest.

        Whether rating should be enabled for all Assets of given type.  # noqa: E501

        :param rating_enabled: The rating_enabled of this ChangeAssetTypeRequest.  # noqa: E501
        :type: bool
        """

        self._rating_enabled = rating_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeAssetTypeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeAssetTypeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
