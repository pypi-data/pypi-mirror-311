# coding: utf-8

"""
    Infrahub-API

    Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ..models.admin_flavor_detail_node_fields import AdminFlavorDetailNodeFields
from ..models.lable_resonse import LableResonse
from typing import Optional, Set
from typing_extensions import Self

class AdminFlavorDetailFields(BaseModel):
    """
    AdminFlavorDetailFields
    """ # noqa: E501
    cpu: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    description: Optional[StrictStr] = None
    disk: Optional[StrictInt] = None
    ephemeral: Optional[StrictInt] = None
    gpu: Optional[StrictStr] = None
    gpu_count: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    is_custom: Optional[StrictBool] = None
    is_public: Optional[StrictBool] = None
    labels: Optional[List[LableResonse]] = None
    name: Optional[StrictStr] = None
    nodes: Optional[List[AdminFlavorDetailNodeFields]] = None
    openstack_id: Optional[StrictStr] = None
    org_ids: Optional[List[StrictInt]] = None
    ram: Optional[Union[StrictFloat, StrictInt]] = None
    region_name: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    stock_available: Optional[StrictBool] = None
    vms: Optional[List[StrictInt]] = None
    __properties: ClassVar[List[str]] = ["cpu", "created_at", "description", "disk", "ephemeral", "gpu", "gpu_count", "id", "is_custom", "is_public", "labels", "name", "nodes", "openstack_id", "org_ids", "ram", "region_name", "status", "stock_available", "vms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminFlavorDetailFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminFlavorDetailFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpu": obj.get("cpu"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "disk": obj.get("disk"),
            "ephemeral": obj.get("ephemeral"),
            "gpu": obj.get("gpu"),
            "gpu_count": obj.get("gpu_count"),
            "id": obj.get("id"),
            "is_custom": obj.get("is_custom"),
            "is_public": obj.get("is_public"),
            "labels": [LableResonse.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "name": obj.get("name"),
            "nodes": [AdminFlavorDetailNodeFields.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "openstack_id": obj.get("openstack_id"),
            "org_ids": obj.get("org_ids"),
            "ram": obj.get("ram"),
            "region_name": obj.get("region_name"),
            "status": obj.get("status"),
            "stock_available": obj.get("stock_available"),
            "vms": obj.get("vms")
        })
        return _obj


