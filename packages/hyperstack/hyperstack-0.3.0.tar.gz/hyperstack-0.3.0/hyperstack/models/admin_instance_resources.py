# coding: utf-8

"""
    Infrahub-API

    Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ..models.admin_flavor_resource import AdminFlavorResource
from typing import Optional, Set
from typing_extensions import Self

class AdminInstanceResources(BaseModel):
    """
    AdminInstanceResources
    """ # noqa: E501
    contract_id: Optional[StrictInt] = None
    created_at: Optional[datetime] = None
    fixed_ip: Optional[StrictStr] = None
    flavor: Optional[AdminFlavorResource] = None
    floating_ip: Optional[StrictStr] = None
    floating_ip_status: Optional[StrictStr] = None
    host: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    image_id: Optional[StrictInt] = None
    keypair_name: Optional[StrictStr] = None
    locked: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    openstack_id: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    volume_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["contract_id", "created_at", "fixed_ip", "flavor", "floating_ip", "floating_ip_status", "host", "id", "image_id", "keypair_name", "locked", "name", "openstack_id", "status", "volume_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminInstanceResources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flavor
        if self.flavor:
            _dict['flavor'] = self.flavor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminInstanceResources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contract_id": obj.get("contract_id"),
            "created_at": obj.get("created_at"),
            "fixed_ip": obj.get("fixed_ip"),
            "flavor": AdminFlavorResource.from_dict(obj["flavor"]) if obj.get("flavor") is not None else None,
            "floating_ip": obj.get("floating_ip"),
            "floating_ip_status": obj.get("floating_ip_status"),
            "host": obj.get("host"),
            "id": obj.get("id"),
            "image_id": obj.get("image_id"),
            "keypair_name": obj.get("keypair_name"),
            "locked": obj.get("locked"),
            "name": obj.get("name"),
            "openstack_id": obj.get("openstack_id"),
            "status": obj.get("status"),
            "volume_id": obj.get("volume_id")
        })
        return _obj


