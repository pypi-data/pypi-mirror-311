# coding: utf-8

"""
    Simple Game Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetGameState200ResponseState(BaseModel):
    """
    GetGameState200ResponseState
    """ # noqa: E501
    num_nodes: Optional[StrictInt] = None
    edges: Optional[List[Annotated[List[StrictInt], Field(min_length=3, max_length=3)]]] = None
    graph_id: Optional[StrictStr] = None
    player1_id: Optional[StrictStr] = None
    player2_id: Optional[StrictStr] = None
    turn_count: Optional[StrictInt] = None
    current_player_index: Optional[StrictInt] = None
    player1_node: Optional[StrictInt] = None
    player2_node: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["num_nodes", "edges", "graph_id", "player1_id", "player2_id", "turn_count", "current_player_index", "player1_node", "player2_node"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGameState200ResponseState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGameState200ResponseState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "num_nodes": obj.get("num_nodes"),
            "edges": obj.get("edges"),
            "graph_id": obj.get("graph_id"),
            "player1_id": obj.get("player1_id"),
            "player2_id": obj.get("player2_id"),
            "turn_count": obj.get("turn_count"),
            "current_player_index": obj.get("current_player_index"),
            "player1_node": obj.get("player1_node"),
            "player2_node": obj.get("player2_node")
        })
        return _obj


