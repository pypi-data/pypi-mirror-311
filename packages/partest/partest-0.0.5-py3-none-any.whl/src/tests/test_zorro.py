import allure
import pytest

from partest.allure_graph import create_chart
from partest.api_call_storage import call_count, call_type
from partest.test_types import TypesTestCases
from src.models.user_paths import PathsServices

types = TypesTestCases
service = PathsServices.services_paths.get('article')


@allure.epic('–°–≤–æ–¥–∫–∞')
@allure.feature('–û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è')
@allure.severity(allure.severity_level.CRITICAL)
@pytest.mark.dev
@pytest.mark.asyncio
class TestCoverAge:

    async def test_display_final_call_counts(self):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∑–æ–≤–æ–≤ API –∏ —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤."""
        report_lines = []
        total_coverage_percentage = 0
        total_endpoints = 0
        total_calls_excluding_generation = 0

        for (method, endpoint, description), count in call_count.items():
            types = set(call_type[(method, endpoint, description)])
            total_endpoints += 1

            # –ü–æ–¥—Å—á–µ—Ç –≤—ã–∑–æ–≤–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ç–∏–ø 'generation_data'
            if 'generation_data' not in types:
                total_calls_excluding_generation += count

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
            type_default = 'default'
            type_405 = '405'
            coverage_status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ ‚ùå"

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            if count >= 2:
                coverage_status = "–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ"
                total_coverage_percentage += 100
            elif type_default in types and type_405 in types:
                coverage_status = "–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ"
                total_coverage_percentage += 100
            elif count < 2:
                if type_default in types or type_405 in types:
                    coverage_status = "–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ 50% üîî"
                    total_coverage_percentage += 50
                else:
                    total_coverage_percentage += 0

            report_line = (
                f"\n{description}\n–≠–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}\n–ú–µ—Ç–æ–¥: {method} | "
                f"–û–±—Ä–∞—â–µ–Ω–∏–π: {count}, –¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤: {', '.join(types)}\n{coverage_status}\n"
            )
            report_lines.append(report_line)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        if total_endpoints > 0:
            average_coverage_percentage = total_coverage_percentage / total_endpoints
        else:
            average_coverage_percentage = 0


        border = "*" * 50
        summary = f"{border}\n–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {average_coverage_percentage:.2f}%\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ (–∏—Å–∫–ª—é—á–∞—è 'generation_data'): {total_calls_excluding_generation}\n{border}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ –Ω–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞
        report_lines.insert(0, summary)

        # print(summary)

        create_chart(call_count)

        with open('api_call_counts.png', 'rb') as f:
            allure.attach(f.read(), name='–û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è', attachment_type=allure.attachment_type.PNG)

        allure.attach("\n".join(report_lines), name='–û—Ç—á–µ—Ç –ø–æ –≤—ã–∑–æ–≤–∞–º API', attachment_type=allure.attachment_type.TEXT)

        assert True

