# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_webforms.client.configuration import Configuration


class WebFormSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_id': 'str',
        'is_published': 'bool',
        'is_enabled': 'bool',
        'is_uploaded': 'bool',
        'has_draft_changes': 'bool',
        'form_state': 'WebFormState',
        'form_properties': 'WebFormProperties',
        'form_metadata': 'WebFormMetadata'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'accountId',
        'is_published': 'isPublished',
        'is_enabled': 'isEnabled',
        'is_uploaded': 'isUploaded',
        'has_draft_changes': 'hasDraftChanges',
        'form_state': 'formState',
        'form_properties': 'formProperties',
        'form_metadata': 'formMetadata'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """WebFormSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._account_id = None
        self._is_published = None
        self._is_enabled = None
        self._is_uploaded = None
        self._has_draft_changes = None
        self._form_state = None
        self._form_properties = None
        self._form_metadata = None
        self.discriminator = None

        setattr(self, "_{}".format('id'), kwargs.get('id', None))
        setattr(self, "_{}".format('account_id'), kwargs.get('account_id', None))
        setattr(self, "_{}".format('is_published'), kwargs.get('is_published', None))
        setattr(self, "_{}".format('is_enabled'), kwargs.get('is_enabled', None))
        setattr(self, "_{}".format('is_uploaded'), kwargs.get('is_uploaded', None))
        setattr(self, "_{}".format('has_draft_changes'), kwargs.get('has_draft_changes', None))
        setattr(self, "_{}".format('form_state'), kwargs.get('form_state', None))
        setattr(self, "_{}".format('form_properties'), kwargs.get('form_properties', None))
        setattr(self, "_{}".format('form_metadata'), kwargs.get('form_metadata', None))

    @property
    def id(self):
        """Gets the id of this WebFormSummary.  # noqa: E501


        :return: The id of this WebFormSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebFormSummary.


        :param id: The id of this WebFormSummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this WebFormSummary.  # noqa: E501


        :return: The account_id of this WebFormSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this WebFormSummary.


        :param account_id: The account_id of this WebFormSummary.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def is_published(self):
        """Gets the is_published of this WebFormSummary.  # noqa: E501

        Has the form been published  # noqa: E501

        :return: The is_published of this WebFormSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this WebFormSummary.

        Has the form been published  # noqa: E501

        :param is_published: The is_published of this WebFormSummary.  # noqa: E501
        :type: bool
        """

        self._is_published = is_published

    @property
    def is_enabled(self):
        """Gets the is_enabled of this WebFormSummary.  # noqa: E501

        Is the form currently enabled and available for data collection  # noqa: E501

        :return: The is_enabled of this WebFormSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this WebFormSummary.

        Is the form currently enabled and available for data collection  # noqa: E501

        :param is_enabled: The is_enabled of this WebFormSummary.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_uploaded(self):
        """Gets the is_uploaded of this WebFormSummary.  # noqa: E501

        Has the form created through upload  # noqa: E501

        :return: The is_uploaded of this WebFormSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_uploaded

    @is_uploaded.setter
    def is_uploaded(self, is_uploaded):
        """Sets the is_uploaded of this WebFormSummary.

        Has the form created through upload  # noqa: E501

        :param is_uploaded: The is_uploaded of this WebFormSummary.  # noqa: E501
        :type: bool
        """

        self._is_uploaded = is_uploaded

    @property
    def has_draft_changes(self):
        """Gets the has_draft_changes of this WebFormSummary.  # noqa: E501

        Does the form have draft changes that need to be published?  # noqa: E501

        :return: The has_draft_changes of this WebFormSummary.  # noqa: E501
        :rtype: bool
        """
        return self._has_draft_changes

    @has_draft_changes.setter
    def has_draft_changes(self, has_draft_changes):
        """Sets the has_draft_changes of this WebFormSummary.

        Does the form have draft changes that need to be published?  # noqa: E501

        :param has_draft_changes: The has_draft_changes of this WebFormSummary.  # noqa: E501
        :type: bool
        """

        self._has_draft_changes = has_draft_changes

    @property
    def form_state(self):
        """Gets the form_state of this WebFormSummary.  # noqa: E501


        :return: The form_state of this WebFormSummary.  # noqa: E501
        :rtype: WebFormState
        """
        return self._form_state

    @form_state.setter
    def form_state(self, form_state):
        """Sets the form_state of this WebFormSummary.


        :param form_state: The form_state of this WebFormSummary.  # noqa: E501
        :type: WebFormState
        """

        self._form_state = form_state

    @property
    def form_properties(self):
        """Gets the form_properties of this WebFormSummary.  # noqa: E501


        :return: The form_properties of this WebFormSummary.  # noqa: E501
        :rtype: WebFormProperties
        """
        return self._form_properties

    @form_properties.setter
    def form_properties(self, form_properties):
        """Sets the form_properties of this WebFormSummary.


        :param form_properties: The form_properties of this WebFormSummary.  # noqa: E501
        :type: WebFormProperties
        """

        self._form_properties = form_properties

    @property
    def form_metadata(self):
        """Gets the form_metadata of this WebFormSummary.  # noqa: E501


        :return: The form_metadata of this WebFormSummary.  # noqa: E501
        :rtype: WebFormMetadata
        """
        return self._form_metadata

    @form_metadata.setter
    def form_metadata(self, form_metadata):
        """Sets the form_metadata of this WebFormSummary.


        :param form_metadata: The form_metadata of this WebFormSummary.  # noqa: E501
        :type: WebFormMetadata
        """

        self._form_metadata = form_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebFormSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebFormSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebFormSummary):
            return True

        return self.to_dict() != other.to_dict()
