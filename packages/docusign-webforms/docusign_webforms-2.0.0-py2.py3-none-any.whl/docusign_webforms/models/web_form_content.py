# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_webforms.client.configuration import Configuration


class WebFormContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'components': 'dict(str, dict(str, object))',
        'is_standalone': 'bool',
        'brand_id': 'str',
        'templates': 'list[TemplateProperties]'
    }

    attribute_map = {
        'components': 'components',
        'is_standalone': 'isStandalone',
        'brand_id': 'brandId',
        'templates': 'templates'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """WebFormContent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._components = None
        self._is_standalone = None
        self._brand_id = None
        self._templates = None
        self.discriminator = None

        setattr(self, "_{}".format('components'), kwargs.get('components', None))
        setattr(self, "_{}".format('is_standalone'), kwargs.get('is_standalone', None))
        setattr(self, "_{}".format('brand_id'), kwargs.get('brand_id', None))
        setattr(self, "_{}".format('templates'), kwargs.get('templates', None))

    @property
    def components(self):
        """Gets the components of this WebFormContent.  # noqa: E501

        Key/value dictionary of components that represent the form  # noqa: E501

        :return: The components of this WebFormContent.  # noqa: E501
        :rtype: dict(str, dict(str, object))
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this WebFormContent.

        Key/value dictionary of components that represent the form  # noqa: E501

        :param components: The components of this WebFormContent.  # noqa: E501
        :type: dict(str, dict(str, object))
        """

        self._components = components

    @property
    def is_standalone(self):
        """Gets the is_standalone of this WebFormContent.  # noqa: E501


        :return: The is_standalone of this WebFormContent.  # noqa: E501
        :rtype: bool
        """
        return self._is_standalone

    @is_standalone.setter
    def is_standalone(self, is_standalone):
        """Sets the is_standalone of this WebFormContent.


        :param is_standalone: The is_standalone of this WebFormContent.  # noqa: E501
        :type: bool
        """

        self._is_standalone = is_standalone

    @property
    def brand_id(self):
        """Gets the brand_id of this WebFormContent.  # noqa: E501


        :return: The brand_id of this WebFormContent.  # noqa: E501
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this WebFormContent.


        :param brand_id: The brand_id of this WebFormContent.  # noqa: E501
        :type: str
        """

        self._brand_id = brand_id

    @property
    def templates(self):
        """Gets the templates of this WebFormContent.  # noqa: E501

        Optional template information that will be used to seed the form.  # noqa: E501

        :return: The templates of this WebFormContent.  # noqa: E501
        :rtype: list[TemplateProperties]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this WebFormContent.

        Optional template information that will be used to seed the form.  # noqa: E501

        :param templates: The templates of this WebFormContent.  # noqa: E501
        :type: list[TemplateProperties]
        """

        self._templates = templates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebFormContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebFormContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebFormContent):
            return True

        return self.to_dict() != other.to_dict()
