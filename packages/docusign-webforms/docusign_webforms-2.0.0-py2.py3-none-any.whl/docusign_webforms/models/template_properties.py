# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_webforms.client.configuration import Configuration


class TemplateProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_template_id': 'str',
        'cloned_template_id': 'str',
        'imported_date_time': 'datetime',
        'recipient_ids': 'list[str]'
    }

    attribute_map = {
        'original_template_id': 'originalTemplateId',
        'cloned_template_id': 'clonedTemplateId',
        'imported_date_time': 'importedDateTime',
        'recipient_ids': 'recipientIds'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """TemplateProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._original_template_id = None
        self._cloned_template_id = None
        self._imported_date_time = None
        self._recipient_ids = None
        self.discriminator = None

        setattr(self, "_{}".format('original_template_id'), kwargs.get('original_template_id', None))
        setattr(self, "_{}".format('cloned_template_id'), kwargs.get('cloned_template_id', None))
        setattr(self, "_{}".format('imported_date_time'), kwargs.get('imported_date_time', None))
        setattr(self, "_{}".format('recipient_ids'), kwargs.get('recipient_ids', None))

    @property
    def original_template_id(self):
        """Gets the original_template_id of this TemplateProperties.  # noqa: E501

        Template identifier for original Template that is used by the DocuSign Template API.  # noqa: E501

        :return: The original_template_id of this TemplateProperties.  # noqa: E501
        :rtype: str
        """
        return self._original_template_id

    @original_template_id.setter
    def original_template_id(self, original_template_id):
        """Sets the original_template_id of this TemplateProperties.

        Template identifier for original Template that is used by the DocuSign Template API.  # noqa: E501

        :param original_template_id: The original_template_id of this TemplateProperties.  # noqa: E501
        :type: str
        """

        self._original_template_id = original_template_id

    @property
    def cloned_template_id(self):
        """Gets the cloned_template_id of this TemplateProperties.  # noqa: E501

        Template identifier for cloned Template that is used by the DocuSign Template API.  # noqa: E501

        :return: The cloned_template_id of this TemplateProperties.  # noqa: E501
        :rtype: str
        """
        return self._cloned_template_id

    @cloned_template_id.setter
    def cloned_template_id(self, cloned_template_id):
        """Sets the cloned_template_id of this TemplateProperties.

        Template identifier for cloned Template that is used by the DocuSign Template API.  # noqa: E501

        :param cloned_template_id: The cloned_template_id of this TemplateProperties.  # noqa: E501
        :type: str
        """

        self._cloned_template_id = cloned_template_id

    @property
    def imported_date_time(self):
        """Gets the imported_date_time of this TemplateProperties.  # noqa: E501

        Track the time of assignment of Template information to the Form.  # noqa: E501

        :return: The imported_date_time of this TemplateProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._imported_date_time

    @imported_date_time.setter
    def imported_date_time(self, imported_date_time):
        """Sets the imported_date_time of this TemplateProperties.

        Track the time of assignment of Template information to the Form.  # noqa: E501

        :param imported_date_time: The imported_date_time of this TemplateProperties.  # noqa: E501
        :type: datetime
        """

        self._imported_date_time = imported_date_time

    @property
    def recipient_ids(self):
        """Gets the recipient_ids of this TemplateProperties.  # noqa: E501

        Track mapped recipients on Template.  # noqa: E501

        :return: The recipient_ids of this TemplateProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipient_ids

    @recipient_ids.setter
    def recipient_ids(self, recipient_ids):
        """Sets the recipient_ids of this TemplateProperties.

        Track mapped recipients on Template.  # noqa: E501

        :param recipient_ids: The recipient_ids of this TemplateProperties.  # noqa: E501
        :type: list[str]
        """

        self._recipient_ids = recipient_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplateProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplateProperties):
            return True

        return self.to_dict() != other.to_dict()
