# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..client.configuration import Configuration
from ..client.api_client import ApiClient


class FormManagementApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_form(self, account_id, form_id, **kwargs):
        """
        Get Form
        Retrieves form information filter by form id and state. The `state` parameter is optional and can accept value from `draft, active`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_form(account_id, form_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form that is consistent for it's lifetime (required)
        :param str state: The state of the web form configuration
        :return: WebForm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_form_with_http_info(account_id, form_id, **kwargs)
        else:
            (data) = self.get_form_with_http_info(account_id, form_id, **kwargs)
            return data

    def get_form_with_http_info(self, account_id, form_id, **kwargs):
        """
        Get Form
        Retrieves form information filter by form id and state. The `state` parameter is optional and can accept value from `draft, active`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_form_with_http_info(account_id, form_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form that is consistent for it's lifetime (required)
        :param str state: The state of the web form configuration
        :return: WebForm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'form_id', 'state']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_form`")
        # verify the required parameter 'form_id' is set
        if ('form_id' not in params) or (params['form_id'] is None):
            raise ValueError("Missing the required parameter `form_id` when calling `get_form`")

        if 'state' in params and len(params['state']) > 15:
            raise ValueError("Invalid value for parameter `state` when calling `get_form`, length must be less than or equal to `15`")

        collection_formats = {}

        resource_path = '/v1.1/accounts/{accountId}/forms/{formId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'form_id' in params:
            path_params['formId'] = params['form_id']

        query_params = {}
        if 'state' in params:
            query_params['state'] = params['state']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WebForm',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_forms(self, account_id, **kwargs):
        """
        List Forms
        List all the forms for the active user that can be in an active or draft state
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_forms(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the webform resides (required)
        :param str user_filter: Filter which forms are returned
        :param bool is_standalone: Is the form a standalone form
        :param bool is_published: Has the form been published
        :param str sort_by: Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.
        :param str search: Search through form names
        :param str start_position: Starting position for desired page of results.
        :param str count: Number of results to return per page.
        :return: WebFormSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_forms_with_http_info(account_id, **kwargs)
        else:
            (data) = self.list_forms_with_http_info(account_id, **kwargs)
            return data

    def list_forms_with_http_info(self, account_id, **kwargs):
        """
        List Forms
        List all the forms for the active user that can be in an active or draft state
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_forms_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the webform resides (required)
        :param str user_filter: Filter which forms are returned
        :param bool is_standalone: Is the form a standalone form
        :param bool is_published: Has the form been published
        :param str sort_by: Sort result set in mentioned sort property:order. Default is lastModifiedDateTime:desc. Default sort is descending if not mentioned.
        :param str search: Search through form names
        :param str start_position: Starting position for desired page of results.
        :param str count: Number of results to return per page.
        :return: WebFormSummaryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_filter', 'is_standalone', 'is_published', 'sort_by', 'search', 'start_position', 'count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_forms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_forms`")

        if 'sort_by' in params and len(params['sort_by']) > 50:
            raise ValueError("Invalid value for parameter `sort_by` when calling `list_forms`, length must be less than or equal to `50`")

        collection_formats = {}

        resource_path = '/v1.1/accounts/{accountId}/forms'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']

        query_params = {}
        if 'user_filter' in params:
            query_params['user_filter'] = params['user_filter']
        if 'is_standalone' in params:
            query_params['is_standalone'] = params['is_standalone']
        if 'is_published' in params:
            query_params['is_published'] = params['is_published']
        if 'sort_by' in params:
            query_params['sort_by'] = params['sort_by']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'start_position' in params:
            query_params['start_position'] = params['start_position']
        if 'count' in params:
            query_params['count'] = params['count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WebFormSummaryList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
