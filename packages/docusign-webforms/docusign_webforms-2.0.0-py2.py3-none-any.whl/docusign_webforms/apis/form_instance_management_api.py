# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..client.configuration import Configuration
from ..client.api_client import ApiClient


class FormInstanceManagementApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_instance(self, account_id, form_id, create_instance_body, **kwargs):
        """
        Creates an instance of the web form
        Creates an instance of the web form.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_instance(account_id, form_id, create_instance_body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form entity that is consistent for it's lifetime (required)
        :param CreateInstanceRequestBody create_instance_body: Request body containing properties that will be used to create instance. (required)
        :return: WebFormInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_instance_with_http_info(account_id, form_id, create_instance_body, **kwargs)
        else:
            (data) = self.create_instance_with_http_info(account_id, form_id, create_instance_body, **kwargs)
            return data

    def create_instance_with_http_info(self, account_id, form_id, create_instance_body, **kwargs):
        """
        Creates an instance of the web form
        Creates an instance of the web form.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_instance_with_http_info(account_id, form_id, create_instance_body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form entity that is consistent for it's lifetime (required)
        :param CreateInstanceRequestBody create_instance_body: Request body containing properties that will be used to create instance. (required)
        :return: WebFormInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'form_id', 'create_instance_body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_instance`")
        # verify the required parameter 'form_id' is set
        if ('form_id' not in params) or (params['form_id'] is None):
            raise ValueError("Missing the required parameter `form_id` when calling `create_instance`")
        # verify the required parameter 'create_instance_body' is set
        if ('create_instance_body' not in params) or (params['create_instance_body'] is None):
            raise ValueError("Missing the required parameter `create_instance_body` when calling `create_instance`")


        collection_formats = {}

        resource_path = '/v1.1/accounts/{accountId}/forms/{formId}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'form_id' in params:
            path_params['formId'] = params['form_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_instance_body' in params:
            body_params = params['create_instance_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WebFormInstance',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_instance(self, account_id, form_id, instance_id, **kwargs):
        """
        Get form instance
        Retrieves instance information filter by instance id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_instance(account_id, form_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form entity that is consistent for it's lifetime (required)
        :param str instance_id: Unique identifier for a Web Form Instance that is consistent until its expiration (required)
        :return: WebFormInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_instance_with_http_info(account_id, form_id, instance_id, **kwargs)
        else:
            (data) = self.get_instance_with_http_info(account_id, form_id, instance_id, **kwargs)
            return data

    def get_instance_with_http_info(self, account_id, form_id, instance_id, **kwargs):
        """
        Get form instance
        Retrieves instance information filter by instance id
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_instance_with_http_info(account_id, form_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form entity that is consistent for it's lifetime (required)
        :param str instance_id: Unique identifier for a Web Form Instance that is consistent until its expiration (required)
        :return: WebFormInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'form_id', 'instance_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_instance`")
        # verify the required parameter 'form_id' is set
        if ('form_id' not in params) or (params['form_id'] is None):
            raise ValueError("Missing the required parameter `form_id` when calling `get_instance`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `get_instance`")


        collection_formats = {}

        resource_path = '/v1.1/accounts/{accountId}/forms/{formId}/instances/{instanceId}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'form_id' in params:
            path_params['formId'] = params['form_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WebFormInstance',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_instances(self, account_id, form_id, **kwargs):
        """
        List instances
        List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_instances(account_id, form_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form that is consistent for it's lifetime (required)
        :param str client_user_id: A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.
        :return: WebFormInstanceList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_instances_with_http_info(account_id, form_id, **kwargs)
        else:
            (data) = self.list_instances_with_http_info(account_id, form_id, **kwargs)
            return data

    def list_instances_with_http_info(self, account_id, form_id, **kwargs):
        """
        List instances
        List all the instances of a web form in an account. When filtered by clientUserId, it will return instances having same clientUserId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_instances_with_http_info(account_id, form_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form that is consistent for it's lifetime (required)
        :param str client_user_id: A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.
        :return: WebFormInstanceList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'form_id', 'client_user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_instances`")
        # verify the required parameter 'form_id' is set
        if ('form_id' not in params) or (params['form_id'] is None):
            raise ValueError("Missing the required parameter `form_id` when calling `list_instances`")

        if 'client_user_id' in params and len(params['client_user_id']) > 100:
            raise ValueError("Invalid value for parameter `client_user_id` when calling `list_instances`, length must be less than or equal to `100`")

        collection_formats = {}

        resource_path = '/v1.1/accounts/{accountId}/forms/{formId}/instances'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'form_id' in params:
            path_params['formId'] = params['form_id']

        query_params = {}
        if 'client_user_id' in params:
            query_params['client_user_id'] = params['client_user_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WebFormInstanceList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def refresh_token(self, account_id, form_id, instance_id, **kwargs):
        """
        Refreshes the instance token
        Generates new instance token for the existing Web Form Instance.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refresh_token(account_id, form_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form entity that is consistent for it's lifetime (required)
        :param str instance_id: Unique identifier for a Web Form Instance that is consistent until its expiration (required)
        :return: WebFormInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.refresh_token_with_http_info(account_id, form_id, instance_id, **kwargs)
        else:
            (data) = self.refresh_token_with_http_info(account_id, form_id, instance_id, **kwargs)
            return data

    def refresh_token_with_http_info(self, account_id, form_id, instance_id, **kwargs):
        """
        Refreshes the instance token
        Generates new instance token for the existing Web Form Instance.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refresh_token_with_http_info(account_id, form_id, instance_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account identifier in which the web form resides (required)
        :param str form_id: Unique identifier for a web form entity that is consistent for it's lifetime (required)
        :param str instance_id: Unique identifier for a Web Form Instance that is consistent until its expiration (required)
        :return: WebFormInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'form_id', 'instance_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `refresh_token`")
        # verify the required parameter 'form_id' is set
        if ('form_id' not in params) or (params['form_id'] is None):
            raise ValueError("Missing the required parameter `form_id` when calling `refresh_token`")
        # verify the required parameter 'instance_id' is set
        if ('instance_id' not in params) or (params['instance_id'] is None):
            raise ValueError("Missing the required parameter `instance_id` when calling `refresh_token`")


        collection_formats = {}

        resource_path = '/v1.1/accounts/{accountId}/forms/{formId}/instances/{instanceId}/refresh'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']
        if 'form_id' in params:
            path_params['formId'] = params['form_id']
        if 'instance_id' in params:
            path_params['instanceId'] = params['instance_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WebFormInstance',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
