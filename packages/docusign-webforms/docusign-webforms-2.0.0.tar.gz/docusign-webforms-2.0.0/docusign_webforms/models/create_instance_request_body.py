# coding: utf-8

"""
    Web Forms API version 1.1

    The Web Forms API facilitates generating semantic HTML forms around everyday contracts.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_webforms.client.configuration import Configuration


class CreateInstanceRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'form_values': 'WebFormValues',
        'client_user_id': 'str',
        'authentication_instant': 'datetime',
        'authentication_method': 'AuthenticationMethod',
        'assertion_id': 'str',
        'security_domain': 'str',
        'return_url': 'str',
        'expiration_offset': 'int',
        'tags': 'list[str]'
    }

    attribute_map = {
        'form_values': 'formValues',
        'client_user_id': 'clientUserId',
        'authentication_instant': 'authenticationInstant',
        'authentication_method': 'authenticationMethod',
        'assertion_id': 'assertionId',
        'security_domain': 'securityDomain',
        'return_url': 'returnUrl',
        'expiration_offset': 'expirationOffset',
        'tags': 'tags'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """CreateInstanceRequestBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._form_values = None
        self._client_user_id = None
        self._authentication_instant = None
        self._authentication_method = None
        self._assertion_id = None
        self._security_domain = None
        self._return_url = None
        self._expiration_offset = None
        self._tags = None
        self.discriminator = None

        setattr(self, "_{}".format('form_values'), kwargs.get('form_values', None))
        setattr(self, "_{}".format('client_user_id'), kwargs.get('client_user_id', None))
        setattr(self, "_{}".format('authentication_instant'), kwargs.get('authentication_instant', None))
        setattr(self, "_{}".format('authentication_method'), kwargs.get('authentication_method', None))
        setattr(self, "_{}".format('assertion_id'), kwargs.get('assertion_id', None))
        setattr(self, "_{}".format('security_domain'), kwargs.get('security_domain', None))
        setattr(self, "_{}".format('return_url'), kwargs.get('return_url', None))
        setattr(self, "_{}".format('expiration_offset'), kwargs.get('expiration_offset', None))
        setattr(self, "_{}".format('tags'), kwargs.get('tags', None))

    @property
    def form_values(self):
        """Gets the form_values of this CreateInstanceRequestBody.  # noqa: E501


        :return: The form_values of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: WebFormValues
        """
        return self._form_values

    @form_values.setter
    def form_values(self, form_values):
        """Sets the form_values of this CreateInstanceRequestBody.


        :param form_values: The form_values of this CreateInstanceRequestBody.  # noqa: E501
        :type: WebFormValues
        """

        self._form_values = form_values

    @property
    def client_user_id(self):
        """Gets the client_user_id of this CreateInstanceRequestBody.  # noqa: E501


        :return: The client_user_id of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._client_user_id

    @client_user_id.setter
    def client_user_id(self, client_user_id):
        """Sets the client_user_id of this CreateInstanceRequestBody.


        :param client_user_id: The client_user_id of this CreateInstanceRequestBody.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_user_id is None:
            raise ValueError("Invalid value for `client_user_id`, must not be `None`")  # noqa: E501

        self._client_user_id = client_user_id

    @property
    def authentication_instant(self):
        """Gets the authentication_instant of this CreateInstanceRequestBody.  # noqa: E501


        :return: The authentication_instant of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: datetime
        """
        return self._authentication_instant

    @authentication_instant.setter
    def authentication_instant(self, authentication_instant):
        """Sets the authentication_instant of this CreateInstanceRequestBody.


        :param authentication_instant: The authentication_instant of this CreateInstanceRequestBody.  # noqa: E501
        :type: datetime
        """

        self._authentication_instant = authentication_instant

    @property
    def authentication_method(self):
        """Gets the authentication_method of this CreateInstanceRequestBody.  # noqa: E501


        :return: The authentication_method of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: AuthenticationMethod
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this CreateInstanceRequestBody.


        :param authentication_method: The authentication_method of this CreateInstanceRequestBody.  # noqa: E501
        :type: AuthenticationMethod
        """

        self._authentication_method = authentication_method

    @property
    def assertion_id(self):
        """Gets the assertion_id of this CreateInstanceRequestBody.  # noqa: E501


        :return: The assertion_id of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._assertion_id

    @assertion_id.setter
    def assertion_id(self, assertion_id):
        """Sets the assertion_id of this CreateInstanceRequestBody.


        :param assertion_id: The assertion_id of this CreateInstanceRequestBody.  # noqa: E501
        :type: str
        """

        self._assertion_id = assertion_id

    @property
    def security_domain(self):
        """Gets the security_domain of this CreateInstanceRequestBody.  # noqa: E501


        :return: The security_domain of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._security_domain

    @security_domain.setter
    def security_domain(self, security_domain):
        """Sets the security_domain of this CreateInstanceRequestBody.


        :param security_domain: The security_domain of this CreateInstanceRequestBody.  # noqa: E501
        :type: str
        """

        self._security_domain = security_domain

    @property
    def return_url(self):
        """Gets the return_url of this CreateInstanceRequestBody.  # noqa: E501


        :return: The return_url of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this CreateInstanceRequestBody.


        :param return_url: The return_url of this CreateInstanceRequestBody.  # noqa: E501
        :type: str
        """

        self._return_url = return_url

    @property
    def expiration_offset(self):
        """Gets the expiration_offset of this CreateInstanceRequestBody.  # noqa: E501


        :return: The expiration_offset of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: int
        """
        return self._expiration_offset

    @expiration_offset.setter
    def expiration_offset(self, expiration_offset):
        """Sets the expiration_offset of this CreateInstanceRequestBody.


        :param expiration_offset: The expiration_offset of this CreateInstanceRequestBody.  # noqa: E501
        :type: int
        """

        self._expiration_offset = expiration_offset

    @property
    def tags(self):
        """Gets the tags of this CreateInstanceRequestBody.  # noqa: E501

        List of tags provided by the user with each request. This field is optional.  # noqa: E501

        :return: The tags of this CreateInstanceRequestBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateInstanceRequestBody.

        List of tags provided by the user with each request. This field is optional.  # noqa: E501

        :param tags: The tags of this CreateInstanceRequestBody.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateInstanceRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInstanceRequestBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateInstanceRequestBody):
            return True

        return self.to_dict() != other.to_dict()
