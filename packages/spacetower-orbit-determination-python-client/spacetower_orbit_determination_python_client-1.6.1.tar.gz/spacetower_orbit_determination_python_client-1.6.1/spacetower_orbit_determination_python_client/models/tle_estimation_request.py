# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from spacetower_orbit_determination_python_client.models.measurements import Measurements
from spacetower_orbit_determination_python_client.models.static_outlier_filter import StaticOutlierFilter
from spacetower_orbit_determination_python_client.models.two_line_element_orbit import TwoLineElementOrbit
from typing import Optional, Set
from typing_extensions import Self

class TleEstimationRequest(BaseModel):
    """
    Configuration for orbit determination based on SGP4 model and batch least squares (with  Gauss-Newton algorithm) 
    """ # noqa: E501
    initial_guess: TwoLineElementOrbit = Field(alias="initialGuess")
    estimate_b_star_flag: Optional[StrictBool] = Field(default=True, alias="estimateBStarFlag")
    outlier_filter: Optional[StaticOutlierFilter] = Field(default=None, alias="outlierFilter")
    measurements: Measurements
    data: Optional[Dict[str, StrictStr]] = Field(default=None, description="References to the data to be used during the computation")
    __properties: ClassVar[List[str]] = ["initialGuess", "estimateBStarFlag", "outlierFilter", "measurements", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TleEstimationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of initial_guess
        if self.initial_guess:
            _dict['initialGuess'] = self.initial_guess.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outlier_filter
        if self.outlier_filter:
            _dict['outlierFilter'] = self.outlier_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of measurements
        if self.measurements:
            _dict['measurements'] = self.measurements.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TleEstimationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initialGuess": TwoLineElementOrbit.from_dict(obj["initialGuess"]) if obj.get("initialGuess") is not None else None,
            "estimateBStarFlag": obj.get("estimateBStarFlag") if obj.get("estimateBStarFlag") is not None else True,
            "outlierFilter": StaticOutlierFilter.from_dict(obj["outlierFilter"]) if obj.get("outlierFilter") is not None else None,
            "measurements": Measurements.from_dict(obj["measurements"]) if obj.get("measurements") is not None else None,
            "data": obj.get("data")
        })
        return _obj


