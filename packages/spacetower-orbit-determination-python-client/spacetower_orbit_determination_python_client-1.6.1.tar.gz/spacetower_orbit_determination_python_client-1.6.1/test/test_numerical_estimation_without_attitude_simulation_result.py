# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_determination_python_client.models.numerical_estimation_without_attitude_simulation_result import NumericalEstimationWithoutAttitudeSimulationResult

class TestNumericalEstimationWithoutAttitudeSimulationResult(unittest.TestCase):
    """NumericalEstimationWithoutAttitudeSimulationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalEstimationWithoutAttitudeSimulationResult:
        """Test NumericalEstimationWithoutAttitudeSimulationResult
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalEstimationWithoutAttitudeSimulationResult`
        """
        model = NumericalEstimationWithoutAttitudeSimulationResult()
        if include_optional:
            return NumericalEstimationWithoutAttitudeSimulationResult(
                state_estimate = spacetower_orbit_determination_python_client.models.isotropic_object_state_estimate.IsotropicObjectStateEstimate(
                    orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'CARTESIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.isotropic_object.IsotropicObject(), ),
                kalman_result = spacetower_orbit_determination_python_client.models.deprecated_kalman_result.DeprecatedKalmanResult(
                    output_osculating_orbits = [
                        spacetower_orbit_determination_python_client.models.orbit.Orbit(
                            orbit_type = 'CARTESIAN', )
                        ], 
                    output_mean_orbits = [
                        spacetower_orbit_determination_python_client.models.orbit.Orbit(
                            orbit_type = 'CARTESIAN', )
                        ], 
                    output_dated_covariance_matrices = spacetower_orbit_determination_python_client.models.dated_covariance_matrix_set.DatedCovarianceMatrixSet(
                        dated_covariance_matrices = [
                            spacetower_orbit_determination_python_client.models.dated_covariance_matrix.DatedCovarianceMatrix(
                                date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                covariance_matrix = [
                                    [
                                        1.337
                                        ]
                                    ], )
                            ], ), 
                    output_model_parameters = spacetower_orbit_determination_python_client.models.output_model_parameters.OutputModelParameters(
                        dates = [
                            datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
                            ], 
                        estimated_drag_coefficients = [
                            1.337
                            ], 
                        estimated_reflection_coefficients = [
                            1.337
                            ], 
                        estimated_satellite_clock_offsets = [
                            1.337
                            ], 
                        estimated_thrust_scale_factors_result = [
                            [
                                1.337
                                ]
                            ], ), 
                    output_residuals = null, 
                    final_uncertainties = spacetower_orbit_determination_python_client.models.uncertainty_estimate.UncertaintyEstimate(
                        orbital_covariance_matrix = spacetower_orbit_determination_python_client.models.orbital_covariance_matrix.OrbitalCovarianceMatrix(
                            covariance_orbit_type = 'CARTESIAN', ), 
                        drag_coefficient_standard_deviation = 1.337, 
                        reflectivity_coefficient_standard_deviation = 1.337, 
                        thrust_parameters_standard_deviation = [
                            1.337
                            ], 
                        satellite_clock_offset_standard_deviation = 1.337, ), ),
                estimation_result = spacetower_orbit_determination_python_client.models.estimation_result.EstimationResult(
                    estimator_type = 'UNSCENTED_KALMAN', ),
                data = {
                    'key' : ''
                    }
            )
        else:
            return NumericalEstimationWithoutAttitudeSimulationResult(
                state_estimate = spacetower_orbit_determination_python_client.models.isotropic_object_state_estimate.IsotropicObjectStateEstimate(
                    orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'CARTESIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.isotropic_object.IsotropicObject(), ),
        )
        """

    def testNumericalEstimationWithoutAttitudeSimulationResult(self):
        """Test NumericalEstimationWithoutAttitudeSimulationResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
