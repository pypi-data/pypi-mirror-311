# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 1.6.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_determination_python_client.models.numerical_estimation_with_attitude_simulation_request import NumericalEstimationWithAttitudeSimulationRequest

class TestNumericalEstimationWithAttitudeSimulationRequest(unittest.TestCase):
    """NumericalEstimationWithAttitudeSimulationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalEstimationWithAttitudeSimulationRequest:
        """Test NumericalEstimationWithAttitudeSimulationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalEstimationWithAttitudeSimulationRequest`
        """
        model = NumericalEstimationWithAttitudeSimulationRequest()
        if include_optional:
            return NumericalEstimationWithAttitudeSimulationRequest(
                initial_guess = spacetower_orbit_determination_python_client.models.box_object_state_estimate.BoxObjectStateEstimate(
                    orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'CARTESIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.box_object.BoxObject(), ),
                maneuver_schedule = spacetower_orbit_determination_python_client.models.attitude_based_finite_thrust_schedule.AttitudeBasedFiniteThrustSchedule(),
                attitude_sequence = spacetower_orbit_determination_python_client.models.attitude_sequence.AttitudeSequence(
                    attitude_sequence_type = 'DATE_TRIGGERED_ATTITUDE_SWITCH', 
                    initial_attitude_law = spacetower_orbit_determination_python_client.models.attitude_law.AttitudeLaw(
                        attitude_law_type = 'LOCAL_FRAME_ATTITUDE', ), ),
                measurements_set = [
                    spacetower_orbit_determination_python_client.models.measurements.Measurements(
                        measurement_type = 'GPS_NMEA', 
                        dates = [
                            '2024-01-01T00:00Z'
                            ], )
                    ],
                simulation_configuration = spacetower_orbit_determination_python_client.models.simulation_configuration.SimulationConfiguration(
                    earth_fixed_frame_id = null, 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, 
                    shadow_model_type = 'CONICAL', 
                    perturbations = [
                        spacetower_orbit_determination_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'ATMOSPHERIC_DRAG', )
                        ], 
                    integrator_configuration = spacetower_orbit_determination_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), ),
                estimation_configuration = spacetower_orbit_determination_python_client.models.estimation_configuration.EstimationConfiguration(
                    estimator_type = 'UNSCENTED_KALMAN', ),
                post_process_configuration = spacetower_orbit_determination_python_client.models.post_process_configuration.PostProcessConfiguration(
                    output_osculating_orbit_type = 'CARTESIAN', 
                    mean_theory = 'DSST_6X0', 
                    residual_computation_configuration = spacetower_orbit_determination_python_client.models.residual_computation_configuration.ResidualComputationConfiguration(
                        remove_outliers = True, 
                        normalize_residuals = True, ), 
                    final_covariance_configuration = spacetower_orbit_determination_python_client.models.output_covariance_configuration.OutputCovarianceConfiguration(
                        orbit_type = 'CARTESIAN', 
                        anomaly_type = 'MEAN', 
                        frame_id = 'CIRF', ), ),
                data = {
                    'key' : ''
                    }
            )
        else:
            return NumericalEstimationWithAttitudeSimulationRequest(
                initial_guess = spacetower_orbit_determination_python_client.models.box_object_state_estimate.BoxObjectStateEstimate(
                    orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'CARTESIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.box_object.BoxObject(), ),
                attitude_sequence = spacetower_orbit_determination_python_client.models.attitude_sequence.AttitudeSequence(
                    attitude_sequence_type = 'DATE_TRIGGERED_ATTITUDE_SWITCH', 
                    initial_attitude_law = spacetower_orbit_determination_python_client.models.attitude_law.AttitudeLaw(
                        attitude_law_type = 'LOCAL_FRAME_ATTITUDE', ), ),
                measurements_set = [
                    spacetower_orbit_determination_python_client.models.measurements.Measurements(
                        measurement_type = 'GPS_NMEA', 
                        dates = [
                            '2024-01-01T00:00Z'
                            ], )
                    ],
                simulation_configuration = spacetower_orbit_determination_python_client.models.simulation_configuration.SimulationConfiguration(
                    earth_fixed_frame_id = null, 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, 
                    shadow_model_type = 'CONICAL', 
                    perturbations = [
                        spacetower_orbit_determination_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'ATMOSPHERIC_DRAG', )
                        ], 
                    integrator_configuration = spacetower_orbit_determination_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), ),
                estimation_configuration = spacetower_orbit_determination_python_client.models.estimation_configuration.EstimationConfiguration(
                    estimator_type = 'UNSCENTED_KALMAN', ),
                post_process_configuration = spacetower_orbit_determination_python_client.models.post_process_configuration.PostProcessConfiguration(
                    output_osculating_orbit_type = 'CARTESIAN', 
                    mean_theory = 'DSST_6X0', 
                    residual_computation_configuration = spacetower_orbit_determination_python_client.models.residual_computation_configuration.ResidualComputationConfiguration(
                        remove_outliers = True, 
                        normalize_residuals = True, ), 
                    final_covariance_configuration = spacetower_orbit_determination_python_client.models.output_covariance_configuration.OutputCovarianceConfiguration(
                        orbit_type = 'CARTESIAN', 
                        anomaly_type = 'MEAN', 
                        frame_id = 'CIRF', ), ),
        )
        """

    def testNumericalEstimationWithAttitudeSimulationRequest(self):
        """Test NumericalEstimationWithAttitudeSimulationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
