# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_determination_python_client.models.numerical_apriori_residuals_computation_request_common_fields import NumericalAprioriResidualsComputationRequestCommonFields

class TestNumericalAprioriResidualsComputationRequestCommonFields(unittest.TestCase):
    """NumericalAprioriResidualsComputationRequestCommonFields unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalAprioriResidualsComputationRequestCommonFields:
        """Test NumericalAprioriResidualsComputationRequestCommonFields
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalAprioriResidualsComputationRequestCommonFields`
        """
        model = NumericalAprioriResidualsComputationRequestCommonFields()
        if include_optional:
            return NumericalAprioriResidualsComputationRequestCommonFields(
                measurements = spacetower_orbit_determination_python_client.models.measurements.Measurements(
                    measurement_type = 'GPS_NMEA', 
                    dates = [
                        '2024-01-01T00:00Z'
                        ], ),
                normalize_residuals = True,
                data = {
                    'key' : ''
                    },
                simulation_configuration = spacetower_orbit_determination_python_client.models.simulation_configuration.SimulationConfiguration(
                    earth_fixed_frame_id = null, 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, 
                    shadow_model_type = 'CONICAL', 
                    perturbations = [
                        spacetower_orbit_determination_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'ATMOSPHERIC_DRAG', )
                        ], 
                    integrator_configuration = spacetower_orbit_determination_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), )
            )
        else:
            return NumericalAprioriResidualsComputationRequestCommonFields(
                measurements = spacetower_orbit_determination_python_client.models.measurements.Measurements(
                    measurement_type = 'GPS_NMEA', 
                    dates = [
                        '2024-01-01T00:00Z'
                        ], ),
                simulation_configuration = spacetower_orbit_determination_python_client.models.simulation_configuration.SimulationConfiguration(
                    earth_fixed_frame_id = null, 
                    ellipsoid_id = 'WGS84', 
                    include_tidal_effects_in_eop_interpolation = True, 
                    shadow_model_type = 'CONICAL', 
                    perturbations = [
                        spacetower_orbit_determination_python_client.models.perturbation.Perturbation(
                            perturbation_type = 'ATMOSPHERIC_DRAG', )
                        ], 
                    integrator_configuration = spacetower_orbit_determination_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), ),
        )
        """

    def testNumericalAprioriResidualsComputationRequestCommonFields(self):
        """Test NumericalAprioriResidualsComputationRequestCommonFields"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
