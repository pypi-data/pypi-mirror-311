# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 1.6.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from spacetower_orbit_determination_python_client.models.propulsion_system import PropulsionSystem
from spacetower_orbit_determination_python_client.models.radiation_coefficients import RadiationCoefficients
from spacetower_orbit_determination_python_client.models.space_object import SpaceObject
from spacetower_orbit_determination_python_client.models.space_object_type import SpaceObjectType
from typing import Optional, Set
from typing_extensions import Self

class IsotropicObject(SpaceObject):
    """
    Isotropic object (no specific shape, drag and radiation parameters are isotropic)
    """ # noqa: E501
    drag_cross_section: Optional[Union[Annotated[float, Field(strict=True, gt=0)], Annotated[int, Field(strict=True, gt=0)]]] = Field(default=None, description="Cross section area for drag computation. Units [m^2]", alias="dragCrossSection")
    radiation_cross_section: Optional[Union[Annotated[float, Field(strict=True, gt=0)], Annotated[int, Field(strict=True, gt=0)]]] = Field(default=None, description="Cross section area for radiation pressure computation. Units [m^2]", alias="radiationCrossSection")
    radiation_coefficients: Optional[RadiationCoefficients] = Field(default=None, alias="radiationCoefficients")
    __properties: ClassVar[List[str]] = ["mass", "dragCoefficient", "propulsionSystem", "clockOffset", "spaceObjectType", "dragCrossSection", "radiationCrossSection", "radiationCoefficients"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IsotropicObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of propulsion_system
        if self.propulsion_system:
            _dict['propulsionSystem'] = self.propulsion_system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of radiation_coefficients
        if self.radiation_coefficients:
            _dict['radiationCoefficients'] = self.radiation_coefficients.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IsotropicObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mass": obj.get("mass") if obj.get("mass") is not None else 1000,
            "dragCoefficient": obj.get("dragCoefficient") if obj.get("dragCoefficient") is not None else 2.2,
            "propulsionSystem": PropulsionSystem.from_dict(obj["propulsionSystem"]) if obj.get("propulsionSystem") is not None else None,
            "clockOffset": obj.get("clockOffset") if obj.get("clockOffset") is not None else 0,
            "spaceObjectType": obj.get("spaceObjectType"),
            "dragCrossSection": obj.get("dragCrossSection"),
            "radiationCrossSection": obj.get("radiationCrossSection"),
            "radiationCoefficients": RadiationCoefficients.from_dict(obj["radiationCoefficients"]) if obj.get("radiationCoefficients") is not None else None
        })
        return _obj


