Metadata-Version: 2.3
Name: scipion-pyworkflow-windows
Version: 0.0.9rc12
Summary: Simple workflow platform used in scientific applications, initially developed within the Scipion framework for image processing in Electron Microscopy. Fork of the project to support windows.
Project-URL: Homepage, https://github.com/scipion-em/scipion-pyworkflow
Project-URL: Bug Reports, https://github.com/scipion-em/scipion-pyworkflow/issues
Project-URL: Source, https://github.com/scipion-em/scipion-pyworkflow/
Author-email: "J.M. De la Rosa Trevin" <delarosatrevin@scilifelab.se>, Roberto Marabini <roberto@cnb.csic.es>, Grigory Sharov <gsharov@mrc-lmb.cam.ac.uk>, Josue Gomez Blanco <josue.gomez-blanco@mcgill.ca>, Pablo Conesa <pconesa@cnb.csic.es>, Yunior Fonseca Reyna <fonsecareyna@cnb.csic.es>
Keywords: cryo-em,electron-microscopy,image-processing,science,scipion,structural-biology,workflows
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.8
Requires-Dist: bibtexparser
Requires-Dist: configparser
Requires-Dist: distro
Requires-Dist: importlib-metadata
Requires-Dist: matplotlib
Requires-Dist: numpy
Requires-Dist: pillow
Requires-Dist: psutil
Requires-Dist: requests
Requires-Dist: tkcolorpicker
Description-Content-Type: text/x-rst

.. image:: https://img.shields.io/pypi/v/scipion-pyworkflow.svg
        :target: https://pypi.python.org/pypi/scipion-pyworkflow
        :alt: PyPI release

.. image:: https://sonarcloud.io/api/project_badges/measure?project=scipion-em_scipion-pyworkflow&metric=alert_status
        :alt: Quality Gate Status
        :target: https://sonarcloud.io/summary/new_code?id=scipion-em_scipion-pyworkflow

.. image:: https://img.shields.io/sonar/quality_gate/scipion-em_scipion-pyworkflow?server=https%3A%2F%2Fsonarcloud.io
        :target: https://sonarcloud.io/dashboard?id=scipion-em_scipion-pyworkflow
        :alt: SonarCloud quality gate

.. image:: https://img.shields.io/pypi/l/scipion-pyworkflow.svg
        :target: https://pypi.python.org/pypi/scipion-pyworkflow
        :alt: License

.. image:: https://img.shields.io/pypi/pyversions/scipion-pyworkflow.svg
        :target: https://pypi.python.org/pypi/scipion-pyworkflow
        :alt: Supported Python versions

.. image:: https://img.shields.io/pypi/dm/scipion-pyworkflow
        :target: https://pypi.python.org/pypi/scipion-pyworkflow
        :alt: Downloads

.. image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg
        :alt: Contributor Covenant
        :target: https://www.contributor-covenant.org/version/2/0/code_of_conduct/

pyworkflow
==========

**pyworkflow** is a simple workflow platform used in scientific applications. It has been initially developed
within the Scipion framework for image processing in Electron Microscopy.
 
**pyworkflow** allows you to define a working *Domain* by defining the following group of classes:

  * Objects: input/outputs that will be generated by different programs
  * Protocols: special type of Objects that have defined input parameters and will produce some output
  * Viewers: Entities that provide graphical analysis of results.
  * Wizards: Small GUIs that can be develop to help users to select given parameter values.

Development
-----------

To install **pyworkflow** for development purposes, one can do:

.. code-block:: bash

    # Create a clean virtual environment
    conda create -n scipion python=3.8
    conda activate
    git clone https://github.com/scipion-em/scipion-pyworkflow.git
    cd scipion-pyworkflow
    pip install -e .

Running tests
-------------

.. code-block:: bash

    conda activate scipion
    cd scipion-pyworkflow
    export SCIPION_DOMAIN="pyworkflowtests/tests/mock_domain"
    python -m unittest discover

    # Simple project GUI can be shown after running tests:
    python pyworkflow/apps/pw_project.py TestProtocolOutputs

All test projects are located in ~/ScipionUserData/Tests/

API documentation
-----------------

https://scipion-em.github.io/docs/release-3.0.0/api/pyworkflow/pyworkflow.html
