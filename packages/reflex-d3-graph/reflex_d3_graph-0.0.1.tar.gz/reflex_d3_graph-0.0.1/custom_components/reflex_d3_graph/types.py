from pydantic import BaseModel, Field
from typing import Optional, Dict, Literal, List, Any, Union

DataType = Dict[Literal["nodes", "links"], List[Dict[str, Any]]]
PositionType = Literal["left", "right", "top", "bottom", "center"]
SymbolType = Literal["circle", "cross", "diamond", "square", "star", "triangle", "wye"]
FloatIntType = Union[float, int]
LinkTypeType = Literal["STRAIGHT", "CURVE_SMOOTH", "CURVE_FULL"]
LinkStrokeLinecap = Literal["butt", "round", "square"]


class D3Model(BaseModel):
    alpha_target: Optional[FloatIntType]
    gravity: Optional[FloatIntType]
    link_length: Optional[FloatIntType]
    link_strength: Optional[FloatIntType]
    disable_link_force: Optional[bool]

class NodeModel(BaseModel):
    color: Optional[str]
    font_color: Optional[str]
    font_size: Optional[FloatIntType]
    font_weight: Optional[str]
    highlight_color: Optional[str]
    highlight_font_size: Optional[FloatIntType]
    highlight_font_weight: Optional[str]
    highlight_stroke_color: Optional[str]
    highlight_stroke_width: Optional[str]
    label_position: Optional[PositionType]
    label_property: Optional[str]
    mouse_cursor: Optional[str]
    opacity: Optional[FloatIntType]
    render_label: Optional[bool]
    size: Optional[Union[FloatIntType, Dict[str, FloatIntType]]]
    stroke_color: Optional[str]
    stroke_width: Optional[FloatIntType]
    svg: Optional[str]
    symbol_type: Optional[SymbolType]

class LinkModel(BaseModel):
    color: Optional[str]
    font_color: Optional[str]
    font_size: Optional[FloatIntType]
    font_weight: Optional[str]
    highlight_color: Optional[str]
    highlight_font_size: Optional[FloatIntType]
    highlight_font_weight: Optional[str]
    label_property: Optional[str]
    mouse_cursor: Optional[str]
    opacity: Optional[FloatIntType]
    render_label: Optional[bool]
    semantic_stroke_width: Optional[bool]
    stroke_width: Optional[FloatIntType]
    marker_height: Optional[FloatIntType]
    marker_width: Optional[FloatIntType]
    type: Optional[LinkTypeType]
    stroke_dasharray: Optional[FloatIntType]
    stroke_dashoffset: Optional[FloatIntType]
    stroke_linecap: Optional[LinkStrokeLinecap]

class GraphSettingsModel(BaseModel):
    automatic_rearrange_after_drop_node: Optional[bool]
    collapsible: Optional[bool]
    directed: Optional[bool]
    focus_animation_duration: Optional[FloatIntType]
    focus_zoom: Optional[FloatIntType]
    freeze_all_drag_events: Optional[bool]
    height: Optional[FloatIntType]
    highlight_degree: Optional[FloatIntType]
    highlight_opacity: Optional[FloatIntType]
    initial_zoom: Optional[FloatIntType]
    link_highlight_behavior: Optional[bool]
    max_zoom: Optional[FloatIntType]
    min_zoom: Optional[FloatIntType]
    node_highlight_behavior: Optional[bool]
    pan_and_zoom: Optional[bool]
    static_graph: Optional[bool]
    static_graph_with_drag_and_drop: Optional[bool]
    width: Optional[FloatIntType]
    d3: Optional[D3Model]
    node: Optional[NodeModel]
    link: Optional[LinkModel]
