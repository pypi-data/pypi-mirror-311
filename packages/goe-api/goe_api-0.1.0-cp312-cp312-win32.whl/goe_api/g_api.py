# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _g_api
else:
    import _g_api

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class G_Data_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    U8 = property(_g_api.G_Data_t_U8_get, _g_api.G_Data_t_U8_set)
    U16 = property(_g_api.G_Data_t_U16_get, _g_api.G_Data_t_U16_set)
    U32 = property(_g_api.G_Data_t_U32_get, _g_api.G_Data_t_U32_set)
    U64 = property(_g_api.G_Data_t_U64_get, _g_api.G_Data_t_U64_set)

    def __init__(self):
        _g_api.G_Data_t_swiginit(self, _g_api.new_G_Data_t())
    __swig_destroy__ = _g_api.delete_G_Data_t

# Register G_Data_t in _g_api:
_g_api.G_Data_t_swigregister(G_Data_t)

MAX_NUMBER_OF_CONTROL_DATA_BYTES = _g_api.MAX_NUMBER_OF_CONTROL_DATA_BYTES
G_FW__HEADER_TYPE__COMMAND = _g_api.G_FW__HEADER_TYPE__COMMAND
G_FW__HEADER_TYPE__RESPONSE = _g_api.G_FW__HEADER_TYPE__RESPONSE
G_FW__HEADER_TYPE__ACKNOWLEDGE = _g_api.G_FW__HEADER_TYPE__ACKNOWLEDGE
G_INTERFACE_TYPE__UNKNOWN = _g_api.G_INTERFACE_TYPE__UNKNOWN
G_INTERFACE_TYPE__BOOT_LOADER = _g_api.G_INTERFACE_TYPE__BOOT_LOADER
G_INTERFACE_TYPE__SEQUENCE = _g_api.G_INTERFACE_TYPE__SEQUENCE
G_INTERFACE_TYPE__IO = _g_api.G_INTERFACE_TYPE__IO
G_INTERFACE_TYPE__CAN = _g_api.G_INTERFACE_TYPE__CAN
G_INTERFACE_TYPE__LIN = _g_api.G_INTERFACE_TYPE__LIN
G_INTERFACE_TYPE__KLINE = _g_api.G_INTERFACE_TYPE__KLINE
G_INTERFACE_TYPE__MOST = _g_api.G_INTERFACE_TYPE__MOST
G_INTERFACE_TYPE__LVDS = _g_api.G_INTERFACE_TYPE__LVDS
G_INTERFACE_TYPE__FLEXRAY = _g_api.G_INTERFACE_TYPE__FLEXRAY
G_INTERFACE_TYPE__NET2RUN = _g_api.G_INTERFACE_TYPE__NET2RUN
G_INTERFACE_TYPE__USER_CODE = _g_api.G_INTERFACE_TYPE__USER_CODE
G_INTERFACE_TYPE__FS = _g_api.G_INTERFACE_TYPE__FS
G_INTERFACE_TYPE__RESISTORS = _g_api.G_INTERFACE_TYPE__RESISTORS
G_INTERFACE_TYPE__ETHERNET = _g_api.G_INTERFACE_TYPE__ETHERNET
G_INTERFACE_TYPE__COMMON = _g_api.G_INTERFACE_TYPE__COMMON
G_INTERFACE_TYPE__CAN_STM = _g_api.G_INTERFACE_TYPE__CAN_STM
class G_IpAddress_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Byte = property(_g_api.G_IpAddress_t_Byte_get)
    All = property(_g_api.G_IpAddress_t_All_get, _g_api.G_IpAddress_t_All_set)

    def __init__(self):
        _g_api.G_IpAddress_t_swiginit(self, _g_api.new_G_IpAddress_t())
    __swig_destroy__ = _g_api.delete_G_IpAddress_t

# Register G_IpAddress_t in _g_api:
_g_api.G_IpAddress_t_swigregister(G_IpAddress_t)

class G_IpAddress_t_Byte(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    B1 = property(_g_api.G_IpAddress_t_Byte_B1_get, _g_api.G_IpAddress_t_Byte_B1_set)
    B2 = property(_g_api.G_IpAddress_t_Byte_B2_get, _g_api.G_IpAddress_t_Byte_B2_set)
    B3 = property(_g_api.G_IpAddress_t_Byte_B3_get, _g_api.G_IpAddress_t_Byte_B3_set)
    B4 = property(_g_api.G_IpAddress_t_Byte_B4_get, _g_api.G_IpAddress_t_Byte_B4_set)

    def __init__(self):
        _g_api.G_IpAddress_t_Byte_swiginit(self, _g_api.new_G_IpAddress_t_Byte())
    __swig_destroy__ = _g_api.delete_G_IpAddress_t_Byte

# Register G_IpAddress_t_Byte in _g_api:
_g_api.G_IpAddress_t_Byte_swigregister(G_IpAddress_t_Byte)


def G_GetParamSize(portHandle, paramSize):
    return _g_api.G_GetParamSize(portHandle, paramSize)

def G_GetLockStatus(portHandle):
    return _g_api.G_GetLockStatus(portHandle)

def G_GetLock(portHandle):
    return _g_api.G_GetLock(portHandle)

def G_ReleaseLock(portHandle):
    return _g_api.G_ReleaseLock(portHandle)

def G_ReleaseAllLocks(cmdFlags):
    return _g_api.G_ReleaseAllLocks(cmdFlags)

def G_SetResponseTimeout(portHandle, responseTimeout):
    return _g_api.G_SetResponseTimeout(portHandle, responseTimeout)

def G_GetResponseTimeout(portHandle):
    return _g_api.G_GetResponseTimeout(portHandle)

def G_IsMonitorEnabled(portHandle):
    return _g_api.G_IsMonitorEnabled(portHandle)

def G_GetMonitorItems(portHandle, response, bufferOverrun):
    return _g_api.G_GetMonitorItems(portHandle, response, bufferOverrun)

def G_CloseMonitor(portHandle):
    return _g_api.G_CloseMonitor(portHandle)

def G_AsyncCommunication_AddCallback(portHandle, command, type, controlData, controlDataLength, callbackFunction, cleanUpFunction, callbackMemorySize, callbackContext):
    return _g_api.G_AsyncCommunication_AddCallback(portHandle, command, type, controlData, controlDataLength, callbackFunction, cleanUpFunction, callbackMemorySize, callbackContext)

def G_AsyncCommunication_RemoveCallback(portHandle, command, type, controlData, controlDataLength):
    return _g_api.G_AsyncCommunication_RemoveCallback(portHandle, command, type, controlData, controlDataLength)

def G_Fpga_ReadVhdlDesignVersion(portHandle, vhdlDesignVersion):
    return _g_api.G_Fpga_ReadVhdlDesignVersion(portHandle, vhdlDesignVersion)

def G_Fpga_ReadRegister(portHandle, registerNumber, value):
    return _g_api.G_Fpga_ReadRegister(portHandle, registerNumber, value)

def G_Fpga_WriteRegister(portHandle, registerNumber, value):
    return _g_api.G_Fpga_WriteRegister(portHandle, registerNumber, value)

def G_Fpga_Reconfiguration(portHandle, filepath):
    return _g_api.G_Fpga_Reconfiguration(portHandle, filepath)

def G_Fpga_ReadFifo(portHandle, data, length):
    return _g_api.G_Fpga_ReadFifo(portHandle, data, length)

def G_Fpga_Relays_Set(portHandle, cmdFlags, numberOfRelays, relays):
    return _g_api.G_Fpga_Relays_Set(portHandle, cmdFlags, numberOfRelays, relays)

def G_Fpga_Relays_Reset(portHandle, cmdFlags, numberOfRelays, relays):
    return _g_api.G_Fpga_Relays_Reset(portHandle, cmdFlags, numberOfRelays, relays)

def G_Fpga_Relays_SetDirect(portHandle, numberOfRelayBytes, relayBytes):
    return _g_api.G_Fpga_Relays_SetDirect(portHandle, numberOfRelayBytes, relayBytes)

def G_Fpga_Relays_GetState(portHandle, numberOfRelays, relays, states):
    return _g_api.G_Fpga_Relays_GetState(portHandle, numberOfRelays, relays, states)

def G_Apix_Command(portHandle, cmdFlags, commandCode, cmdLength, cmdData):
    return _g_api.G_Apix_Command(portHandle, cmdFlags, commandCode, cmdLength, cmdData)

def G_Apix_CommandWithResponse(portHandle, cmdFlags, commandCode, cmdLength, cmdData, rspLength, rspData):
    return _g_api.G_Apix_CommandWithResponse(portHandle, cmdFlags, commandCode, cmdLength, cmdData, rspLength, rspData)

def G_Apix_Write(portHandle, length, data):
    return _g_api.G_Apix_Write(portHandle, length, data)

def G_Apix_Read(portHandle, cmdFlags, rspLength, rspData):
    return _g_api.G_Apix_Read(portHandle, cmdFlags, rspLength, rspData)

def G_Fpga_WriteFifo(portHandle, data, length):
    return _g_api.G_Fpga_WriteFifo(portHandle, data, length)

def G_Fw_Buffer_Enable(portHandle, bufferSize):
    return _g_api.G_Fw_Buffer_Enable(portHandle, bufferSize)

def G_Fw_Buffer_Disable(portHandle):
    return _g_api.G_Fw_Buffer_Disable(portHandle)
G_FW__WRITE__MODE__NEVER_SEND_ACK = _g_api.G_FW__WRITE__MODE__NEVER_SEND_ACK
G_FW__WRITE__MODE__ALWAYS_SEND_ACK = _g_api.G_FW__WRITE__MODE__ALWAYS_SEND_ACK
G_FW__WRITE__MODE__ACK_ONLY_ON_ERRORS = _g_api.G_FW__WRITE__MODE__ACK_ONLY_ON_ERRORS

def G_Fw_Write(portHandle, mode, commandCode, length, data):
    return _g_api.G_Fw_Write(portHandle, mode, commandCode, length, data)
G_FW__READ__RESPONSE_TYPE__UNKNOWN = _g_api.G_FW__READ__RESPONSE_TYPE__UNKNOWN
G_FW__READ__RESPONSE_TYPE__RESPONSE = _g_api.G_FW__READ__RESPONSE_TYPE__RESPONSE
G_FW__READ__RESPONSE_TYPE__ACK = _g_api.G_FW__READ__RESPONSE_TYPE__ACK

def G_Fw_Read(portHandle, commandCode, bufferOverrun, type, length, data):
    return _g_api.G_Fw_Read(portHandle, commandCode, bufferOverrun, type, length, data)
G_HOST_INTERFACE_TYPE__PCI3051 = _g_api.G_HOST_INTERFACE_TYPE__PCI3051
G_HOST_INTERFACE_TYPE__PXI3051 = _g_api.G_HOST_INTERFACE_TYPE__PXI3051
G_HOST_INTERFACE_TYPE__PCI3052 = _g_api.G_HOST_INTERFACE_TYPE__PCI3052
G_HOST_INTERFACE_TYPE__PXI3052 = _g_api.G_HOST_INTERFACE_TYPE__PXI3052
G_HOST_INTERFACE_TYPE__PCI3060 = _g_api.G_HOST_INTERFACE_TYPE__PCI3060
G_HOST_INTERFACE_TYPE__PXI3060 = _g_api.G_HOST_INTERFACE_TYPE__PXI3060
G_HOST_INTERFACE_TYPE__PCI3072 = _g_api.G_HOST_INTERFACE_TYPE__PCI3072
G_HOST_INTERFACE_TYPE__PXI3072 = _g_api.G_HOST_INTERFACE_TYPE__PXI3072
G_HOST_INTERFACE_TYPE__PCI3080 = _g_api.G_HOST_INTERFACE_TYPE__PCI3080
G_HOST_INTERFACE_TYPE__PXI3080 = _g_api.G_HOST_INTERFACE_TYPE__PXI3080
G_HOST_INTERFACE_TYPE__USB_BASICCAN = _g_api.G_HOST_INTERFACE_TYPE__USB_BASICCAN
G_HOST_INTERFACE_TYPE__USB3052 = _g_api.G_HOST_INTERFACE_TYPE__USB3052
G_HOST_INTERFACE_TYPE__USB3060 = _g_api.G_HOST_INTERFACE_TYPE__USB3060
G_HOST_INTERFACE_TYPE__USB_BASICLIN = _g_api.G_HOST_INTERFACE_TYPE__USB_BASICLIN
G_HOST_INTERFACE_TYPE__USB3072 = _g_api.G_HOST_INTERFACE_TYPE__USB3072
G_HOST_INTERFACE_TYPE__USB_BASICCAR = _g_api.G_HOST_INTERFACE_TYPE__USB_BASICCAR
G_HOST_INTERFACE_TYPE__USB3080 = _g_api.G_HOST_INTERFACE_TYPE__USB3080
G_HOST_INTERFACE_TYPE__SMART_CAR_USB = _g_api.G_HOST_INTERFACE_TYPE__SMART_CAR_USB
G_HOST_INTERFACE_TYPE__ETHERNET = _g_api.G_HOST_INTERFACE_TYPE__ETHERNET
G_HOST_INTERFACE_TYPE__USB4120 = _g_api.G_HOST_INTERFACE_TYPE__USB4120
G_HOST_INTERFACE_TYPE__PCI3090 = _g_api.G_HOST_INTERFACE_TYPE__PCI3090
G_HOST_INTERFACE_TYPE__PXI3090 = _g_api.G_HOST_INTERFACE_TYPE__PXI3090
G_HOST_INTERFACE_TYPE__PXI6153 = _g_api.G_HOST_INTERFACE_TYPE__PXI6153
G_HOST_INTERFACE_TYPE__USB6153 = _g_api.G_HOST_INTERFACE_TYPE__USB6153
G_HOST_INTERFACE_TYPE__PXI6173 = _g_api.G_HOST_INTERFACE_TYPE__PXI6173
G_HOST_INTERFACE_TYPE__USB6173 = _g_api.G_HOST_INTERFACE_TYPE__USB6173
G_HOST_INTERFACE_TYPE__PXI6191 = _g_api.G_HOST_INTERFACE_TYPE__PXI6191
G_HOST_INTERFACE_TYPE__USB6191 = _g_api.G_HOST_INTERFACE_TYPE__USB6191
G_HOST_INTERFACE_TYPE__BASICCAR3085 = _g_api.G_HOST_INTERFACE_TYPE__BASICCAR3085
G_HOST_INTERFACE_TYPE__PXI6181 = _g_api.G_HOST_INTERFACE_TYPE__PXI6181
G_HOST_INTERFACE_TYPE__USB6181 = _g_api.G_HOST_INTERFACE_TYPE__USB6181
G_HOST_INTERFACE_TYPE__BASIC_CAN_61_PLUS = _g_api.G_HOST_INTERFACE_TYPE__BASIC_CAN_61_PLUS
G_HOST_INTERFACE_TYPE__MAGIC_CAR_3 = _g_api.G_HOST_INTERFACE_TYPE__MAGIC_CAR_3
G_HOST_INTERFACE_TYPE__USB4009 = _g_api.G_HOST_INTERFACE_TYPE__USB4009
G_HOST_INTERFACE_TYPE__PXI6100 = _g_api.G_HOST_INTERFACE_TYPE__PXI6100
G_HOST_INTERFACE_TYPE__PXI3078 = _g_api.G_HOST_INTERFACE_TYPE__PXI3078
G_HOST_INTERFACE_TYPE__USB3132 = _g_api.G_HOST_INTERFACE_TYPE__USB3132
G_HOST_INTERFACE_TYPE__USB3116 = _g_api.G_HOST_INTERFACE_TYPE__USB3116
G_HOST_INTERFACE_TYPE__PXI6161 = _g_api.G_HOST_INTERFACE_TYPE__PXI6161
G_HOST_INTERFACE_TYPE__USB4115 = _g_api.G_HOST_INTERFACE_TYPE__USB4115
G_HOST_INTERFACE_TYPE__USB6161 = _g_api.G_HOST_INTERFACE_TYPE__USB6161
G_HOST_INTERFACE_TYPE__BASIC_MOST_6161 = _g_api.G_HOST_INTERFACE_TYPE__BASIC_MOST_6161
G_HOST_INTERFACE_TYPE__USB4112 = _g_api.G_HOST_INTERFACE_TYPE__USB4112
G_HOST_INTERFACE_TYPE__USB4113 = _g_api.G_HOST_INTERFACE_TYPE__USB4113
G_HOST_INTERFACE_TYPE__BASIC_CAN_6153 = _g_api.G_HOST_INTERFACE_TYPE__BASIC_CAN_6153
G_HOST_INTERFACE_TYPE__BASIC_LIN_6173 = _g_api.G_HOST_INTERFACE_TYPE__BASIC_LIN_6173
G_HOST_INTERFACE_TYPE__BASIC_CAR_6181 = _g_api.G_HOST_INTERFACE_TYPE__BASIC_CAR_6181
G_HOST_INTERFACE_TYPE__BASIC_FLEX_6191 = _g_api.G_HOST_INTERFACE_TYPE__BASIC_FLEX_6191
G_HOST_INTERFACE_TYPE__PCI6153 = _g_api.G_HOST_INTERFACE_TYPE__PCI6153
G_HOST_INTERFACE_TYPE__PCI6173 = _g_api.G_HOST_INTERFACE_TYPE__PCI6173
G_HOST_INTERFACE_TYPE__PCI6181 = _g_api.G_HOST_INTERFACE_TYPE__PCI6181
G_HOST_INTERFACE_TYPE__PCI6191 = _g_api.G_HOST_INTERFACE_TYPE__PCI6191
G_HOST_INTERFACE_TYPE__HUB4X = _g_api.G_HOST_INTERFACE_TYPE__HUB4X
G_HOST_INTERFACE_TYPE__APIX2_ADK__TX = _g_api.G_HOST_INTERFACE_TYPE__APIX2_ADK__TX
G_HOST_INTERFACE_TYPE__APIX2_ADK__RX = _g_api.G_HOST_INTERFACE_TYPE__APIX2_ADK__RX
G_HOST_INTERFACE_TYPE__BASIC_CON_4121 = _g_api.G_HOST_INTERFACE_TYPE__BASIC_CON_4121
G_HOST_INTERFACE_TYPE__PXI4112 = _g_api.G_HOST_INTERFACE_TYPE__PXI4112
G_HOST_INTERFACE_TYPE__PXI4113 = _g_api.G_HOST_INTERFACE_TYPE__PXI4113
G_HOST_INTERFACE_TYPE__ETH3030 = _g_api.G_HOST_INTERFACE_TYPE__ETH3030
G_HOST_INTERFACE_TYPE__ETH3116 = _g_api.G_HOST_INTERFACE_TYPE__ETH3116
G_HOST_INTERFACE_TYPE__ETH3118 = _g_api.G_HOST_INTERFACE_TYPE__ETH3118
G_HOST_INTERFACE_TYPE__ETH3132 = _g_api.G_HOST_INTERFACE_TYPE__ETH3132
G_HOST_INTERFACE_TYPE__ETH3164 = _g_api.G_HOST_INTERFACE_TYPE__ETH3164
G_HOST_INTERFACE_TYPE__ETH31128 = _g_api.G_HOST_INTERFACE_TYPE__ETH31128
G_HOST_INTERFACE_TYPE__PXI3116 = _g_api.G_HOST_INTERFACE_TYPE__PXI3116
G_HOST_INTERFACE_TYPE__PXI3118 = _g_api.G_HOST_INTERFACE_TYPE__PXI3118
G_HOST_INTERFACE_TYPE__PXI3132 = _g_api.G_HOST_INTERFACE_TYPE__PXI3132
G_HOST_INTERFACE_TYPE__PXI3164 = _g_api.G_HOST_INTERFACE_TYPE__PXI3164
G_HOST_INTERFACE_TYPE__PXI31128 = _g_api.G_HOST_INTERFACE_TYPE__PXI31128
G_HOST_INTERFACE_TYPE__USB3118 = _g_api.G_HOST_INTERFACE_TYPE__USB3118
G_HOST_INTERFACE_TYPE__USB31128 = _g_api.G_HOST_INTERFACE_TYPE__USB31128
G_HOST_INTERFACE_TYPE__USB3164 = _g_api.G_HOST_INTERFACE_TYPE__USB3164
G_HOST_INTERFACE_TYPE__PXI6141 = _g_api.G_HOST_INTERFACE_TYPE__PXI6141
G_HOST_INTERFACE_TYPE__PXI4009 = _g_api.G_HOST_INTERFACE_TYPE__PXI4009
G_HOST_INTERFACE_TYPE__GCAR6282 = _g_api.G_HOST_INTERFACE_TYPE__GCAR6282
G_HOST_INTERFACE_TYPE__ETH4045 = _g_api.G_HOST_INTERFACE_TYPE__ETH4045
G_HOST_INTERFACE_TYPE__ETH4009 = _g_api.G_HOST_INTERFACE_TYPE__ETH4009
G_HOST_INTERFACE_TYPE__ETH3100 = _g_api.G_HOST_INTERFACE_TYPE__ETH3100
G_HOST_INTERFACE_TYPE__GPCIE6222 = _g_api.G_HOST_INTERFACE_TYPE__GPCIE6222
G_HOST_INTERFACE_TYPE__GPCIE6281 = _g_api.G_HOST_INTERFACE_TYPE__GPCIE6281
G_HOST_INTERFACE_TYPE__GCAR6222 = _g_api.G_HOST_INTERFACE_TYPE__GCAR6222
G_HOST_INTERFACE_TYPE__GPXIE6222 = _g_api.G_HOST_INTERFACE_TYPE__GPXIE6222
G_HOST_INTERFACE_TYPE__GPXIE6281 = _g_api.G_HOST_INTERFACE_TYPE__GPXIE6281
G_HOST_INTERFACE_TYPE__GCAR6281 = _g_api.G_HOST_INTERFACE_TYPE__GCAR6281
G_HOST_INTERFACE_TYPE__GCAR6223 = _g_api.G_HOST_INTERFACE_TYPE__GCAR6223
G_HOST_INTERFACE_TYPE__GPCIE6241 = _g_api.G_HOST_INTERFACE_TYPE__GPCIE6241
G_HOST_INTERFACE_TYPE__GPXIE6241 = _g_api.G_HOST_INTERFACE_TYPE__GPXIE6241
G_HOST_INTERFACE_TYPE__GPCIE6242 = _g_api.G_HOST_INTERFACE_TYPE__GPCIE6242
G_HOST_INTERFACE_TYPE__GPXIE6242 = _g_api.G_HOST_INTERFACE_TYPE__GPXIE6242
G_HOST_INTERFACE_TYPE__ETH4008 = _g_api.G_HOST_INTERFACE_TYPE__ETH4008
G_HOST_INTERFACE_TYPE__ETH3218 = _g_api.G_HOST_INTERFACE_TYPE__ETH3218
G_HOST_INTERFACE_TYPE__UNKNOWN = _g_api.G_HOST_INTERFACE_TYPE__UNKNOWN
class G_InterfaceInfo_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type = property(_g_api.G_InterfaceInfo_t_Type_get, _g_api.G_InterfaceInfo_t_Type_set)
    Parameters = property(_g_api.G_InterfaceInfo_t_Parameters_get)

    def __init__(self):
        _g_api.G_InterfaceInfo_t_swiginit(self, _g_api.new_G_InterfaceInfo_t())
    __swig_destroy__ = _g_api.delete_G_InterfaceInfo_t

# Register G_InterfaceInfo_t in _g_api:
_g_api.G_InterfaceInfo_t_swigregister(G_InterfaceInfo_t)

class G_InterfaceInfo_t_Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ControllerNumber = property(_g_api.G_InterfaceInfo_t_Parameters_ControllerNumber_get, _g_api.G_InterfaceInfo_t_Parameters_ControllerNumber_set)
    InterfaceNumber = property(_g_api.G_InterfaceInfo_t_Parameters_InterfaceNumber_get, _g_api.G_InterfaceInfo_t_Parameters_InterfaceNumber_set)
    Flags = property(_g_api.G_InterfaceInfo_t_Parameters_Flags_get, _g_api.G_InterfaceInfo_t_Parameters_Flags_set)
    u = property(_g_api.G_InterfaceInfo_t_Parameters_u_get)

    def __init__(self):
        _g_api.G_InterfaceInfo_t_Parameters_swiginit(self, _g_api.new_G_InterfaceInfo_t_Parameters())
    __swig_destroy__ = _g_api.delete_G_InterfaceInfo_t_Parameters

# Register G_InterfaceInfo_t_Parameters in _g_api:
_g_api.G_InterfaceInfo_t_Parameters_swigregister(G_InterfaceInfo_t_Parameters)

class G_InterfaceInfo_t_Parameters_u(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CardNumber = property(_g_api.G_InterfaceInfo_t_Parameters_u_CardNumber_get, _g_api.G_InterfaceInfo_t_Parameters_u_CardNumber_set)
    Ethernet = property(_g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_get)
    UsbOverEthernet = property(_g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_get)
    Serial = property(_g_api.G_InterfaceInfo_t_Parameters_u_Serial_get)

    def __init__(self):
        _g_api.G_InterfaceInfo_t_Parameters_u_swiginit(self, _g_api.new_G_InterfaceInfo_t_Parameters_u())
    __swig_destroy__ = _g_api.delete_G_InterfaceInfo_t_Parameters_u

# Register G_InterfaceInfo_t_Parameters_u in _g_api:
_g_api.G_InterfaceInfo_t_Parameters_u_swigregister(G_InterfaceInfo_t_Parameters_u)

class G_InterfaceInfo_t_Parameters_u_Serial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PortNumber = property(_g_api.G_InterfaceInfo_t_Parameters_u_Serial_PortNumber_get, _g_api.G_InterfaceInfo_t_Parameters_u_Serial_PortNumber_set)

    def __init__(self):
        _g_api.G_InterfaceInfo_t_Parameters_u_Serial_swiginit(self, _g_api.new_G_InterfaceInfo_t_Parameters_u_Serial())
    __swig_destroy__ = _g_api.delete_G_InterfaceInfo_t_Parameters_u_Serial

# Register G_InterfaceInfo_t_Parameters_u_Serial in _g_api:
_g_api.G_InterfaceInfo_t_Parameters_u_Serial_swigregister(G_InterfaceInfo_t_Parameters_u_Serial)

class G_InterfaceInfo_t_Parameters_u_UsbOverEthernet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CardNumber = property(_g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_CardNumber_get, _g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_CardNumber_set)
    PortNumber = property(_g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_PortNumber_get, _g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_PortNumber_set)
    reserved1 = property(_g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_reserved1_get, _g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_reserved1_set)
    reserved2 = property(_g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_reserved2_get, _g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_reserved2_set)
    IpAddress = property(_g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_IpAddress_get, _g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_IpAddress_set)

    def __init__(self):
        _g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_swiginit(self, _g_api.new_G_InterfaceInfo_t_Parameters_u_UsbOverEthernet())
    __swig_destroy__ = _g_api.delete_G_InterfaceInfo_t_Parameters_u_UsbOverEthernet

# Register G_InterfaceInfo_t_Parameters_u_UsbOverEthernet in _g_api:
_g_api.G_InterfaceInfo_t_Parameters_u_UsbOverEthernet_swigregister(G_InterfaceInfo_t_Parameters_u_UsbOverEthernet)

class G_InterfaceInfo_t_Parameters_u_Ethernet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PortNumber = property(_g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_PortNumber_get, _g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_PortNumber_set)
    reserved1 = property(_g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_reserved1_get, _g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_reserved1_set)
    reserved2 = property(_g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_reserved2_get, _g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_reserved2_set)
    IpAddress = property(_g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_IpAddress_get, _g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_IpAddress_set)

    def __init__(self):
        _g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_swiginit(self, _g_api.new_G_InterfaceInfo_t_Parameters_u_Ethernet())
    __swig_destroy__ = _g_api.delete_G_InterfaceInfo_t_Parameters_u_Ethernet

# Register G_InterfaceInfo_t_Parameters_u_Ethernet in _g_api:
_g_api.G_InterfaceInfo_t_Parameters_u_Ethernet_swigregister(G_InterfaceInfo_t_Parameters_u_Ethernet)


def G_OpenInterface(interfaceInfo):
    return _g_api.G_OpenInterface(interfaceInfo)

def G_OpenInterface2(cmdFlags, interfaceInfo):
    return _g_api.G_OpenInterface2(cmdFlags, interfaceInfo)

def G_CloseInterface(portHandle):
    return _g_api.G_CloseInterface(portHandle)

def G_RefreshDriverInfo():
    return _g_api.G_RefreshDriverInfo()

def G_Command(portHandle, commandCode, parameters):
    return _g_api.G_Command(portHandle, commandCode, parameters)

def G_CommandWithResponse(portHandle, commandCode, parameters, response):
    return _g_api.G_CommandWithResponse(portHandle, commandCode, parameters, response)
G_COMMAND_WITH_RESPONSE_MODE__SYNC = _g_api.G_COMMAND_WITH_RESPONSE_MODE__SYNC
G_COMMAND_WITH_RESPONSE_MODE__ASYNC = _g_api.G_COMMAND_WITH_RESPONSE_MODE__ASYNC

def G_CommandWithResponseEx(portHandle, mode, commandCode, controlDataLength, parameters, response):
    return _g_api.G_CommandWithResponseEx(portHandle, mode, commandCode, controlDataLength, parameters, response)

def G_CheckPortHandle(portHandle):
    return _g_api.G_CheckPortHandle(portHandle)

def G_GetErrorDescription(errorCode):
    return _g_api.G_GetErrorDescription(errorCode)

def G_GetErrorDescription2(portHandle, errorCode, length, errorDescription):
    return _g_api.G_GetErrorDescription2(portHandle, errorCode, length, errorDescription)

def G_GetLastErrorCode():
    return _g_api.G_GetLastErrorCode()

def G_GetLastErrorDescription():
    return _g_api.G_GetLastErrorDescription()

def G_GetLastErrorByPortHandle(portHandle, errorCode, length, errorDescription):
    return _g_api.G_GetLastErrorByPortHandle(portHandle, errorCode, length, errorDescription)

def G_AsyncCommunication_Enable(portHandle, errorCallback):
    return _g_api.G_AsyncCommunication_Enable(portHandle, errorCallback)

def G_AsyncCommunication_Disable(portHandle):
    return _g_api.G_AsyncCommunication_Disable(portHandle)

def G_AsyncCommunication_FunctionsWithoutResponse_Sync(portHandle):
    return _g_api.G_AsyncCommunication_FunctionsWithoutResponse_Sync(portHandle)

def G_AsyncCommunication_FunctionsWithoutResponse_Async(portHandle):
    return _g_api.G_AsyncCommunication_FunctionsWithoutResponse_Async(portHandle)

def G_AsyncCommunication_FunctionsWithoutResponse_IsSync(portHandle):
    return _g_api.G_AsyncCommunication_FunctionsWithoutResponse_IsSync(portHandle)
class G_Ethernet_AdapterInfo_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IpAddress = property(_g_api.G_Ethernet_AdapterInfo_t_IpAddress_get, _g_api.G_Ethernet_AdapterInfo_t_IpAddress_set)
    Mask = property(_g_api.G_Ethernet_AdapterInfo_t_Mask_get, _g_api.G_Ethernet_AdapterInfo_t_Mask_set)

    def __init__(self):
        _g_api.G_Ethernet_AdapterInfo_t_swiginit(self, _g_api.new_G_Ethernet_AdapterInfo_t())
    __swig_destroy__ = _g_api.delete_G_Ethernet_AdapterInfo_t

# Register G_Ethernet_AdapterInfo_t in _g_api:
_g_api.G_Ethernet_AdapterInfo_t_swigregister(G_Ethernet_AdapterInfo_t)


def G_Ethernet_GetNetworkAdapterInfo(numberOfAdapterInfos, adapterInfo):
    return _g_api.G_Ethernet_GetNetworkAdapterInfo(numberOfAdapterInfos, adapterInfo)

def G_Interface_GetSerialNumber(portHandle, serialNumber):
    return _g_api.G_Interface_GetSerialNumber(portHandle, serialNumber)
G_HOST_COMMUNICATION_TYPE__UNKNOWN = _g_api.G_HOST_COMMUNICATION_TYPE__UNKNOWN
G_HOST_COMMUNICATION_TYPE__PXI = _g_api.G_HOST_COMMUNICATION_TYPE__PXI
G_HOST_COMMUNICATION_TYPE__PCI = _g_api.G_HOST_COMMUNICATION_TYPE__PCI
G_HOST_COMMUNICATION_TYPE__USB = _g_api.G_HOST_COMMUNICATION_TYPE__USB
G_HOST_COMMUNICATION_TYPE__ETHERNET = _g_api.G_HOST_COMMUNICATION_TYPE__ETHERNET
G_HOST_COMMUNICATION_TYPE__USB_OVER_ETHERNET = _g_api.G_HOST_COMMUNICATION_TYPE__USB_OVER_ETHERNET
G_HOST_COMMUNICATION_TYPE__SERIAL = _g_api.G_HOST_COMMUNICATION_TYPE__SERIAL
G_HOST_COMMUNICATION_TYPE__PCIE = _g_api.G_HOST_COMMUNICATION_TYPE__PCIE
G_HOST_COMMUNICATION_TYPE__PXIE = _g_api.G_HOST_COMMUNICATION_TYPE__PXIE
class G_InterfaceData_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    InterfaceType = property(_g_api.G_InterfaceData_t_InterfaceType_get, _g_api.G_InterfaceData_t_InterfaceType_set)
    ControllerNumber = property(_g_api.G_InterfaceData_t_ControllerNumber_get, _g_api.G_InterfaceData_t_ControllerNumber_set)
    InterfaceNumber = property(_g_api.G_InterfaceData_t_InterfaceNumber_get, _g_api.G_InterfaceData_t_InterfaceNumber_set)
    HostCommunicationType = property(_g_api.G_InterfaceData_t_HostCommunicationType_get, _g_api.G_InterfaceData_t_HostCommunicationType_set)
    HostInterfaceType = property(_g_api.G_InterfaceData_t_HostInterfaceType_get, _g_api.G_InterfaceData_t_HostInterfaceType_set)
    Serial = property(_g_api.G_InterfaceData_t_Serial_get, _g_api.G_InterfaceData_t_Serial_set)
    DeviceIndex = property(_g_api.G_InterfaceData_t_DeviceIndex_get, _g_api.G_InterfaceData_t_DeviceIndex_set)
    IpAddress = property(_g_api.G_InterfaceData_t_IpAddress_get, _g_api.G_InterfaceData_t_IpAddress_set)
    TcpPort = property(_g_api.G_InterfaceData_t_TcpPort_get, _g_api.G_InterfaceData_t_TcpPort_set)
    PortNumber = property(_g_api.G_InterfaceData_t_PortNumber_get, _g_api.G_InterfaceData_t_PortNumber_set)
    GeographicAddress = property(_g_api.G_InterfaceData_t_GeographicAddress_get, _g_api.G_InterfaceData_t_GeographicAddress_set)
    SubNetMask = property(_g_api.G_InterfaceData_t_SubNetMask_get, _g_api.G_InterfaceData_t_SubNetMask_set)
    HostSerial = property(_g_api.G_InterfaceData_t_HostSerial_get, _g_api.G_InterfaceData_t_HostSerial_set)
    DefaultGateway = property(_g_api.G_InterfaceData_t_DefaultGateway_get, _g_api.G_InterfaceData_t_DefaultGateway_set)
    UsbVersion = property(_g_api.G_InterfaceData_t_UsbVersion_get)
    reserved = property(_g_api.G_InterfaceData_t_reserved_get, _g_api.G_InterfaceData_t_reserved_set)

    def __init__(self):
        _g_api.G_InterfaceData_t_swiginit(self, _g_api.new_G_InterfaceData_t())
    __swig_destroy__ = _g_api.delete_G_InterfaceData_t

# Register G_InterfaceData_t in _g_api:
_g_api.G_InterfaceData_t_swigregister(G_InterfaceData_t)

class G_InterfaceData_t_UsbVersion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Major = property(_g_api.G_InterfaceData_t_UsbVersion_Major_get, _g_api.G_InterfaceData_t_UsbVersion_Major_set)
    Minor = property(_g_api.G_InterfaceData_t_UsbVersion_Minor_get, _g_api.G_InterfaceData_t_UsbVersion_Minor_set)

    def __init__(self):
        _g_api.G_InterfaceData_t_UsbVersion_swiginit(self, _g_api.new_G_InterfaceData_t_UsbVersion())
    __swig_destroy__ = _g_api.delete_G_InterfaceData_t_UsbVersion

# Register G_InterfaceData_t_UsbVersion in _g_api:
_g_api.G_InterfaceData_t_UsbVersion_swigregister(G_InterfaceData_t_UsbVersion)


def G_Interface_GetInterfaceList(cmdFlags, numberOfInterfaces):
    return _g_api.G_Interface_GetInterfaceList(cmdFlags, numberOfInterfaces)

def G_Interface_GetInterfaceList_PciPxi(numberOfInterfaces):
    return _g_api.G_Interface_GetInterfaceList_PciPxi(numberOfInterfaces)

def G_Interface_GetInterfaceList_Usb(numberOfInterfaces):
    return _g_api.G_Interface_GetInterfaceList_Usb(numberOfInterfaces)

def G_Interface_GetInterfaceList_Usb62xx(numberOfInterfaces):
    return _g_api.G_Interface_GetInterfaceList_Usb62xx(numberOfInterfaces)

def G_Interface_GetInterfaceList_Ethernet(cmdFlags, numberOfInterfaces, adapterInfo):
    return _g_api.G_Interface_GetInterfaceList_Ethernet(cmdFlags, numberOfInterfaces, adapterInfo)

def G_Interface_GetInterfaceList_Serial(numberOfPorts, ports, numberOfInterfaces):
    return _g_api.G_Interface_GetInterfaceList_Serial(numberOfPorts, ports, numberOfInterfaces)

def G_Interface_Name_Get(interfaceData):
    return _g_api.G_Interface_Name_Get(interfaceData)

def G_Interface_Name_Set(interfaceData, name):
    return _g_api.G_Interface_Name_Set(interfaceData, name)

def G_Interface_GetPortHandleByInterfaceType(portHandle, interfaceType, newPortHandle):
    return _g_api.G_Interface_GetPortHandleByInterfaceType(portHandle, interfaceType, newPortHandle)

def G_Interface_GetPortHandleByInterfaceTypeAndInstance(portHandle, interfaceType, instance, newPortHandle):
    return _g_api.G_Interface_GetPortHandleByInterfaceTypeAndInstance(portHandle, interfaceType, instance, newPortHandle)
class G_Interface_UpdateAllInterfaces_Cmd_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Flags = property(_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_Flags_get, _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_Flags_set)
    reserved1 = property(_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved1_get, _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved1_set)
    reserved2 = property(_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved2_get, _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved2_set)
    reserved3 = property(_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved3_get, _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved3_set)
    reserved4 = property(_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved4_get, _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_reserved4_set)
    NumberOfInterfaces = property(_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_NumberOfInterfaces_get, _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_NumberOfInterfaces_set)
    InterfaceData = property(_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_InterfaceData_get, _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_InterfaceData_set)

    def __init__(self):
        _g_api.G_Interface_UpdateAllInterfaces_Cmd_t_swiginit(self, _g_api.new_G_Interface_UpdateAllInterfaces_Cmd_t())
    __swig_destroy__ = _g_api.delete_G_Interface_UpdateAllInterfaces_Cmd_t

# Register G_Interface_UpdateAllInterfaces_Cmd_t in _g_api:
_g_api.G_Interface_UpdateAllInterfaces_Cmd_t_swigregister(G_Interface_UpdateAllInterfaces_Cmd_t)


def G_Interface_UpdateAllInterfaces(filename, cmd):
    return _g_api.G_Interface_UpdateAllInterfaces(filename, cmd)

def G_InterfaceConfig_GetInstallDir(path, pathSize):
    return _g_api.G_InterfaceConfig_GetInstallDir(path, pathSize)

def G_InterfaceConfig_GetConfigFilePath(path, length):
    return _g_api.G_InterfaceConfig_GetConfigFilePath(path, length)

def G_InterfaceConfig_GetInterfaceInfoByName(name, interfaceInfo):
    return _g_api.G_InterfaceConfig_GetInterfaceInfoByName(name, interfaceInfo)

def G_InterfaceConfig_ConfigurationName_Get(bufferSize, name):
    return _g_api.G_InterfaceConfig_ConfigurationName_Get(bufferSize, name)

def G_GetApiVersion():
    return _g_api.G_GetApiVersion()

def G_GetFirmwarePackageVersion_Installed():
    return _g_api.G_GetFirmwarePackageVersion_Installed()

def G_GetFirmwarePackageVersion_Tested():
    return _g_api.G_GetFirmwarePackageVersion_Tested()

def G_UpdateToDedicatedFirmware(portHandle):
    return _g_api.G_UpdateToDedicatedFirmware(portHandle)

def G_SetFullSpeedPollingCycle(pollingCycle):
    return _g_api.G_SetFullSpeedPollingCycle(pollingCycle)

def G_Monitor_InstanceId_Set(portHandle, instanceId):
    return _g_api.G_Monitor_InstanceId_Set(portHandle, instanceId)

def G_Monitor_InstanceId_Get(portHandle):
    return _g_api.G_Monitor_InstanceId_Get(portHandle)

def G_FeatureControl_LockCode_Get(portHandle, bufferLength, lockCode):
    return _g_api.G_FeatureControl_LockCode_Get(portHandle, bufferLength, lockCode)

def G_FeatureControl_LockCode_Set(portHandle, bufferLength, lockCode):
    return _g_api.G_FeatureControl_LockCode_Set(portHandle, bufferLength, lockCode)

def G_GetHostInterfaceType(portHandle):
    return _g_api.G_GetHostInterfaceType(portHandle)

def G_GetHostInterfaceTypeDescription(hostInterfaceType):
    return _g_api.G_GetHostInterfaceTypeDescription(hostInterfaceType)

def G_GetHostCommunicationType(portHandle):
    return _g_api.G_GetHostCommunicationType(portHandle)

def G_GetHostCommTypeDescription(hostCommType):
    return _g_api.G_GetHostCommTypeDescription(hostCommType)

def G_GetInterfaceType(portHandle):
    return _g_api.G_GetInterfaceType(portHandle)

def G_GetInterfaceTypeDescription(interfaceType):
    return _g_api.G_GetInterfaceTypeDescription(interfaceType)

def G_PcieDma_IsAvailable(portHandle):
    return _g_api.G_PcieDma_IsAvailable(portHandle)

def G_Lvds_IsGrabber(portHandle):
    return _g_api.G_Lvds_IsGrabber(portHandle)

def G_Lvds_IsGenerator(portHandle):
    return _g_api.G_Lvds_IsGenerator(portHandle)
class int_p(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _g_api.int_p_swiginit(self, _g_api.new_int_p())
    __swig_destroy__ = _g_api.delete_int_p

    def assign(self, value):
        return _g_api.int_p_assign(self, value)

    def value(self):
        return _g_api.int_p_value(self)

    def cast(self):
        return _g_api.int_p_cast(self)

    @staticmethod
    def frompointer(t):
        return _g_api.int_p_frompointer(t)

# Register int_p in _g_api:
_g_api.int_p_swigregister(int_p)

def int_p_frompointer(t):
    return _g_api.int_p_frompointer(t)

class char_p(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _g_api.char_p_swiginit(self, _g_api.new_char_p())
    __swig_destroy__ = _g_api.delete_char_p

    def assign(self, value):
        return _g_api.char_p_assign(self, value)

    def value(self):
        return _g_api.char_p_value(self)

    def cast(self):
        return _g_api.char_p_cast(self)

    @staticmethod
    def frompointer(t):
        return _g_api.char_p_frompointer(t)

# Register char_p in _g_api:
_g_api.char_p_swigregister(char_p)

def char_p_frompointer(t):
    return _g_api.char_p_frompointer(t)



