# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _g_api_diag
else:
    import _g_api_diag

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


G_DIAG__FLAG_ID__DISABLE_21_HANDLING = _g_api_diag.G_DIAG__FLAG_ID__DISABLE_21_HANDLING
G_DIAG__FLAG_ID__DISABLE_23_HANDLING = _g_api_diag.G_DIAG__FLAG_ID__DISABLE_23_HANDLING
G_DIAG__FLAG_ID__DISABLE_78_HANDLING = _g_api_diag.G_DIAG__FLAG_ID__DISABLE_78_HANDLING
G_DIAG__FLAG_ID__ASYNC_RESPONSE_AS_SYNC = _g_api_diag.G_DIAG__FLAG_ID__ASYNC_RESPONSE_AS_SYNC
G_DIAG__FLAG_ID__AUTOMATIC_EMPTY__SYNC = _g_api_diag.G_DIAG__FLAG_ID__AUTOMATIC_EMPTY__SYNC
G_DIAG__FLAG_ID__AUTOMATIC_EMPTY__ASYNC = _g_api_diag.G_DIAG__FLAG_ID__AUTOMATIC_EMPTY__ASYNC
G_DIAG__FLAG_ID__AUTOMATIC_EMPTY__UUDT = _g_api_diag.G_DIAG__FLAG_ID__AUTOMATIC_EMPTY__UUDT
G_DIAG__FLAG_ID__UNKNOWN = _g_api_diag.G_DIAG__FLAG_ID__UNKNOWN
G_DIAG__PROPERTY_ID__REQUEST_DELAY__21__MS = _g_api_diag.G_DIAG__PROPERTY_ID__REQUEST_DELAY__21__MS
G_DIAG__PROPERTY_ID__REQUEST_DELAY__23__MS = _g_api_diag.G_DIAG__PROPERTY_ID__REQUEST_DELAY__23__MS
G_DIAG__PROPERTY_ID__REQUEST_DELAY__PHYSICAL__MS = _g_api_diag.G_DIAG__PROPERTY_ID__REQUEST_DELAY__PHYSICAL__MS
G_DIAG__PROPERTY_ID__REQUEST_DELAY__FUNCTIONAL__MS = _g_api_diag.G_DIAG__PROPERTY_ID__REQUEST_DELAY__FUNCTIONAL__MS
G_DIAG__PROPERTY_ID__TX_BUFFER_SIZE = _g_api_diag.G_DIAG__PROPERTY_ID__TX_BUFFER_SIZE
G_DIAG__PROPERTY_ID__RX_BUFFER_SIZE__SYNC = _g_api_diag.G_DIAG__PROPERTY_ID__RX_BUFFER_SIZE__SYNC
G_DIAG__PROPERTY_ID__RX_BUFFER_SIZE__ASYNC = _g_api_diag.G_DIAG__PROPERTY_ID__RX_BUFFER_SIZE__ASYNC
G_DIAG__PROPERTY_ID__RX_TIMEOUT_OPT_RESPONSE__MS = _g_api_diag.G_DIAG__PROPERTY_ID__RX_TIMEOUT_OPT_RESPONSE__MS
G_DIAG__PROPERTY_ID__UNKNOWN = _g_api_diag.G_DIAG__PROPERTY_ID__UNKNOWN

def G_Diag_Start(portHandle, channel, mode, timeout, requestData, responseData):
    return _g_api_diag.G_Diag_Start(portHandle, channel, mode, timeout, requestData, responseData)

def G_Diag_InitiateStart(portHandle, channel, mode, requestData):
    return _g_api_diag.G_Diag_InitiateStart(portHandle, channel, mode, requestData)

def G_Diag_Stop(portHandle, channel, mode, timeout, requestData, responseData):
    return _g_api_diag.G_Diag_Stop(portHandle, channel, mode, timeout, requestData, responseData)

def G_Diag_InitiateStop(portHandle, channel, mode, requestData):
    return _g_api_diag.G_Diag_InitiateStop(portHandle, channel, mode, requestData)

def G_Diag_GetState(portHandle, channel, cmdFlags, state, rspFlags):
    return _g_api_diag.G_Diag_GetState(portHandle, channel, cmdFlags, state, rspFlags)

def G_Diag_GetState_Async_AddCallback(portHandle, channel, callback):
    return _g_api_diag.G_Diag_GetState_Async_AddCallback(portHandle, channel, callback)

def G_Diag_GetState_Async_RemoveCallback(portHandle, channel):
    return _g_api_diag.G_Diag_GetState_Async_RemoveCallback(portHandle, channel)

def G_Diag_GetState_Async(portHandle, channel, cmdFlags):
    return _g_api_diag.G_Diag_GetState_Async(portHandle, channel, cmdFlags)

def G_Diag_Request(portHandle, channel, mode, timeout, requestData, responseData):
    return _g_api_diag.G_Diag_Request(portHandle, channel, mode, timeout, requestData, responseData)

def G_Diag_QueueRequest(portHandle, channel, mode, requestData):
    return _g_api_diag.G_Diag_QueueRequest(portHandle, channel, mode, requestData)

def G_Diag_GetResponse(portHandle, channel, timeout, state, responseData):
    return _g_api_diag.G_Diag_GetResponse(portHandle, channel, timeout, state, responseData)

def G_Diag_GetAsyncResponse(portHandle, channel, timeout, state, responseData):
    return _g_api_diag.G_Diag_GetAsyncResponse(portHandle, channel, timeout, state, responseData)

def G_Diag_GetResponse_Async_AddCallback(portHandle, channel, callback):
    return _g_api_diag.G_Diag_GetResponse_Async_AddCallback(portHandle, channel, callback)

def G_Diag_GetResponse_Async_RemoveCallback(portHandle, channel):
    return _g_api_diag.G_Diag_GetResponse_Async_RemoveCallback(portHandle, channel)

def G_Diag_GetResponse_Async_Enable(portHandle, channel):
    return _g_api_diag.G_Diag_GetResponse_Async_Enable(portHandle, channel)

def G_Diag_GetResponse_Async_Disable(portHandle, channel):
    return _g_api_diag.G_Diag_GetResponse_Async_Disable(portHandle, channel)
class G_Diag_Flag_SetById_Cmd_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_g_api_diag.G_Diag_Flag_SetById_Cmd_t_Id_get, _g_api_diag.G_Diag_Flag_SetById_Cmd_t_Id_set)
    Value = property(_g_api_diag.G_Diag_Flag_SetById_Cmd_t_Value_get, _g_api_diag.G_Diag_Flag_SetById_Cmd_t_Value_set)
    reserved = property(_g_api_diag.G_Diag_Flag_SetById_Cmd_t_reserved_get, _g_api_diag.G_Diag_Flag_SetById_Cmd_t_reserved_set)

    def __init__(self):
        _g_api_diag.G_Diag_Flag_SetById_Cmd_t_swiginit(self, _g_api_diag.new_G_Diag_Flag_SetById_Cmd_t())
    __swig_destroy__ = _g_api_diag.delete_G_Diag_Flag_SetById_Cmd_t

# Register G_Diag_Flag_SetById_Cmd_t in _g_api_diag:
_g_api_diag.G_Diag_Flag_SetById_Cmd_t_swigregister(G_Diag_Flag_SetById_Cmd_t)


def G_Diag_Flag_SetById(portHandle, channel, cmd):
    return _g_api_diag.G_Diag_Flag_SetById(portHandle, channel, cmd)
class G_Diag_Flag_GetById_Cmd_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_g_api_diag.G_Diag_Flag_GetById_Cmd_t_Id_get, _g_api_diag.G_Diag_Flag_GetById_Cmd_t_Id_set)
    reserved1 = property(_g_api_diag.G_Diag_Flag_GetById_Cmd_t_reserved1_get, _g_api_diag.G_Diag_Flag_GetById_Cmd_t_reserved1_set)
    reserved2 = property(_g_api_diag.G_Diag_Flag_GetById_Cmd_t_reserved2_get, _g_api_diag.G_Diag_Flag_GetById_Cmd_t_reserved2_set)

    def __init__(self):
        _g_api_diag.G_Diag_Flag_GetById_Cmd_t_swiginit(self, _g_api_diag.new_G_Diag_Flag_GetById_Cmd_t())
    __swig_destroy__ = _g_api_diag.delete_G_Diag_Flag_GetById_Cmd_t

# Register G_Diag_Flag_GetById_Cmd_t in _g_api_diag:
_g_api_diag.G_Diag_Flag_GetById_Cmd_t_swigregister(G_Diag_Flag_GetById_Cmd_t)

class G_Diag_Flag_GetById_Rsp_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_g_api_diag.G_Diag_Flag_GetById_Rsp_t_Id_get, _g_api_diag.G_Diag_Flag_GetById_Rsp_t_Id_set)
    Value = property(_g_api_diag.G_Diag_Flag_GetById_Rsp_t_Value_get, _g_api_diag.G_Diag_Flag_GetById_Rsp_t_Value_set)
    reserved = property(_g_api_diag.G_Diag_Flag_GetById_Rsp_t_reserved_get, _g_api_diag.G_Diag_Flag_GetById_Rsp_t_reserved_set)

    def __init__(self):
        _g_api_diag.G_Diag_Flag_GetById_Rsp_t_swiginit(self, _g_api_diag.new_G_Diag_Flag_GetById_Rsp_t())
    __swig_destroy__ = _g_api_diag.delete_G_Diag_Flag_GetById_Rsp_t

# Register G_Diag_Flag_GetById_Rsp_t in _g_api_diag:
_g_api_diag.G_Diag_Flag_GetById_Rsp_t_swigregister(G_Diag_Flag_GetById_Rsp_t)


def G_Diag_Flag_GetById(portHandle, channel, cmd):
    return _g_api_diag.G_Diag_Flag_GetById(portHandle, channel, cmd)

def G_Diag_GetLastError(portHandle, channel):
    return _g_api_diag.G_Diag_GetLastError(portHandle, channel)
class G_Diag_Property_SetById_Cmd_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_g_api_diag.G_Diag_Property_SetById_Cmd_t_Id_get, _g_api_diag.G_Diag_Property_SetById_Cmd_t_Id_set)
    reserved1 = property(_g_api_diag.G_Diag_Property_SetById_Cmd_t_reserved1_get, _g_api_diag.G_Diag_Property_SetById_Cmd_t_reserved1_set)
    reserved2 = property(_g_api_diag.G_Diag_Property_SetById_Cmd_t_reserved2_get, _g_api_diag.G_Diag_Property_SetById_Cmd_t_reserved2_set)
    Value = property(_g_api_diag.G_Diag_Property_SetById_Cmd_t_Value_get, _g_api_diag.G_Diag_Property_SetById_Cmd_t_Value_set)

    def __init__(self):
        _g_api_diag.G_Diag_Property_SetById_Cmd_t_swiginit(self, _g_api_diag.new_G_Diag_Property_SetById_Cmd_t())
    __swig_destroy__ = _g_api_diag.delete_G_Diag_Property_SetById_Cmd_t

# Register G_Diag_Property_SetById_Cmd_t in _g_api_diag:
_g_api_diag.G_Diag_Property_SetById_Cmd_t_swigregister(G_Diag_Property_SetById_Cmd_t)


def G_Diag_Property_SetById(portHandle, channel, cmd):
    return _g_api_diag.G_Diag_Property_SetById(portHandle, channel, cmd)
class G_Diag_Property_GetById_Cmd_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_g_api_diag.G_Diag_Property_GetById_Cmd_t_Id_get, _g_api_diag.G_Diag_Property_GetById_Cmd_t_Id_set)
    reserved1 = property(_g_api_diag.G_Diag_Property_GetById_Cmd_t_reserved1_get, _g_api_diag.G_Diag_Property_GetById_Cmd_t_reserved1_set)
    reserved2 = property(_g_api_diag.G_Diag_Property_GetById_Cmd_t_reserved2_get, _g_api_diag.G_Diag_Property_GetById_Cmd_t_reserved2_set)

    def __init__(self):
        _g_api_diag.G_Diag_Property_GetById_Cmd_t_swiginit(self, _g_api_diag.new_G_Diag_Property_GetById_Cmd_t())
    __swig_destroy__ = _g_api_diag.delete_G_Diag_Property_GetById_Cmd_t

# Register G_Diag_Property_GetById_Cmd_t in _g_api_diag:
_g_api_diag.G_Diag_Property_GetById_Cmd_t_swigregister(G_Diag_Property_GetById_Cmd_t)

class G_Diag_Property_GetById_Rsp_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Id = property(_g_api_diag.G_Diag_Property_GetById_Rsp_t_Id_get, _g_api_diag.G_Diag_Property_GetById_Rsp_t_Id_set)
    reserved1 = property(_g_api_diag.G_Diag_Property_GetById_Rsp_t_reserved1_get, _g_api_diag.G_Diag_Property_GetById_Rsp_t_reserved1_set)
    reserved2 = property(_g_api_diag.G_Diag_Property_GetById_Rsp_t_reserved2_get, _g_api_diag.G_Diag_Property_GetById_Rsp_t_reserved2_set)
    Value = property(_g_api_diag.G_Diag_Property_GetById_Rsp_t_Value_get, _g_api_diag.G_Diag_Property_GetById_Rsp_t_Value_set)

    def __init__(self):
        _g_api_diag.G_Diag_Property_GetById_Rsp_t_swiginit(self, _g_api_diag.new_G_Diag_Property_GetById_Rsp_t())
    __swig_destroy__ = _g_api_diag.delete_G_Diag_Property_GetById_Rsp_t

# Register G_Diag_Property_GetById_Rsp_t in _g_api_diag:
_g_api_diag.G_Diag_Property_GetById_Rsp_t_swigregister(G_Diag_Property_GetById_Rsp_t)


def G_Diag_Property_GetById(portHandle, channel, cmd):
    return _g_api_diag.G_Diag_Property_GetById(portHandle, channel, cmd)

def G_Diag_Session_Reset(portHandle, channel):
    return _g_api_diag.G_Diag_Session_Reset(portHandle, channel)

def G_Diag_Reset(portHandle, channel):
    return _g_api_diag.G_Diag_Reset(portHandle, channel)


