Metadata-Version: 2.1
Name: lsh-fast
Version: 0.1.0
Summary: A fast and scalable Locality Sensitive Hashing implementation
Home-page: https://github.com/mehta-a/lsh-fast
Author: Ankita Mehta
Author-email: contactankita28@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: xxhash>=2.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Requires-Dist: flake8>=3.9; extra == "dev"

# LSH-Fast

A fast and scalable implementation of Locality Sensitive Hashing in Python.

## Installation

```bash
pip install lsh-fast
```

## Usage

```python
from lsh import HashParams, LSHHashFunctions
import numpy as np

# Initialize hash functions
params = HashParams(num_projections=100, projection_dim=1000)
hash_functions = LSHHashFunctions(params)

# Compute hash values for a vector
vector = np.random.randn(1000)
hash_values = hash_functions.compute_hash_values(vector)

# Compute bucket hashes
bucket_hashes = hash_functions.compute_bucket_hash(hash_values, band_size=10)
```

## Features

- Fast and memory-efficient implementation
- Optimized for large-scale data
- Easy to use API
- Configurable parameters

## License

MIT License
