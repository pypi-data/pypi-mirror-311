# coding: utf-8

"""
    ai/h2o/mlops/deployer/v1/artifact_composition.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from _h2o_mlops_client.deployer.configuration import Configuration


class V2MonitoringRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'columns': 'list[V2Column]',
        'baseline_aggregations': 'list[V2BaselineAggregation]',
        'baseline_source': 'V2BaselineSource',
        'timestamp_column': 'str',
        'model_id': 'str',
        'deployment_id': 'str',
        'experiment_id': 'str',
        'model_version_id': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'creator': 'str',
        'creator_display_name': 'str',
        'delete_time': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'description': 'description',
        'columns': 'columns',
        'baseline_aggregations': 'baselineAggregations',
        'baseline_source': 'baselineSource',
        'timestamp_column': 'timestampColumn',
        'model_id': 'modelId',
        'deployment_id': 'deploymentId',
        'experiment_id': 'experimentId',
        'model_version_id': 'modelVersionId',
        'create_time': 'createTime',
        'update_time': 'updateTime',
        'creator': 'creator',
        'creator_display_name': 'creatorDisplayName',
        'delete_time': 'deleteTime'
    }

    def __init__(self, name=None, display_name=None, description=None, columns=None, baseline_aggregations=None, baseline_source=None, timestamp_column=None, model_id=None, deployment_id=None, experiment_id=None, model_version_id=None, create_time=None, update_time=None, creator=None, creator_display_name=None, delete_time=None, local_vars_configuration=None):  # noqa: E501
        """V2MonitoringRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._display_name = None
        self._description = None
        self._columns = None
        self._baseline_aggregations = None
        self._baseline_source = None
        self._timestamp_column = None
        self._model_id = None
        self._deployment_id = None
        self._experiment_id = None
        self._model_version_id = None
        self._create_time = None
        self._update_time = None
        self._creator = None
        self._creator_display_name = None
        self._delete_time = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        self.columns = columns
        if baseline_aggregations is not None:
            self.baseline_aggregations = baseline_aggregations
        if baseline_source is not None:
            self.baseline_source = baseline_source
        if timestamp_column is not None:
            self.timestamp_column = timestamp_column
        if model_id is not None:
            self.model_id = model_id
        if deployment_id is not None:
            self.deployment_id = deployment_id
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if model_version_id is not None:
            self.model_version_id = model_version_id
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if creator is not None:
            self.creator = creator
        if creator_display_name is not None:
            self.creator_display_name = creator_display_name
        if delete_time is not None:
            self.delete_time = delete_time

    @property
    def name(self):
        """Gets the name of this V2MonitoringRecord.  # noqa: E501

        Resource name.  # noqa: E501

        :return: The name of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2MonitoringRecord.

        Resource name.  # noqa: E501

        :param name: The name of this V2MonitoringRecord.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this V2MonitoringRecord.  # noqa: E501

        Human-readable name.  # noqa: E501

        :return: The display_name of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this V2MonitoringRecord.

        Human-readable name.  # noqa: E501

        :param display_name: The display_name of this V2MonitoringRecord.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this V2MonitoringRecord.  # noqa: E501

        Monitoring record description.  # noqa: E501

        :return: The description of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V2MonitoringRecord.

        Monitoring record description.  # noqa: E501

        :param description: The description of this V2MonitoringRecord.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def columns(self):
        """Gets the columns of this V2MonitoringRecord.  # noqa: E501

        List of Columns on which aggregations will be performed.  # noqa: E501

        :return: The columns of this V2MonitoringRecord.  # noqa: E501
        :rtype: list[V2Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this V2MonitoringRecord.

        List of Columns on which aggregations will be performed.  # noqa: E501

        :param columns: The columns of this V2MonitoringRecord.  # noqa: E501
        :type columns: list[V2Column]
        """
        if self.local_vars_configuration.client_side_validation and columns is None:  # noqa: E501
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def baseline_aggregations(self):
        """Gets the baseline_aggregations of this V2MonitoringRecord.  # noqa: E501

        Baseline aggregation data.  # noqa: E501

        :return: The baseline_aggregations of this V2MonitoringRecord.  # noqa: E501
        :rtype: list[V2BaselineAggregation]
        """
        return self._baseline_aggregations

    @baseline_aggregations.setter
    def baseline_aggregations(self, baseline_aggregations):
        """Sets the baseline_aggregations of this V2MonitoringRecord.

        Baseline aggregation data.  # noqa: E501

        :param baseline_aggregations: The baseline_aggregations of this V2MonitoringRecord.  # noqa: E501
        :type baseline_aggregations: list[V2BaselineAggregation]
        """

        self._baseline_aggregations = baseline_aggregations

    @property
    def baseline_source(self):
        """Gets the baseline_source of this V2MonitoringRecord.  # noqa: E501


        :return: The baseline_source of this V2MonitoringRecord.  # noqa: E501
        :rtype: V2BaselineSource
        """
        return self._baseline_source

    @baseline_source.setter
    def baseline_source(self, baseline_source):
        """Sets the baseline_source of this V2MonitoringRecord.


        :param baseline_source: The baseline_source of this V2MonitoringRecord.  # noqa: E501
        :type baseline_source: V2BaselineSource
        """

        self._baseline_source = baseline_source

    @property
    def timestamp_column(self):
        """Gets the timestamp_column of this V2MonitoringRecord.  # noqa: E501


        :return: The timestamp_column of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._timestamp_column

    @timestamp_column.setter
    def timestamp_column(self, timestamp_column):
        """Sets the timestamp_column of this V2MonitoringRecord.


        :param timestamp_column: The timestamp_column of this V2MonitoringRecord.  # noqa: E501
        :type timestamp_column: str
        """

        self._timestamp_column = timestamp_column

    @property
    def model_id(self):
        """Gets the model_id of this V2MonitoringRecord.  # noqa: E501

        The ID to use for the model.  # noqa: E501

        :return: The model_id of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this V2MonitoringRecord.

        The ID to use for the model.  # noqa: E501

        :param model_id: The model_id of this V2MonitoringRecord.  # noqa: E501
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def deployment_id(self):
        """Gets the deployment_id of this V2MonitoringRecord.  # noqa: E501

        The ID to use for the deployment.  # noqa: E501

        :return: The deployment_id of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this V2MonitoringRecord.

        The ID to use for the deployment.  # noqa: E501

        :param deployment_id: The deployment_id of this V2MonitoringRecord.  # noqa: E501
        :type deployment_id: str
        """

        self._deployment_id = deployment_id

    @property
    def experiment_id(self):
        """Gets the experiment_id of this V2MonitoringRecord.  # noqa: E501

        The ID to use for the experiment.  # noqa: E501

        :return: The experiment_id of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this V2MonitoringRecord.

        The ID to use for the experiment.  # noqa: E501

        :param experiment_id: The experiment_id of this V2MonitoringRecord.  # noqa: E501
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def model_version_id(self):
        """Gets the model_version_id of this V2MonitoringRecord.  # noqa: E501

        The Version of the model.  # noqa: E501

        :return: The model_version_id of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._model_version_id

    @model_version_id.setter
    def model_version_id(self, model_version_id):
        """Sets the model_version_id of this V2MonitoringRecord.

        The Version of the model.  # noqa: E501

        :param model_version_id: The model_version_id of this V2MonitoringRecord.  # noqa: E501
        :type model_version_id: str
        """

        self._model_version_id = model_version_id

    @property
    def create_time(self):
        """Gets the create_time of this V2MonitoringRecord.  # noqa: E501

        Output only. Time when the monitoring record was created.  # noqa: E501

        :return: The create_time of this V2MonitoringRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this V2MonitoringRecord.

        Output only. Time when the monitoring record was created.  # noqa: E501

        :param create_time: The create_time of this V2MonitoringRecord.  # noqa: E501
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this V2MonitoringRecord.  # noqa: E501

        Output only. Last updated timestamp of the MonitoringRecord.  # noqa: E501

        :return: The update_time of this V2MonitoringRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this V2MonitoringRecord.

        Output only. Last updated timestamp of the MonitoringRecord.  # noqa: E501

        :param update_time: The update_time of this V2MonitoringRecord.  # noqa: E501
        :type update_time: datetime
        """

        self._update_time = update_time

    @property
    def creator(self):
        """Gets the creator of this V2MonitoringRecord.  # noqa: E501

        Output only. Name of an entity that created the Monitoring record.  # noqa: E501

        :return: The creator of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this V2MonitoringRecord.

        Output only. Name of an entity that created the Monitoring record.  # noqa: E501

        :param creator: The creator of this V2MonitoringRecord.  # noqa: E501
        :type creator: str
        """

        self._creator = creator

    @property
    def creator_display_name(self):
        """Gets the creator_display_name of this V2MonitoringRecord.  # noqa: E501

        Output only. Human-readable name of creator.  # noqa: E501

        :return: The creator_display_name of this V2MonitoringRecord.  # noqa: E501
        :rtype: str
        """
        return self._creator_display_name

    @creator_display_name.setter
    def creator_display_name(self, creator_display_name):
        """Sets the creator_display_name of this V2MonitoringRecord.

        Output only. Human-readable name of creator.  # noqa: E501

        :param creator_display_name: The creator_display_name of this V2MonitoringRecord.  # noqa: E501
        :type creator_display_name: str
        """

        self._creator_display_name = creator_display_name

    @property
    def delete_time(self):
        """Gets the delete_time of this V2MonitoringRecord.  # noqa: E501

        Output only. When record was deleted.  # noqa: E501

        :return: The delete_time of this V2MonitoringRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this V2MonitoringRecord.

        Output only. When record was deleted.  # noqa: E501

        :param delete_time: The delete_time of this V2MonitoringRecord.  # noqa: E501
        :type delete_time: datetime
        """

        self._delete_time = delete_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2MonitoringRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V2MonitoringRecord):
            return True

        return self.to_dict() != other.to_dict()
