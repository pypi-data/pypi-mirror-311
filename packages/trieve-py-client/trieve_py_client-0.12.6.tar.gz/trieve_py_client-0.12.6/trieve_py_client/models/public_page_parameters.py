# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.12.0
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trieve_py_client.models.public_page_search_options import PublicPageSearchOptions
from trieve_py_client.models.public_page_theme import PublicPageTheme
from typing import Optional, Set
from typing_extensions import Self

class PublicPageParameters(BaseModel):
    """
    PublicPageParameters
    """ # noqa: E501
    allow_switching_modes: Optional[StrictBool] = Field(default=None, alias="allowSwitchingModes")
    analytics: Optional[StrictBool] = None
    api_key: Optional[StrictStr] = Field(default=None, alias="apiKey")
    base_url: Optional[StrictStr] = Field(default=None, alias="baseUrl")
    brand_color: Optional[StrictStr] = Field(default=None, alias="brandColor")
    brand_logo_img_src_url: Optional[StrictStr] = Field(default=None, alias="brandLogoImgSrcUrl")
    brand_name: Optional[StrictStr] = Field(default=None, alias="brandName")
    chat: Optional[StrictBool] = None
    currency_position: Optional[StrictStr] = Field(default=None, alias="currencyPosition")
    dataset_id: Optional[StrictStr] = Field(default=None, alias="datasetId")
    debounce_ms: Optional[StrictInt] = Field(default=None, alias="debounceMs")
    default_ai_questions: Optional[List[StrictStr]] = Field(default=None, alias="defaultAiQuestions")
    default_currency: Optional[StrictStr] = Field(default=None, alias="defaultCurrency")
    default_search_mode: Optional[StrictStr] = Field(default=None, alias="defaultSearchMode")
    default_search_queries: Optional[List[StrictStr]] = Field(default=None, alias="defaultSearchQueries")
    placeholder: Optional[StrictStr] = None
    problem_link: Optional[StrictStr] = Field(default=None, alias="problemLink")
    responsive: Optional[StrictBool] = None
    search_options: Optional[PublicPageSearchOptions] = Field(default=None, alias="searchOptions")
    suggested_queries: Optional[StrictBool] = Field(default=None, alias="suggestedQueries")
    theme: Optional[PublicPageTheme] = None
    type: Optional[StrictStr] = None
    use_group_search: Optional[StrictBool] = Field(default=None, alias="useGroupSearch")
    __properties: ClassVar[List[str]] = ["allowSwitchingModes", "analytics", "apiKey", "baseUrl", "brandColor", "brandLogoImgSrcUrl", "brandName", "chat", "currencyPosition", "datasetId", "debounceMs", "defaultAiQuestions", "defaultCurrency", "defaultSearchMode", "defaultSearchQueries", "placeholder", "problemLink", "responsive", "searchOptions", "suggestedQueries", "theme", "type", "useGroupSearch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicPageParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of search_options
        if self.search_options:
            _dict['searchOptions'] = self.search_options.to_dict()
        # set to None if allow_switching_modes (nullable) is None
        # and model_fields_set contains the field
        if self.allow_switching_modes is None and "allow_switching_modes" in self.model_fields_set:
            _dict['allowSwitchingModes'] = None

        # set to None if analytics (nullable) is None
        # and model_fields_set contains the field
        if self.analytics is None and "analytics" in self.model_fields_set:
            _dict['analytics'] = None

        # set to None if api_key (nullable) is None
        # and model_fields_set contains the field
        if self.api_key is None and "api_key" in self.model_fields_set:
            _dict['apiKey'] = None

        # set to None if base_url (nullable) is None
        # and model_fields_set contains the field
        if self.base_url is None and "base_url" in self.model_fields_set:
            _dict['baseUrl'] = None

        # set to None if brand_color (nullable) is None
        # and model_fields_set contains the field
        if self.brand_color is None and "brand_color" in self.model_fields_set:
            _dict['brandColor'] = None

        # set to None if brand_logo_img_src_url (nullable) is None
        # and model_fields_set contains the field
        if self.brand_logo_img_src_url is None and "brand_logo_img_src_url" in self.model_fields_set:
            _dict['brandLogoImgSrcUrl'] = None

        # set to None if brand_name (nullable) is None
        # and model_fields_set contains the field
        if self.brand_name is None and "brand_name" in self.model_fields_set:
            _dict['brandName'] = None

        # set to None if chat (nullable) is None
        # and model_fields_set contains the field
        if self.chat is None and "chat" in self.model_fields_set:
            _dict['chat'] = None

        # set to None if currency_position (nullable) is None
        # and model_fields_set contains the field
        if self.currency_position is None and "currency_position" in self.model_fields_set:
            _dict['currencyPosition'] = None

        # set to None if dataset_id (nullable) is None
        # and model_fields_set contains the field
        if self.dataset_id is None and "dataset_id" in self.model_fields_set:
            _dict['datasetId'] = None

        # set to None if debounce_ms (nullable) is None
        # and model_fields_set contains the field
        if self.debounce_ms is None and "debounce_ms" in self.model_fields_set:
            _dict['debounceMs'] = None

        # set to None if default_ai_questions (nullable) is None
        # and model_fields_set contains the field
        if self.default_ai_questions is None and "default_ai_questions" in self.model_fields_set:
            _dict['defaultAiQuestions'] = None

        # set to None if default_currency (nullable) is None
        # and model_fields_set contains the field
        if self.default_currency is None and "default_currency" in self.model_fields_set:
            _dict['defaultCurrency'] = None

        # set to None if default_search_mode (nullable) is None
        # and model_fields_set contains the field
        if self.default_search_mode is None and "default_search_mode" in self.model_fields_set:
            _dict['defaultSearchMode'] = None

        # set to None if default_search_queries (nullable) is None
        # and model_fields_set contains the field
        if self.default_search_queries is None and "default_search_queries" in self.model_fields_set:
            _dict['defaultSearchQueries'] = None

        # set to None if placeholder (nullable) is None
        # and model_fields_set contains the field
        if self.placeholder is None and "placeholder" in self.model_fields_set:
            _dict['placeholder'] = None

        # set to None if problem_link (nullable) is None
        # and model_fields_set contains the field
        if self.problem_link is None and "problem_link" in self.model_fields_set:
            _dict['problemLink'] = None

        # set to None if responsive (nullable) is None
        # and model_fields_set contains the field
        if self.responsive is None and "responsive" in self.model_fields_set:
            _dict['responsive'] = None

        # set to None if search_options (nullable) is None
        # and model_fields_set contains the field
        if self.search_options is None and "search_options" in self.model_fields_set:
            _dict['searchOptions'] = None

        # set to None if suggested_queries (nullable) is None
        # and model_fields_set contains the field
        if self.suggested_queries is None and "suggested_queries" in self.model_fields_set:
            _dict['suggestedQueries'] = None

        # set to None if theme (nullable) is None
        # and model_fields_set contains the field
        if self.theme is None and "theme" in self.model_fields_set:
            _dict['theme'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if use_group_search (nullable) is None
        # and model_fields_set contains the field
        if self.use_group_search is None and "use_group_search" in self.model_fields_set:
            _dict['useGroupSearch'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicPageParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowSwitchingModes": obj.get("allowSwitchingModes"),
            "analytics": obj.get("analytics"),
            "apiKey": obj.get("apiKey"),
            "baseUrl": obj.get("baseUrl"),
            "brandColor": obj.get("brandColor"),
            "brandLogoImgSrcUrl": obj.get("brandLogoImgSrcUrl"),
            "brandName": obj.get("brandName"),
            "chat": obj.get("chat"),
            "currencyPosition": obj.get("currencyPosition"),
            "datasetId": obj.get("datasetId"),
            "debounceMs": obj.get("debounceMs"),
            "defaultAiQuestions": obj.get("defaultAiQuestions"),
            "defaultCurrency": obj.get("defaultCurrency"),
            "defaultSearchMode": obj.get("defaultSearchMode"),
            "defaultSearchQueries": obj.get("defaultSearchQueries"),
            "placeholder": obj.get("placeholder"),
            "problemLink": obj.get("problemLink"),
            "responsive": obj.get("responsive"),
            "searchOptions": PublicPageSearchOptions.from_dict(obj["searchOptions"]) if obj.get("searchOptions") is not None else None,
            "suggestedQueries": obj.get("suggestedQueries"),
            "theme": obj.get("theme"),
            "type": obj.get("type"),
            "useGroupSearch": obj.get("useGroupSearch")
        })
        return _obj


